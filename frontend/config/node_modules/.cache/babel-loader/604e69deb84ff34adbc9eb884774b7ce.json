{"ast":null,"code":"const {\n  Contract\n} = require(\"../index.js\");\n\nconst {\n  Cell\n} = require(\"../../boc\");\n\nconst {\n  hexToBytes,\n  BN,\n  nacl,\n  bytesToBase64\n} = require(\"../../utils\");\n\nclass SubscriptionContract extends Contract {\n  /**\n   * @param provider\n   * @param options   {{wc: number, wallet: Address, beneficiary: Address, amount: BN, period: number, timeout: number, startAt: number, subscriptionId: number, address?: Address | string}}\n   */\n  constructor(provider, options) {\n    options.code = Cell.oneFromBocn    super(provider, options);\n\n    this.methods.pay = () => Contract.createMethod(provider, this.createPayExternalMessage());\n\n    this.methods.getSubscriptionData = this.getSubscriptionData.bind(this);\n  }\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains wallet data\n   */\n\n\n  createDataCell() {\n    const cell = new Cell();\n    cell.bits.writeAddress(this.options.wallet);\n    cell.bits.writeAddress(this.options.beneficiary);\n    cell.bits.writeGrams(this.options.amount);\n    cell.bits.writeUint(this.options.period, 32);\n    cell.bits.writeUint(this.options.startAt, 32); // start_time\n\n    cell.bits.writeUint(this.options.timeout, 32);\n    cell.bits.writeUint(0, 32); // last_payment_time\n\n    cell.bits.writeUint(0, 32); // last_request_time\n\n    cell.bits.writeUint(0, 8); // failed_attempts\n\n    cell.bits.writeUint(this.options.subscriptionId, 32); // subscription_id\n\n    return cell;\n  }\n  /**\n   * Payment body (from wallet to subscription)\n   * @return {Cell}\n   */\n\n\n  createBody() {\n    const body = new Cell();\n    body.bits.writeUint(new BN(0x706c7567).add(new BN(0x80000000)), 32); // op\n\n    return body;\n  }\n  /**\n   * Destroy plugin body (from wallet to subscription OR from beneficiary to subscription)\n   * @return {Cell}\n   */\n\n\n  createSelfDestructBody() {\n    const body = new Cell();\n    body.bits.writeUint(0x64737472, 32); // op\n\n    return body;\n  }\n\n  async getSubscriptionData() {\n    const parseAddress = tuple => tuple[0].toNumber() + ':' + tuple[1].toString(16);\n\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_subscription_data');\n    const wallet = parseAddress(result[0]);\n    const beneficiary = parseAddress(result[1]);\n    const amount = result[2];\n    const period = result[3].toNumber();\n    const startAt = result[4].toNumber(); // start_time\n\n    const timeout = result[5].toNumber();\n    const lastPayment = result[6].toNumber(); // last_payment_time\n\n    const lastRequest = result[7].toNumber(); // last_request_time\n\n    const failedAttempts = result[8].toNumber();\n    const subscriptionId = result[9].toNumber();\n    return {\n      wallet,\n      beneficiary,\n      amount,\n      period,\n      startAt,\n      timeout,\n      lastPayment,\n      lastRequest,\n      failedAttempts,\n      subscriptionId\n    };\n  }\n  /**\n   * @protected\n   * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}\n   */\n\n\n  async createPayExternalMessage() {\n    const selfAddress = await this.getAddress();\n    const header = Contract.createExternalMessageHeader(selfAddress);\n    const resultMessage = Contract.createCommonMsgInfo(header, null, null);\n    const body = new Cell();\n    body.bits.writeUint(Math.floor(Date.now() / 1000), 64); // this is not required by the contract; just to make it easier to distinguish messages\n\n    return {\n      address: selfAddress,\n      message: resultMessage,\n      body: body\n    };\n  }\n\n}\n\nmodule.exports = {\n  SubscriptionContract\n};","map":{"version":3,"names":["Contract","require","Cell","hexToBytes","BN","nacl","bytesToBase64","SubscriptionContract","constructor","provider","options","code","oneFromBoc","methods","pay","createMethod","createPayExternalMessage","getSubscriptionData","bind","createDataCell","cell","bits","writeAddress","wallet","beneficiary","writeGrams","amount","writeUint","period","startAt","timeout","subscriptionId","createBody","body","add","createSelfDestructBody","parseAddress","tuple","toNumber","toString","myAddress","getAddress","result","call2","lastPayment","lastRequest","failedAttempts","selfAddress","header","createExternalMessageHeader","resultMessage","createCommonMsgInfo","Math","floor","Date","now","address","message","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/contract/subscription/index.js"],"sourcesContent":["const {Contract} = require(\"../index.js\");\nconst {Cell} = require(\"../../boc\");\nconst {hexToBytes, BN, nacl, bytesToBase64} = require(\"../../utils\");\n\n\nclass SubscriptionContract extends Contract {\n    /**\n     * @param provider\n     * @param options   {{wc: number, wallet: Address, beneficiary: Address, amount: BN, period: number, timeout: number, startAt: number, subscriptionId: number, address?: Address | string}}\n     */\n    constructor(provider, options) {\n        options.code = Cell.oneFromBocn        super(provider, options);\n\n        this.methods.pay = () => Contract.createMethod(provider, this.createPayExternalMessage());\n        this.methods.getSubscriptionData = this.getSubscriptionData.bind(this);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains wallet data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeAddress(this.options.wallet);\n        cell.bits.writeAddress(this.options.beneficiary);\n        cell.bits.writeGrams(this.options.amount);\n        cell.bits.writeUint(this.options.period, 32);\n        cell.bits.writeUint(this.options.startAt, 32); // start_time\n        cell.bits.writeUint(this.options.timeout, 32);\n        cell.bits.writeUint(0, 32); // last_payment_time\n        cell.bits.writeUint(0, 32); // last_request_time\n        cell.bits.writeUint(0, 8); // failed_attempts\n        cell.bits.writeUint(this.options.subscriptionId, 32); // subscription_id\n        return cell;\n    }\n\n    /**\n     * Payment body (from wallet to subscription)\n     * @return {Cell}\n     */\n    createBody() {\n        const body = new Cell();\n        body.bits.writeUint(new BN(0x706c7567).add(new BN(0x80000000)), 32); // op\n        return body;\n    }\n\n    /**\n     * Destroy plugin body (from wallet to subscription OR from beneficiary to subscription)\n     * @return {Cell}\n     */\n    createSelfDestructBody() {\n        const body = new Cell();\n        body.bits.writeUint(0x64737472, 32); // op\n        return body;\n    }\n\n    async getSubscriptionData() {\n        const parseAddress = tuple => tuple[0].toNumber() + ':' + tuple[1].toString(16);\n\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_subscription_data');\n\n        const wallet = parseAddress(result[0]);\n        const beneficiary = parseAddress(result[1]);\n        const amount = result[2];\n        const period = result[3].toNumber();\n        const startAt = result[4].toNumber(); // start_time\n        const timeout = result[5].toNumber();\n        const lastPayment = result[6].toNumber(); // last_payment_time\n        const lastRequest = result[7].toNumber(); // last_request_time\n        const failedAttempts = result[8].toNumber();\n        const subscriptionId = result[9].toNumber();\n\n        return {wallet, beneficiary, amount, period, startAt, timeout, lastPayment, lastRequest, failedAttempts, subscriptionId};\n    }\n\n    /**\n     * @protected\n     * @return {Promise<{address: Address, signature: Uint8Array, message: Cell, cell: Cell, body: Cell, resultMessage: Cell}>}\n     */\n    async createPayExternalMessage() {\n        const selfAddress = await this.getAddress();\n        const header = Contract.createExternalMessageHeader(selfAddress);\n        const resultMessage = Contract.createCommonMsgInfo(header, null, null);\n        const body = new Cell();\n        body.bits.writeUint(Math.floor(Date.now() / 1000), 64); // this is not required by the contract; just to make it easier to distinguish messages\n\n        return {\n            address: selfAddress,\n            message: resultMessage,\n            body: body\n        };\n    }\n}\n\nmodule.exports = {SubscriptionContract};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendAPDU = void 0;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _logs = require(\"@ledgerhq/logs\");\n\nconst TagId = 0x05;\n\nfunction chunkBuffer(buffer, sizeForIndex) {\n  const chunks = [];\n\n  for (let i = 0, size = sizeForIndex(0); i < buffer.length; i += size, size = sizeForIndex(i)) {\n    chunks.push(buffer.slice(i, i + size));\n  }\n\n  return chunks;\n}\n\nconst sendAPDU = (write, apdu, mtuSize) => {\n  const chunks = chunkBuffer(apdu, i => mtuSize - (i === 0 ? 5 : 3)).map((buffer, i) => {\n    const head = Buffer.alloc(i === 0 ? 5 : 3);\n    head.writeUInt8(TagId, 0);\n    head.writeUInt16BE(i, 1);\n\n    if (i === 0) {\n      head.writeUInt16BE(apdu.length, 3);\n    }\n\n    return Buffer.concat([head, buffer]);\n  });\n  return _rxjs.Observable.create(o => {\n    let terminated = false;\n\n    async function main() {\n      for (const chunk of chunks) {\n        if (terminated) return;\n        await write(chunk);\n      }\n    }\n\n    main().then(() => {\n      terminated = true;\n      o.complete();\n    }, e => {\n      terminated = true;\n      (0, _logs.log)(\"ble-error\", \"sendAPDU failure \" + String(e));\n      o.error(e);\n    });\n\n    const unsubscribe = () => {\n      if (!terminated) {\n        (0, _logs.log)(\"ble-verbose\", \"sendAPDU interruption\");\n        terminated = true;\n      }\n    };\n\n    return unsubscribe;\n  });\n};\n\nexports.sendAPDU = sendAPDU;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AAEA,MAAMA,KAAK,GAAG,IAAd;;AAEA,SAASC,WAAT,CACEC,MADF,EAEEC,YAFF,EAGiB;EACf,MAAMC,MAAM,GAAG,EAAf;;EACA,KACE,IAAIC,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGH,YAAY,CAAC,CAAD,CADhC,EAEEE,CAAC,GAAGH,MAAM,CAACK,MAFb,EAGEF,CAAC,IAAIC,IAALD,EAAWC,IAAI,GAAGH,YAAY,CAACE,CAAD,CAHhC,EAIE;IACAD,MAAM,CAACI,IAAPJ,CAAYF,MAAM,CAACO,KAAPP,CAAaG,CAAbH,EAAgBG,CAAC,GAAGC,IAApBJ,CAAZE;EACD;;EACD,OAAOA,MAAP;AACD;;AAEM,MAAMM,QAAQ,GAAG,CACtBC,KADsB,EAEtBC,IAFsB,EAGtBC,OAHsB,KAID;EACrB,MAAMT,MAAM,GAAGH,WAAW,CAACW,IAAD,EAAQP,CAAD,IAAOQ,OAAO,IAAIR,CAAC,KAAK,CAANA,GAAU,CAAVA,GAAc,CAAlB,CAArB,CAAXJ,CAAsDa,GAAtDb,CACb,CAACC,MAAD,EAASG,CAAT,KAAe;IACb,MAAMU,IAAI,GAAGC,MAAM,CAACC,KAAPD,CAAaX,CAAC,KAAK,CAANA,GAAU,CAAVA,GAAc,CAA3BW,CAAb;IACAD,IAAI,CAACG,UAALH,CAAgBf,KAAhBe,EAAuB,CAAvBA;IACAA,IAAI,CAACI,aAALJ,CAAmBV,CAAnBU,EAAsB,CAAtBA;;IACA,IAAIV,CAAC,KAAK,CAAV,EAAa;MACXU,IAAI,CAACI,aAALJ,CAAmBH,IAAI,CAACL,MAAxBQ,EAAgC,CAAhCA;IACD;;IACD,OAAOC,MAAM,CAACI,MAAPJ,CAAc,CAACD,IAAD,EAAOb,MAAP,CAAdc,CAAP;EARW,EAAf;EAYA,OAAOK,iBAAWC,MAAXD,CAAmBE,CAAD,IAAO;IAC9B,IAAIC,UAAU,GAAG,KAAjB;;IAEA,eAAeC,IAAf,GAAsB;MACpB,KAAK,MAAMC,KAAX,IAAoBtB,MAApB,EAA4B;QAC1B,IAAIoB,UAAJ,EAAgB;QAChB,MAAMb,KAAK,CAACe,KAAD,CAAX;MACD;IACF;;IAEDD,IAAI,GAAGE,IAAPF,CACE,MAAM;MACJD,UAAU,GAAG,IAAbA;MACAD,CAAC,CAACK,QAAFL;IAHJ,GAKGM,CAAD,IAAO;MACLL,UAAU,GAAG,IAAbA;MACA,eAAI,WAAJ,EAAiB,sBAAsBM,MAAM,CAACD,CAAD,CAA7C;MACAN,CAAC,CAACQ,KAAFR,CAAQM,CAARN;IARJ;;IAYA,MAAMS,WAAW,GAAG,MAAM;MACxB,IAAI,CAACR,UAAL,EAAiB;QACf,eAAI,aAAJ,EAAmB,uBAAnB;QACAA,UAAU,GAAG,IAAbA;MACD;IAJH;;IAOA,OAAOQ,WAAP;EA7BK,EAAP;AAjBK","names":["TagId","chunkBuffer","buffer","sizeForIndex","chunks","i","size","length","push","slice","sendAPDU","write","apdu","mtuSize","map","head","Buffer","alloc","writeUInt8","writeUInt16BE","concat","Observable","create","o","terminated","main","chunk","then","complete","e","String","error","unsubscribe"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/@ledgerhq/devices/src/ble/sendAPDU.js"],"sourcesContent":["// @flow\n\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst TagId = 0x05;\n\nfunction chunkBuffer(\n  buffer: Buffer,\n  sizeForIndex: (number) => number\n): Array<Buffer> {\n  const chunks = [];\n  for (\n    let i = 0, size = sizeForIndex(0);\n    i < buffer.length;\n    i += size, size = sizeForIndex(i)\n  ) {\n    chunks.push(buffer.slice(i, i + size));\n  }\n  return chunks;\n}\n\nexport const sendAPDU = (\n  write: (Buffer) => Promise<void>,\n  apdu: Buffer,\n  mtuSize: number\n): Observable<void> => {\n  const chunks = chunkBuffer(apdu, (i) => mtuSize - (i === 0 ? 5 : 3)).map(\n    (buffer, i) => {\n      const head = Buffer.alloc(i === 0 ? 5 : 3);\n      head.writeUInt8(TagId, 0);\n      head.writeUInt16BE(i, 1);\n      if (i === 0) {\n        head.writeUInt16BE(apdu.length, 3);\n      }\n      return Buffer.concat([head, buffer]);\n    }\n  );\n\n  return Observable.create((o) => {\n    let terminated = false;\n\n    async function main() {\n      for (const chunk of chunks) {\n        if (terminated) return;\n        await write(chunk);\n      }\n    }\n\n    main().then(\n      () => {\n        terminated = true;\n        o.complete();\n      },\n      (e) => {\n        terminated = true;\n        log(\"ble-error\", \"sendAPDU failure \" + String(e));\n        o.error(e);\n      }\n    );\n\n    const unsubscribe = () => {\n      if (!terminated) {\n        log(\"ble-verbose\", \"sendAPDU interruption\");\n        terminated = true;\n      }\n    };\n\n    return unsubscribe;\n  });\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_a) {\n  var _b = _a.bufferSize,\n      bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,\n      _c = _a.windowTime,\n      windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,\n      useRefCount = _a.refCount,\n      scheduler = _a.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function (value) {\n          subject.next(value);\n        },\n        error: function (err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function () {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"mappings":"AACA;AAiEA,SAAMA,aAAN,QACE,kBADF;OAKE,SAA8BC,WAA9B,CAA8BC,kBAA9B,EAA8BC,UAA9B,EAA8BC,SAA9B,EAA8B;EAC9B,IAAIC,MAAJ;;MACEH,kBAAS,WAAwCA,kBAAxC,KAAwC;IAClDG;SACC;UACE;MACAC,UAAU,oBADV;MAEAH,UAAU,YAFV;MAGAI,UAAS,KAHT;MAIAH;IAJA;EAMJ;;EACD;IAAA;EAAA;AAED;;SACEI;EAKA,IAAIC,OAAqC,CAACH,UAA1C;EAAA,IAA0CA,0DAA1C;EAAA,IAA0CI,kBAA1C;EAAA,IAA0CP,0DAA1C;EAAA,IAA0CQ,yBAA1C;EAAA,IAA0CP,wBAA1C;EACA,IAAIQ,OAAJ;EACA,IAAIL,YAAJ;EACA,IAAIM,YAAJ;EACA,IAAIC,WAAU,KAAd;EAEA,cAAO,GAAS,KAAhB;SAIE,SAAWC,oBAAX,CAAWC,MAAX,EAAW;IACXT,QAAI;IACJ,IAAIU,QAAJ;;QACE,YAAWH,UAAM;MACjBA,QAAO,GAAG,KAAV;MACAF,UAAQ,IAAGZ,aAAH,CAAoBM,UAApB,EAA2BH,UAA3B,EAA2BC,SAA3B,CAAR;MACAa,kBAAe,UAAf,CAAsB,IAAtB;kBACM,SAAC,UAAD,CAAM;YACR,YAAYC,KAAZ,EAAmB;UACpBN;QACD,CAHU;aAIR,YAAWO,GAAX,EAAgB;UAChBL,QAAQ,OAAR;UACDF;QACD,CAPU;gBAQR,cAAkB;UAClBQ,aAAY,IAAZ;UACAP,YAAQ,YAAR;UACDD;QACA;MAZS,CAAN;;UAmBJQ,YAAY;QACbP;MACF;WACC;MACDI;IAED;;SACEI,gBAAW;MACXd,QAAQ;MACRU,QAAQ,YAAR;MACAA,QAAI,YAAJ;;UACEJ,YAAY,IAAC,WAAb,IAA2BF,WAA3B,IAA2BJ;QAC3BM,YAAY,YAAZ;QACAA,YAAU,YAAV;QACDD;MACA;IACH;EACH","names":["ReplaySubject","shareReplay","configOrBufferSize","windowTime","scheduler","config","bufferSize","refCount","shareReplayOperator","_b","_c","useRefCount","subject","subscription","hasError","shareReplayOperation","source","innerSub","value","err","isComplete","add"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/shareReplay.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\nexport interface ShareReplayConfig {\n  bufferSize?: number;\n  windowTime?: number;\n  refCount: boolean;\n  scheduler?: SchedulerLike;\n}\n\n/**\n * Share source and replay specified number of emissions on subscription.\n *\n * This operator is a specialization of `replay` that connects to a source observable\n * and multicasts through a `ReplaySubject` constructed with the specified arguments.\n * A successfully completed source will stay cached in the `shareReplayed observable` forever,\n * but an errored source can be retried.\n *\n * ## Why use shareReplay?\n * You generally want to use `shareReplay` when you have side-effects or taxing computations\n * that you do not wish to be executed amongst multiple subscribers.\n * It may also be valuable in situations where you know you will have late subscribers to\n * a stream that need access to previously emitted values.\n * This ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\n *\n * ![](shareReplay.png)\n *\n * ## Example\n * ```ts\n * import { interval } from 'rxjs';\n * import { shareReplay, take } from 'rxjs/operators';\n *\n * const obs$ = interval(1000);\n * const shared$ = obs$.pipe(\n *   take(4),\n *   shareReplay(3)\n * );\n * shared$.subscribe(x => console.log('source A: ', x));\n * shared$.subscribe(y => console.log('source B: ', y));\n *\n * ```\n *\n * @see {@link publish}\n * @see {@link share}\n * @see {@link publishReplay}\n *\n * @param {Number} [bufferSize=Number.POSITIVE_INFINITY] Maximum element count of the replay buffer.\n * @param {Number} [windowTime=Number.POSITIVE_INFINITY] Maximum time length of the replay buffer in milliseconds.\n * @param {Scheduler} [scheduler] Scheduler where connected observers within the selector function\n * will be invoked on.\n * @return {Observable} An observable sequence that contains the elements of a sequence produced\n * by multicasting the source sequence within a selector function.\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(\n  config: ShareReplayConfig\n): MonoTypeOperatorFunction<T>;\nexport function shareReplay<T>(\n  bufferSize?: number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;\nexport function shareReplay<T>(\n  configOrBufferSize?: ShareReplayConfig | number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T> {\n  let config: ShareReplayConfig;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize as ShareReplayConfig;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize as number | undefined,\n      windowTime,\n      refCount: false,\n      scheduler,\n    };\n  }\n  return (source: Observable<T>) => source.lift(shareReplayOperator(config));\n}\n\nfunction shareReplayOperator<T>({\n  bufferSize = Number.POSITIVE_INFINITY,\n  windowTime = Number.POSITIVE_INFINITY,\n  refCount: useRefCount,\n  scheduler,\n}: ShareReplayConfig) {\n  let subject: ReplaySubject<T> | undefined;\n  let refCount = 0;\n  let subscription: Subscription | undefined;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(\n    this: Subscriber<T>,\n    source: Observable<T>\n  ) {\n    refCount++;\n    let innerSub: Subscription;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next(value) {\n          subject.next(value);\n        },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        },\n      });\n\n      // Here we need to check to see if the source synchronously completed. Although\n      // we're setting `subscription = undefined` in the completion handler, if the source\n      // is synchronous, that will happen *before* subscription is set by the return of\n      // the `subscribe` call.\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(() => {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const {\n  Contract\n} = require(\"../../index\");\n\nconst {\n  Cell\n} = require(\"../../../boc\");\n\nconst {\n  parseAddress\n} = require(\"../nft/NftUtils\");\n\nconst {\n  BN\n} = require(\"../../../utils\");\n\nconst JETTON_WALLET_CODE_HEX = 'B5EE9C7241021201000328000114FF00F4A413F4BCF2C80B0102016202030202CC0405001BA0F605DA89A1F401F481F481A8610201D40607020148080900BB0831C02497C138007434C0C05C6C2544D7C0FC02F83E903E900C7E800C5C75C87E800C7E800C00B4C7E08403E29FA954882EA54C4D167C0238208405E3514654882EA58C511100FC02780D60841657C1EF2EA4D67C02B817C12103FCBC2000113E910C1C2EBCB853600201200A0B020120101101F500F4CFFE803E90087C007B51343E803E903E90350C144DA8548AB1C17CB8B04A30BFFCB8B0950D109C150804D50500F214013E809633C58073C5B33248B232C044BD003D0032C032483E401C1D3232C0B281F2FFF274013E903D010C7E801DE0063232C1540233C59C3E8085F2DAC4F3208405E351467232C7C6600C03F73B51343E803E903E90350C0234CFFE80145468017E903E9014D6F1C1551CDB5C150804D50500F214013E809633C58073C5B33248B232C044BD003D0032C0327E401C1D3232C0B281F2FFF274140371C1472C7CB8B0C2BE80146A2860822625A020822625A004AD822860822625A028062849F8C3C975C2C070C008E00D0E0F009ACB3F5007FA0222CF165006CF1625FA025003CF16C95005CC2391729171E25008A813A08208989680AA008208989680A0A014BCF2E2C504C98040FB001023C85004FA0258CF1601CF16CCC9ED5400705279A018A182107362D09CC8CB1F5230CB3F58FA025007CF165007CF16C9718018C8CB0524CF165006FA0215CB6A14CCC971FB0010241023000E10491038375F040076C200B08E218210D53276DB708010C8CB055008CF165004FA0216CB6A12CB1F12CB3FC972FB0093356C21E203C85004FA0258CF1601CF16CCC9ED5400DB3B51343E803E903E90350C01F4CFFE803E900C145468549271C17CB8B049F0BFFCB8B0A0822625A02A8005A805AF3CB8B0E0841EF765F7B232C7C572CFD400FE8088B3C58073C5B25C60063232C14933C59C3E80B2DAB33260103EC01004F214013E809633C58073C5B3327B55200083200835C87B51343E803E903E90350C0134C7E08405E3514654882EA0841EF765F784EE84AC7CB8B174CFCC7E800C04E81408F214013E809633C58073C5B3327B55205ECCF23D';\n\nclass JettonWallet extends Contract {\n  /**\n   * @param provider\n   * @param options   {{address?: Address | string, code?: Cell}}\n   */\n  constructor(provider, options) {\n    options.wc = 0;\n    options.code = options.code || Cell.oneFromBoc(JETTON_WALLET_CODE_HEX);\n    super(provider, options);\n  }\n  /**\n   * @param params    {{queryId?: number, jettonAmount: BN, toAddress: Address, responseAddress: Address, forwardAmount: BN, forwardPayload: Uint8Array}}\n   */\n\n\n  async createTransferBody(params) {\n    const cell = new Cell();\n    cell.bits.writeUint(0xf8a7ea5, 32); // request_transfer op\n\n    cell.bits.writeUint(params.queryId || 0, 64);\n    cell.bits.writeCoins(params.jettonAmount);\n    cell.bits.writeAddress(params.toAddress);\n    cell.bits.writeAddress(params.responseAddress);\n    cell.bits.writeBit(false); // null custom_payload\n\n    cell.bits.writeCoins(params.forwardAmount || new BN(0));\n    cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n\n    if (params.forwardPayload) {\n      cell.bits.writeBytes(params.forwardPayload);\n    }\n\n    return cell;\n  }\n  /**\n   * @param params    {{queryId?: number, jettonAmount: BN, responseAddress: Address}}\n   */\n\n\n  async createBurnBody(params) {\n    const cell = new Cell();\n    cell.bits.writeUint(0x595f07bc, 32); // burn op\n\n    cell.bits.writeUint(params.queryId || 0, 64);\n    cell.bits.writeCoins(params.jettonAmount);\n    cell.bits.writeAddress(params.responseAddress);\n    return cell;\n  }\n\n  async getData() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_wallet_data');\n    const balance = result[0];\n    const ownerAddress = parseAddress(result[1]);\n    const jettonMinterAddress = parseAddress(result[2]);\n    const jettonWalletCode = result[3];\n    return {\n      balance,\n      ownerAddress,\n      jettonMinterAddress,\n      jettonWalletCode\n    };\n  }\n\n}\n\nJettonWallet.codeHex = JETTON_WALLET_CODE_HEX;\nmodule.exports = {\n  JettonWallet\n};","map":{"version":3,"names":["Contract","require","Cell","parseAddress","BN","JETTON_WALLET_CODE_HEX","JettonWallet","constructor","provider","options","wc","code","oneFromBoc","createTransferBody","params","cell","bits","writeUint","queryId","writeCoins","jettonAmount","writeAddress","toAddress","responseAddress","writeBit","forwardAmount","forwardPayload","writeBytes","createBurnBody","getData","myAddress","getAddress","result","call2","toString","balance","ownerAddress","jettonMinterAddress","jettonWalletCode","codeHex","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/contract/token/ft/JettonWallet.js"],"sourcesContent":["const {Contract} = require(\"../../index\");\nconst {Cell} = require(\"../../../boc\");\nconst {parseAddress} = require(\"../nft/NftUtils\");\nconst {BN} = require(\"../../../utils\");\n\nconstn\nclass JettonWallet extends Contract {\n    /**\n     * @param provider\n     * @param options   {{address?: Address | string, code?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        options.code = options.code || Cell.oneFromBoc(JETTON_WALLET_CODE_HEX);\n        super(provider, options);\n    }\n\n    /**\n     * @param params    {{queryId?: number, jettonAmount: BN, toAddress: Address, responseAddress: Address, forwardAmount: BN, forwardPayload: Uint8Array}}\n     */\n    async createTransferBody(params) {\n        const cell = new Cell();\n        cell.bits.writeUint(0xf8a7ea5, 32); // request_transfer op\n        cell.bits.writeUint(params.queryId || 0, 64);\n        cell.bits.writeCoins(params.jettonAmount);\n        cell.bits.writeAddress(params.toAddress);\n        cell.bits.writeAddress(params.responseAddress);\n        cell.bits.writeBit(false); // null custom_payload\n        cell.bits.writeCoins(params.forwardAmount || new BN(0));\n        cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n        if (params.forwardPayload) {\n            cell.bits.writeBytes(params.forwardPayload);\n        }\n        return cell;\n    }\n\n    /**\n     * @param params    {{queryId?: number, jettonAmount: BN, responseAddress: Address}}\n     */\n    async createBurnBody(params) {\n        const cell = new Cell();\n        cell.bits.writeUint(0x595f07bc, 32); // burn op\n        cell.bits.writeUint(params.queryId || 0, 64);\n        cell.bits.writeCoins(params.jettonAmount);\n        cell.bits.writeAddress(params.responseAddress);\n        return cell;\n    }\n\n    async getData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_wallet_data');\n\n        const balance = result[0];\n        const ownerAddress = parseAddress(result[1]);\n        const jettonMinterAddress =  parseAddress(result[2]);\n        const jettonWalletCode = result[3];\n\n        return {balance, ownerAddress, jettonMinterAddress, jettonWalletCode};\n    }\n}\n\nJettonWallet.codeHex = JETTON_WALLET_CODE_HEX;\n\nmodule.exports = {JettonWallet};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
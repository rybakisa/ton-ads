{"ast":null,"code":"const utils = require(\"./utils\");\n\nconst Address = utils.Address;\n\nconst boc = require(\"./boc\");\n\nconst AppTon = require(\"./ledger/AppTon\");\n\nconst HttpProvider = require(\"./providers\").default;\n\nconst {\n  Contract\n} = require(\"./contract\");\n\nconst Wallets = require(\"./contract/wallet\").default;\n\nconst LockupWallets = require(\"./contract/lockup\").default;\n\nconst NFT = require(\"./contract/token/nft\").default;\n\nconst JETTON = require(\"./contract/token/ft\").default;\n\nconst {\n  BlockSubscription,\n  InMemoryBlockStorage\n} = require(\"./providers/blockSubscription\");\n\nconst {\n  SubscriptionContract\n} = require(\"./contract/subscription/index\");\n\nconst {\n  Payments,\n  PaymentChannel\n} = require(\"./contract/payments/index\");\n\nconst TransportWebUSB = require(\"@ledgerhq/hw-transport-webusb\").default;\n\nconst TransportWebHID = require(\"@ledgerhq/hw-transport-webhid\").default;\n\nconst BluetoothTransport = require(\"@ledgerhq/hw-transport-web-ble\").default;\n\nconst {\n  Dns,\n  DnsCollection,\n  DnsItem\n} = require(\"./contract/dns\").default;\n\nconst version = '0.0.50';\n\nclass TonWeb {\n  constructor(provider) {\n    this.version = version;\n    this.utils = utils;\n    this.Address = Address;\n    this.boc = boc;\n    this.Contract = Contract;\n    this.BlockSubscription = BlockSubscription;\n    this.InMemoryBlockStorage = InMemoryBlockStorage;\n    this.provider = provider || new HttpProvider();\n    this.dns = new Dns(this.provider);\n    this.wallet = new Wallets(this.provider);\n    this.payments = new Payments(this.provider);\n    this.lockupWallet = LockupWallets;\n  }\n  /**\n   * Use this method to get transaction history of a given address.\n   * @param address   {Address | string}\n   * @param limit?    {number}\n   * @param lt?    {number}\n   * @param txhash?    {string}   in HEX\n   * @param to_lt?    {number}\n   * @return array of transaction objects\n   */\n\n\n  async getTransactions(address) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    let lt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    let txhash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n    let to_lt = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    return this.provider.getTransactions(address.toString(), limit, lt, txhash, to_lt);\n  }\n\n  /**\n   * @param address   {Address | string}\n   * @return {Promise<string>} - The current balance for the given address in nanograms.\n   */\n  async getBalance(address) {\n    return this.provider.getBalance(address.toString());\n  }\n  /**\n   * Use this method to send serialized boc file: fully packed and serialized external message.\n   * @param bytes {Uint8Array}\n   */\n\n\n  async sendBoc(bytes) {\n    return this.provider.sendBoc(utils.bytesToBase64(bytes));\n  }\n  /**\n   * Invoke get-method of smart contract\n   * @param address   {Address | string}    contract address\n   * @param method   {string | number}        method name or method id\n   * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n   */\n\n\n  async call(address, method) {\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return this.provider.call(address.toString(), method, params);\n  }\n\n}\n\nTonWeb.version = version;\nTonWeb.utils = utils;\nTonWeb.Address = Address;\nTonWeb.boc = boc;\nTonWeb.HttpProvider = HttpProvider;\nTonWeb.Contract = Contract;\nTonWeb.Wallets = Wallets;\nTonWeb.LockupWallets = LockupWallets;\nTonWeb.SubscriptionContract = SubscriptionContract;\nTonWeb.BlockSubscription = BlockSubscription;\nTonWeb.InMemoryBlockStorage = InMemoryBlockStorage;\nTonWeb.ledger = {\n  TransportWebUSB,\n  TransportWebHID,\n  BluetoothTransport,\n  AppTon\n};\nTonWeb.token = {\n  nft: NFT,\n  ft: JETTON,\n  jetton: JETTON\n};\nTonWeb.dns = Dns;\nTonWeb.dns.DnsCollection = DnsCollection;\nTonWeb.dns.DnsItem = DnsItem;\nTonWeb.payments = Payments;\nTonWeb.payments.PaymentChannel = PaymentChannel;\nmodule.exports = TonWeb;","map":{"version":3,"names":["utils","require","Address","boc","AppTon","HttpProvider","default","Contract","Wallets","LockupWallets","NFT","JETTON","BlockSubscription","InMemoryBlockStorage","SubscriptionContract","Payments","PaymentChannel","TransportWebUSB","TransportWebHID","BluetoothTransport","Dns","DnsCollection","DnsItem","version","TonWeb","constructor","provider","dns","wallet","payments","lockupWallet","getTransactions","address","limit","lt","undefined","txhash","to_lt","toString","getBalance","sendBoc","bytes","bytesToBase64","call","method","params","ledger","token","nft","ft","jetton","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/index.js"],"sourcesContent":["const utils = require(\"./utils\");\nconst Address = utils.Address;\nconst boc = require(\"./boc\");\nconst AppTon = require(\"./ledger/AppTon\");\nconst HttpProvider = require(\"./providers\").default;\nconst {Contract} = require(\"./contract\");\nconst Wallets = require(\"./contract/wallet\").default;\nconst LockupWallets = require(\"./contract/lockup\").default;\nconst NFT = require(\"./contract/token/nft\").default;\nconst JETTON = require(\"./contract/token/ft\").default;\nconst {BlockSubscription, InMemoryBlockStorage} = require(\"./providers/blockSubscription\");\nconst {SubscriptionContract} = require(\"./contract/subscription/index\");\nconst {Payments, PaymentChannel} = require(\"./contract/payments/index\");\nconst TransportWebUSB = require(\"@ledgerhq/hw-transport-webusb\").default;\nconst TransportWebHID = require(\"@ledgerhq/hw-transport-webhid\").default;\nconst BluetoothTransport = require(\"@ledgerhq/hw-transport-web-ble\").default;\nconst {Dns, DnsCollection, DnsItem} = require(\"./contract/dns\").default;\nconst version = '0.0.50';\n\nclass TonWeb {\n    constructor(provider) {\n        this.version = version;\n        this.utils = utils;\n        this.Address = Address;\n        this.boc = boc;\n        this.Contract = Contract;\n        this.BlockSubscription = BlockSubscription;\n        this.InMemoryBlockStorage = InMemoryBlockStorage;\n\n        this.provider = provider || new HttpProvider();\n        this.dns = new Dns(this.provider);\n        this.wallet = new Wallets(this.provider);\n        this.payments = new Payments(this.provider);\n        this.lockupWallet = LockupWallets;\n    }\n\n    /**\n     * Use this method to get transaction history of a given address.\n     * @param address   {Address | string}\n     * @param limit?    {number}\n     * @param lt?    {number}\n     * @param txhash?    {string}   in HEX\n     * @param to_lt?    {number}\n     * @return array of transaction objects\n     */\n    async getTransactions(address, limit = 20, lt = undefined, txhash = undefined, to_lt = undefined) {\n        return this.provider.getTransactions(address.toString(), limit, lt, txhash, to_lt);\n    };\n\n    /**\n     * @param address   {Address | string}\n     * @return {Promise<string>} - The current balance for the given address in nanograms.\n     */\n    async getBalance(address) {\n        return this.provider.getBalance(address.toString());\n    }\n\n    /**\n     * Use this method to send serialized boc file: fully packed and serialized external message.\n     * @param bytes {Uint8Array}\n     */\n    async sendBoc(bytes) {\n        return this.provider.sendBoc(utils.bytesToBase64(bytes));\n    }\n\n    /**\n     * Invoke get-method of smart contract\n     * @param address   {Address | string}    contract address\n     * @param method   {string | number}        method name or method id\n     * @param params?   Array of stack elements: [['num',3], ['cell', cell_object], ['slice', slice_object]]\n     */\n    async call(address, method, params = []) {\n        return this.provider.call(address.toString(), method, params);\n    }\n}\n\nTonWeb.version = version;\nTonWeb.utils = utils;\nTonWeb.Address = Address;\nTonWeb.boc = boc;\nTonWeb.HttpProvider = HttpProvider;\nTonWeb.Contract = Contract;\nTonWeb.Wallets = Wallets;\nTonWeb.LockupWallets = LockupWallets;\nTonWeb.SubscriptionContract = SubscriptionContract;\nTonWeb.BlockSubscription = BlockSubscription;\nTonWeb.InMemoryBlockStorage = InMemoryBlockStorage;\nTonWeb.ledger = {\n    TransportWebUSB,\n    TransportWebHID,\n    BluetoothTransport,\n    AppTon,\n};\nTonWeb.token = {\n    nft: NFT,\n    ft: JETTON,\n    jetton: JETTON,\n}\nTonWeb.dns = Dns;\nTonWeb.dns.DnsCollection = DnsCollection;\nTonWeb.dns.DnsItem = DnsItem;\nTonWeb.payments = Payments;\nTonWeb.payments.PaymentChannel = PaymentChannel;\n\nmodule.exports = TonWeb;\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACE,OAAtB;;AACA,MAAMC,GAAG,GAAGF,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,aAAD,CAAP,CAAuBK,OAA5C;;AACA,MAAM;EAACC;AAAD,IAAaN,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAC,mBAAD,CAAP,CAA6BK,OAA7C;;AACA,MAAMG,aAAa,GAAGR,OAAO,CAAC,mBAAD,CAAP,CAA6BK,OAAnD;;AACA,MAAMI,GAAG,GAAGT,OAAO,CAAC,sBAAD,CAAP,CAAgCK,OAA5C;;AACA,MAAMK,MAAM,GAAGV,OAAO,CAAC,qBAAD,CAAP,CAA+BK,OAA9C;;AACA,MAAM;EAACM,iBAAD;EAAoBC;AAApB,IAA4CZ,OAAO,CAAC,+BAAD,CAAzD;;AACA,MAAM;EAACa;AAAD,IAAyBb,OAAO,CAAC,+BAAD,CAAtC;;AACA,MAAM;EAACc,QAAD;EAAWC;AAAX,IAA6Bf,OAAO,CAAC,2BAAD,CAA1C;;AACA,MAAMgB,eAAe,GAAGhB,OAAO,CAAC,+BAAD,CAAP,CAAyCK,OAAjE;;AACA,MAAMY,eAAe,GAAGjB,OAAO,CAAC,+BAAD,CAAP,CAAyCK,OAAjE;;AACA,MAAMa,kBAAkB,GAAGlB,OAAO,CAAC,gCAAD,CAAP,CAA0CK,OAArE;;AACA,MAAM;EAACc,GAAD;EAAMC,aAAN;EAAqBC;AAArB,IAAgCrB,OAAO,CAAC,gBAAD,CAAP,CAA0BK,OAAhE;;AACA,MAAMiB,OAAO,GAAG,QAAhB;;AAEA,MAAMC,MAAN,CAAa;EACTC,WAAW,CAACC,QAAD,EAAW;IAClB,KAAKH,OAAL,GAAeA,OAAf;IACA,KAAKvB,KAAL,GAAaA,KAAb;IACA,KAAKE,OAAL,GAAeA,OAAf;IACA,KAAKC,GAAL,GAAWA,GAAX;IACA,KAAKI,QAAL,GAAgBA,QAAhB;IACA,KAAKK,iBAAL,GAAyBA,iBAAzB;IACA,KAAKC,oBAAL,GAA4BA,oBAA5B;IAEA,KAAKa,QAAL,GAAgBA,QAAQ,IAAI,IAAIrB,YAAJ,EAA5B;IACA,KAAKsB,GAAL,GAAW,IAAIP,GAAJ,CAAQ,KAAKM,QAAb,CAAX;IACA,KAAKE,MAAL,GAAc,IAAIpB,OAAJ,CAAY,KAAKkB,QAAjB,CAAd;IACA,KAAKG,QAAL,GAAgB,IAAId,QAAJ,CAAa,KAAKW,QAAlB,CAAhB;IACA,KAAKI,YAAL,GAAoBrB,aAApB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACyB,MAAfsB,eAAe,CAACC,OAAD,EAA6E;IAAA,IAAnEC,KAAmE,uEAA3D,EAA2D;IAAA,IAAvDC,EAAuD,uEAAlDC,SAAkD;IAAA,IAAvCC,MAAuC,uEAA9BD,SAA8B;IAAA,IAAnBE,KAAmB,uEAAXF,SAAW;IAC9F,OAAO,KAAKT,QAAL,CAAcK,eAAd,CAA8BC,OAAO,CAACM,QAAR,EAA9B,EAAkDL,KAAlD,EAAyDC,EAAzD,EAA6DE,MAA7D,EAAqEC,KAArE,CAAP;EACH;;EAED;AACJ;AACA;AACA;EACoB,MAAVE,UAAU,CAACP,OAAD,EAAU;IACtB,OAAO,KAAKN,QAAL,CAAca,UAAd,CAAyBP,OAAO,CAACM,QAAR,EAAzB,CAAP;EACH;EAED;AACJ;AACA;AACA;;;EACiB,MAAPE,OAAO,CAACC,KAAD,EAAQ;IACjB,OAAO,KAAKf,QAAL,CAAcc,OAAd,CAAsBxC,KAAK,CAAC0C,aAAN,CAAoBD,KAApB,CAAtB,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACc,MAAJE,IAAI,CAACX,OAAD,EAAUY,MAAV,EAA+B;IAAA,IAAbC,MAAa,uEAAJ,EAAI;IACrC,OAAO,KAAKnB,QAAL,CAAciB,IAAd,CAAmBX,OAAO,CAACM,QAAR,EAAnB,EAAuCM,MAAvC,EAA+CC,MAA/C,CAAP;EACH;;AAtDQ;;AAyDbrB,MAAM,CAACD,OAAP,GAAiBA,OAAjB;AACAC,MAAM,CAACxB,KAAP,GAAeA,KAAf;AACAwB,MAAM,CAACtB,OAAP,GAAiBA,OAAjB;AACAsB,MAAM,CAACrB,GAAP,GAAaA,GAAb;AACAqB,MAAM,CAACnB,YAAP,GAAsBA,YAAtB;AACAmB,MAAM,CAACjB,QAAP,GAAkBA,QAAlB;AACAiB,MAAM,CAAChB,OAAP,GAAiBA,OAAjB;AACAgB,MAAM,CAACf,aAAP,GAAuBA,aAAvB;AACAe,MAAM,CAACV,oBAAP,GAA8BA,oBAA9B;AACAU,MAAM,CAACZ,iBAAP,GAA2BA,iBAA3B;AACAY,MAAM,CAACX,oBAAP,GAA8BA,oBAA9B;AACAW,MAAM,CAACsB,MAAP,GAAgB;EACZ7B,eADY;EAEZC,eAFY;EAGZC,kBAHY;EAIZf;AAJY,CAAhB;AAMAoB,MAAM,CAACuB,KAAP,GAAe;EACXC,GAAG,EAAEtC,GADM;EAEXuC,EAAE,EAAEtC,MAFO;EAGXuC,MAAM,EAAEvC;AAHG,CAAf;AAKAa,MAAM,CAACG,GAAP,GAAaP,GAAb;AACAI,MAAM,CAACG,GAAP,CAAWN,aAAX,GAA2BA,aAA3B;AACAG,MAAM,CAACG,GAAP,CAAWL,OAAX,GAAqBA,OAArB;AACAE,MAAM,CAACK,QAAP,GAAkBd,QAAlB;AACAS,MAAM,CAACK,QAAP,CAAgBb,cAAhB,GAAiCA,cAAjC;AAEAmC,MAAM,CAACC,OAAP,GAAiB5B,MAAjB"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * A Log object\n */\nlet id = 0;\nconst subscribers = [];\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\n\nexport const log = (type, message, data) => {\n  const obj = {\n    type,\n    id: String(++id),\n    date: new Date()\n  };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\n\nexport const listen = cb => {\n  subscribers.push(cb);\n  return () => {\n    const i = subscribers.indexOf(cb);\n\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log) {\n  for (let i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n} // for debug purpose\n\n\nif (typeof window !== \"undefined\") {\n  window.__ledgerLogsListen = listen;\n}","map":{"version":3,"mappings":"AAEA;AACA;AACA;AAWA,IAAIA,EAAE,GAAG,CAAT;AACA,MAAMC,WAAW,GAAG,EAApB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,GAAG,GAAG,CAACC,IAAD,EAAeC,OAAf,EAAiCC,IAAjC,KAAgD;EACjE,MAAMC,GAAQ,GAAG;IAAEH,IAAF;IAAQH,EAAE,EAAEO,MAAM,CAAC,EAAEP,EAAH,CAAlB;IAA0BQ,IAAI,EAAE,IAAIC,IAAJ;EAAhC,CAAjB;EACA,IAAIL,OAAJ,EAAaE,GAAG,CAACF,OAAJE,GAAcF,OAAdE;EACb,IAAID,IAAJ,EAAUC,GAAG,CAACD,IAAJC,GAAWD,IAAXC;EACVI,QAAQ,CAACJ,GAAD,CAARI;AAJK;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAIC,EAAD,IAAoC;EACxDX,WAAW,CAACY,IAAZZ,CAAiBW,EAAjBX;EACA,OAAO,MAAM;IACX,MAAMa,CAAC,GAAGb,WAAW,CAACc,OAAZd,CAAoBW,EAApBX,CAAV;;IACA,IAAIa,CAAC,KAAK,CAAC,CAAX,EAAc;MACZ;MACAb,WAAW,CAACa,CAAD,CAAXb,GAAiBA,WAAW,CAACA,WAAW,CAACe,MAAZf,GAAqB,CAAtB,CAA5BA;MACAA,WAAW,CAACgB,GAAZhB;IACD;EANH;AAFK;;AAYP,SAASS,QAAT,CAAkBR,GAAlB,EAA4B;EAC1B,KAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,WAAW,CAACe,MAAhC,EAAwCF,CAAC,EAAzC,EAA6C;IAC3C,IAAI;MACFb,WAAW,CAACa,CAAD,CAAXb,CAAeC,GAAfD;IADF,EAEE,OAAOiB,CAAP,EAAU;MACVC,OAAO,CAACC,KAARD,CAAcD,CAAdC;IACD;EACF;EAGH;;;AACA,IAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;EACjCA,MAAM,CAACC,kBAAPD,GAA4BV,MAA5BU;AACD","names":["id","subscribers","log","type","message","data","obj","String","date","Date","dispatch","listen","cb","push","i","indexOf","length","pop","e","console","error","window","__ledgerLogsListen"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/@ledgerhq/logs/src/index.js"],"sourcesContent":["// @flow\n\n/**\n * A Log object\n */\nexport type Log = {\n  type: string,\n  message?: string,\n  data?: any,\n  id: string, // unique amount all logs\n  date: Date, // date of the log\n};\n\nexport type Unsubscribe = () => void;\n\nlet id = 0;\nconst subscribers = [];\n\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type: string, message?: string, data?: any) => {\n  const obj: Log = { type, id: String(++id), date: new Date() };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb: (Log) => void): Unsubscribe => {\n  subscribers.push(cb);\n  return () => {\n    const i = subscribers.indexOf(cb);\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log: Log) {\n  for (let i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n// for debug purpose\nif (typeof window !== \"undefined\") {\n  window.__ledgerLogsListen = listen;\n}\n"]},"metadata":{},"sourceType":"module"}
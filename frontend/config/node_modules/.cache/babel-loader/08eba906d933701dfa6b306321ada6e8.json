{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nvar Subscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(Subscriber, _super);\n\n  function Subscriber(destinationOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this.syncErrorValue = null;\n    _this.syncErrorThrown = false;\n    _this.syncErrorThrowable = false;\n    _this.isStopped = false;\n\n    switch (arguments.length) {\n      case 0:\n        _this.destination = emptyObserver;\n        break;\n\n      case 1:\n        if (!destinationOrNext) {\n          _this.destination = emptyObserver;\n          break;\n        }\n\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            _this.destination = destinationOrNext;\n            destinationOrNext.add(_this);\n          } else {\n            _this.syncErrorThrowable = true;\n            _this.destination = new SafeSubscriber(_this, destinationOrNext);\n          }\n\n          break;\n        }\n\n      default:\n        _this.syncErrorThrowable = true;\n        _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n        break;\n    }\n\n    return _this;\n  }\n\n  Subscriber.prototype[rxSubscriberSymbol] = function () {\n    return this;\n  };\n\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n\n    this.isStopped = true;\n\n    _super.prototype.unsubscribe.call(this);\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _parentOrParents = this._parentOrParents;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  };\n\n  return Subscriber;\n}(Subscription);\n\nexport { Subscriber };\n\nvar SafeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SafeSubscriber, _super);\n\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = _this;\n\n    if (isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n\n        if (isFunction(context.unsubscribe)) {\n          _this.add(context.unsubscribe.bind(context));\n        }\n\n        context.unsubscribe = _this.unsubscribe.bind(_this);\n      }\n    }\n\n    _this._context = context;\n    _this._next = next;\n    _this._error = error;\n    _this._complete = complete;\n    return _this;\n  }\n\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n\n    _parentSubscriber.unsubscribe();\n  };\n\n  return SafeSubscriber;\n}(Subscriber);\n\nexport { SafeSubscriber };","map":{"version":3,"mappings":"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","names":["tslib_1","isFunction","empty","Subscription","rxSubscriber","rxSubscriberSymbol","config","Subscriber","_super","destinationOrNext","error","complete","_this","arguments","destination","emptyObserver","syncErrorThrowable","next","subscriber","isStopped","unsubscribe","_next","value","_error","err","_complete","_parentOrParents","closed","SafeSubscriber","_parentSubscriber","observerOrNext","context","_context","useDeprecatedSynchronousErrorHandling","__tryOrUnsub","__tryOrSetError","hostReportError","syncErrorValue","wrappedComplete","call","fn","prototype","parent","syncErrorThrown"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
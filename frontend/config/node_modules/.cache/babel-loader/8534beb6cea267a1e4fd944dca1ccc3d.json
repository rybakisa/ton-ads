{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\n\nvar SimpleInnerSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SimpleInnerSubscriber, _super);\n\n  function SimpleInnerSubscriber(parent) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    return _this;\n  }\n\n  SimpleInnerSubscriber.prototype._next = function (value) {\n    this.parent.notifyNext(value);\n  };\n\n  SimpleInnerSubscriber.prototype._error = function (error) {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  };\n\n  SimpleInnerSubscriber.prototype._complete = function () {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  };\n\n  return SimpleInnerSubscriber;\n}(Subscriber);\n\nexport { SimpleInnerSubscriber };\n\nvar ComplexInnerSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ComplexInnerSubscriber, _super);\n\n  function ComplexInnerSubscriber(parent, outerValue, outerIndex) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    _this.outerValue = outerValue;\n    _this.outerIndex = outerIndex;\n    return _this;\n  }\n\n  ComplexInnerSubscriber.prototype._next = function (value) {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n  };\n\n  ComplexInnerSubscriber.prototype._error = function (error) {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  };\n\n  ComplexInnerSubscriber.prototype._complete = function () {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  };\n\n  return ComplexInnerSubscriber;\n}(Subscriber);\n\nexport { ComplexInnerSubscriber };\n\nvar SimpleOuterSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SimpleOuterSubscriber, _super);\n\n  function SimpleOuterSubscriber() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  SimpleOuterSubscriber.prototype.notifyError = function (err) {\n    this.destination.error(err);\n  };\n\n  SimpleOuterSubscriber.prototype.notifyComplete = function () {\n    this.destination.complete();\n  };\n\n  return SimpleOuterSubscriber;\n}(Subscriber);\n\nexport { SimpleOuterSubscriber };\n\nvar ComplexOuterSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ComplexOuterSubscriber, _super);\n\n  function ComplexOuterSubscriber() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ComplexOuterSubscriber.prototype.notifyNext = function (_outerValue, innerValue, _outerIndex, _innerSub) {\n    this.destination.next(innerValue);\n  };\n\n  ComplexOuterSubscriber.prototype.notifyError = function (error) {\n    this.destination.error(error);\n  };\n\n  ComplexOuterSubscriber.prototype.notifyComplete = function (_innerSub) {\n    this.destination.complete();\n  };\n\n  return ComplexOuterSubscriber;\n}(Subscriber);\n\nexport { ComplexOuterSubscriber };\nexport function innerSubscribe(result, innerSubscriber) {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n\n  var subscription;\n\n  try {\n    subscription = subscribeTo(result)(innerSubscriber);\n  } catch (error) {\n    innerSubscriber.error(error);\n  }\n\n  return subscription;\n}","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAAsB,cAAtB;AAmBA;;IAA8CC,+CAAaC,MAAb,EAAa;EACzDJ,yCAA0DI,MAA1D;;WAAAD,sBACEE,QAAO;IADW,YAAMD,MAAN,KAAM,CAAgC,IAAhC,KAAgC,IAAtC;;;IAEnB;EAES;;uBACI,WAAgBE,QAAE;IAC/B;EAES;;uBACI,WAAYC,SAAO;IAC/B,KAAKF,MAAL,CAAKG,WAAL,CAAmBC,KAAnB;IACD;EAES;;uBACI,WAAgBC,YAAC;IAC7B,KAAKL,MAAL,CAAKM,cAAL;IACD;EACH;;EAlB8C;CAAA;;AAoB9C;;IAAkDC,gDAAaR,MAAb,EAAa;EAC7DJ,0CAAiEI,MAAjE;;WAAAQ,uBACEP,QAAOQ,YACRC;IAFmB,YAAMV,MAAN,KAAM,CAA8B,IAA9B,KAA8B,IAApC;;IAA6CW;IAAsBA;;IAEtF;EAES;;wBACI,WAAgBT,kBAAmBU,KAAnB,EAAwB;IACrD;EAES;;wBACI,WAAiBT,SAAE;IAC/B,KAAKF,MAAL,CAAKG,WAAL,CAAmBC,KAAnB;IACD;EAES;;wBACI,WAAeC,YAAM;IACjC,KAAKL,MAAL,CAAKM,cAAL,CAAmB,IAAnB;IACD;EACH;;EAlBkD;CAAA;;AAoBlD;;IAAiDM,+CAAab,MAAb,EAAa;EAA9DJ;;;IAYC;EAXC;;uBACmB,WAAKkB,aAAY;IACnC;EAED;;uBACmB,WAAWV;IAC7B;EAED;;uBACmB,WAAWG;IAC7B;EACH;;EAZiD;CAAA;;AAmBjD;;IAAkDQ,gDAAaf,MAAb,EAAa;EAA/DJ;;;IAqBC;EAdC;;wBACmB,WAAKkB,aAAY;IACnC;EAED;;wBACmB,WAAYV,cAAC;IAC/B;EAKD;;wBACmB,WAAWG;IAC7B;EACH;;EArBkD;CAAA;;AAuBlD,SAAMQ,sBAAN;OACE,SAAIC,cAAJ,CAA0BC,MAA1B,EAA4BC,eAA5B,EAA4B;MAC1BA,eAAO,CAASC,QAAC;IAClB;EACD;;MACEF,kBAAcnB,YAAU;IACzB;EACD;;EACA,IAAIsB,YAAJ;;MACE;IACDA;EAAC,SACAf;IACDa;EACD;;EACD","names":["tslib_1","Subscriber","Observable","SimpleInnerSubscriber","_super","parent","_next","_error","notifyError","error","_complete","notifyComplete","ComplexInnerSubscriber","outerValue","outerIndex","_this","value","SimpleOuterSubscriber","notifyNext","ComplexOuterSubscriber","innerSubscribe","result","innerSubscriber","closed","subscription"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/innerSubscribe.ts"],"sourcesContent":["/** @prettier */\nimport { Subscription } from './Subscription';\nimport { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\n\ninterface SimpleOuterSubscriberLike<T> {\n  /**\n   * A handler for inner next notifications from the inner subscription\n   * @param innerValue the value nexted by the inner producer\n   */\n  notifyNext(innerValue: T): void;\n  /**\n   * A handler for inner error notifications from the inner subscription\n   * @param err the error from the inner producer\n   */\n  notifyError(err: any): void;\n  /**\n   * A handler for inner complete notifications from the inner subscription.\n   */\n  notifyComplete(): void;\n}\n\nexport class SimpleInnerSubscriber<T> extends Subscriber<T> {\n  constructor(private parent: SimpleOuterSubscriberLike<any>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this.parent.notifyNext(value);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  }\n}\n\nexport class ComplexInnerSubscriber<T, R> extends Subscriber<R> {\n  constructor(private parent: ComplexOuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n\nexport class SimpleOuterSubscriber<T, R> extends Subscriber<T> implements SimpleOuterSubscriberLike<R> {\n  notifyNext(innerValue: R): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.destination.complete();\n  }\n}\n\n/**\n * DO NOT USE (formerly \"OuterSubscriber\")\n * TODO: We want to refactor this and remove it. It is retaining values it shouldn't for long\n * periods of time.\n */\nexport class ComplexOuterSubscriber<T, R> extends Subscriber<T> {\n  /**\n   * @param _outerValue Used by: bufferToggle, delayWhen, windowToggle\n   * @param innerValue Used by: subclass default, combineLatest, race, bufferToggle, windowToggle, withLatestFrom\n   * @param _outerIndex Used by: combineLatest, race, withLatestFrom\n   * @param _innerSub Used by: delayWhen\n   */\n  notifyNext(_outerValue: T, innerValue: R, _outerIndex: number, _innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any): void {\n    this.destination.error(error);\n  }\n\n  /**\n   * @param _innerSub Used by: race, bufferToggle, delayWhen, windowToggle, windowWhen\n   */\n  notifyComplete(_innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n\nexport function innerSubscribe(result: any, innerSubscriber: Subscriber<any>): Subscription | undefined {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n  let subscription: Subscription;\n  try {\n    subscription = subscribeTo(result)(innerSubscriber) as Subscription;\n  } catch (error) {\n    innerSubscriber.error(error);\n  }\n  return subscription;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\nexport const monitorCharacteristic = characteristic => Observable.create(o => {\n  log(\"ble-verbose\", \"start monitor \" + characteristic.uuid);\n\n  function onCharacteristicValueChanged(event) {\n    const characteristic = event.target;\n\n    if (characteristic.value) {\n      o.next(Buffer.from(characteristic.value.buffer));\n    }\n  }\n\n  characteristic.startNotifications().then(() => {\n    characteristic.addEventListener(\"characteristicvaluechanged\", onCharacteristicValueChanged);\n  });\n  return () => {\n    log(\"ble-verbose\", \"end monitor \" + characteristic.uuid);\n    characteristic.stopNotifications();\n  };\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA2B,MAA3B;AAEA,SAASC,GAAT,QAAoB,gBAApB;AAEA,OAAO,MAAMC,qBAAqB,GAChCC,cADmC,IAGnCH,UAAU,CAACI,MAAXJ,CAAmBK,CAAD,IAAO;EACvBJ,GAAG,CAAC,aAAD,EAAgB,mBAAmBE,cAAc,CAACG,IAAlD,CAAHL;;EAEA,SAASM,4BAAT,CAAsCC,KAAtC,EAA6C;IAC3C,MAAML,cAAc,GAAGK,KAAK,CAACC,MAA7B;;IACA,IAAIN,cAAc,CAACO,KAAnB,EAA0B;MACxBL,CAAC,CAACM,IAAFN,CAAOO,MAAM,CAACC,IAAPD,CAAYT,cAAc,CAACO,KAAfP,CAAqBW,MAAjCF,CAAPP;IACD;EACF;;EAEDF,cAAc,CAACY,kBAAfZ,GAAoCa,IAApCb,CAAyC,MAAM;IAC7CA,cAAc,CAACc,gBAAfd,CACE,4BADFA,EAEEI,4BAFFJ;EADF;EAOA,OAAO,MAAM;IACXF,GAAG,CAAC,aAAD,EAAgB,iBAAiBE,cAAc,CAACG,IAAhD,CAAHL;IACAE,cAAc,CAACe,iBAAff;EAFF;AAjBF,EAHK","names":["Observable","log","monitorCharacteristic","characteristic","create","o","uuid","onCharacteristicValueChanged","event","target","value","next","Buffer","from","buffer","startNotifications","then","addEventListener","stopNotifications"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/@ledgerhq/hw-transport-web-ble/src/monitorCharacteristic.js"],"sourcesContent":["// @flow\nimport { Observable } from \"rxjs\";\nimport type { Characteristic } from \"./types\";\nimport { log } from \"@ledgerhq/logs\";\n\nexport const monitorCharacteristic = (\n  characteristic: Characteristic\n): Observable<Buffer> =>\n  Observable.create((o) => {\n    log(\"ble-verbose\", \"start monitor \" + characteristic.uuid);\n\n    function onCharacteristicValueChanged(event) {\n      const characteristic = event.target;\n      if (characteristic.value) {\n        o.next(Buffer.from(characteristic.value.buffer));\n      }\n    }\n\n    characteristic.startNotifications().then(() => {\n      characteristic.addEventListener(\n        \"characteristicvaluechanged\",\n        onCharacteristicValueChanged\n      );\n    });\n\n    return () => {\n      log(\"ble-verbose\", \"end monitor \" + characteristic.uuid);\n      characteristic.stopNotifications();\n    };\n  });\n"]},"metadata":{},"sourceType":"module"}
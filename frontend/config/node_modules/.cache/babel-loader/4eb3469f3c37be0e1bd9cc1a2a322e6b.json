{"ast":null,"code":"/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n  return function (subscriber) {\n    var iterator = iterable[Symbol_iterator]();\n\n    do {\n      var item = void 0;\n\n      try {\n        item = iterator.next();\n      } catch (err) {\n        subscriber.error(err);\n        return subscriber;\n      }\n\n      if (item.done) {\n        subscriber.complete();\n        break;\n      }\n\n      subscriber.next(item.value);\n\n      if (subscriber.closed) {\n        break;\n      }\n    } while (true);\n\n    if (typeof iterator.return === 'function') {\n      subscriber.add(function () {\n        if (iterator.return) {\n          iterator.return();\n        }\n      });\n    }\n\n    return subscriber;\n  };\n};","map":{"version":3,"mappings":"AACA;AAEA,SAAOA,QAAM,mBAAb,QAAuC,oBAAvC;OACE,IAAMC,mBAA6B,aAAeC,QAAf,EAAmB;EAEtD,OAAG;IACD,IAAIF,QAAI,WAAoB,iBAApB,EAAR;;IACA;MACE,IAAIG,IAAG,QAAS,CAAhB;;MACD;QAAQA,IAAK,kBAAL;MACP,CADD,CAEC,OAAOC,GAAP,EAAO;QACRC;QACO,OAAOA,UAAP;MACN;;MACA,QAAM,KAAN,EAAM;QACPA;QACD;MACI;;MACFA,UAAM,KAAN,CAAMF,UAAN;;MACD;QACM;MAGL;IACF,CAlBA,QAkBA,IAlBA;;QAmBE,OAAIH,QAAS,OAAb,KAAqB;gBACnB,KAAS,YAAS;QACnB;UACAA;QACJ;MAEM;IACP;;;GA5BA;CAFA","names":["iterator","subscribeToIterable","iterable","item","err","subscriber"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/util/subscribeToIterable.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = (iterable as any)[Symbol_iterator]();\n\n  do {\n    let item: IteratorResult<T>;\n    try {\n      item = iterator.next();\n    } catch (err) {\n      subscriber.error(err);\n      return subscriber;\n    }\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n"]},"metadata":{},"sourceType":"module"}
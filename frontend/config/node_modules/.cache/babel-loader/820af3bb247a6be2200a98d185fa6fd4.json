{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\n\nvar WindowToggleOperator = /*@__PURE__*/function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  WindowToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n\n  return WindowToggleOperator;\n}();\n\nvar WindowToggleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WindowToggleSubscriber, _super);\n\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.openings = openings;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n\n    return _this;\n  }\n\n  WindowToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n\n    if (contexts) {\n      var len = contexts.length;\n\n      for (var i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  };\n\n  WindowToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n    this.contexts = null;\n\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n\n      while (++index < len) {\n        var context_1 = contexts[index];\n        context_1.window.error(err);\n        context_1.subscription.unsubscribe();\n      }\n    }\n\n    _super.prototype._error.call(this, err);\n  };\n\n  WindowToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n    this.contexts = null;\n\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n\n      while (++index < len) {\n        var context_2 = contexts[index];\n        context_2.window.complete();\n        context_2.subscription.unsubscribe();\n      }\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  WindowToggleSubscriber.prototype._unsubscribe = function () {\n    var contexts = this.contexts;\n    this.contexts = null;\n\n    if (contexts) {\n      var len = contexts.length;\n      var index = -1;\n\n      while (++index < len) {\n        var context_3 = contexts[index];\n        context_3.window.unsubscribe();\n        context_3.subscription.unsubscribe();\n      }\n    }\n  };\n\n  WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (outerValue === this.openings) {\n      var closingNotifier = void 0;\n\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector(innerValue);\n      } catch (e) {\n        return this.error(e);\n      }\n\n      var window_1 = new Subject();\n      var subscription = new Subscription();\n      var context_4 = {\n        window: window_1,\n        subscription: subscription\n      };\n      this.contexts.push(context_4);\n      var innerSubscription = subscribeToResult(this, closingNotifier, context_4);\n\n      if (innerSubscription.closed) {\n        this.closeWindow(this.contexts.length - 1);\n      } else {\n        innerSubscription.context = context_4;\n        subscription.add(innerSubscription);\n      }\n\n      this.destination.next(window_1);\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  };\n\n  WindowToggleSubscriber.prototype.notifyError = function (err) {\n    this.error(err);\n  };\n\n  WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf(inner.context));\n    }\n  };\n\n  WindowToggleSubscriber.prototype.closeWindow = function (index) {\n    if (index === -1) {\n      return;\n    }\n\n    var contexts = this.contexts;\n    var context = contexts[index];\n    var window = context.window,\n        subscription = context.subscription;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  };\n\n  return WindowToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"mappings":"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","names":["tslib_1","Subject","Subscription","OuterSubscriber","subscribeToResult","windowToggle","openings","closingSelector","WindowToggleOperator","call","source","WindowToggleSubscriber","_super","destination","_this","contexts","_next","i","_error","len","index","context_1","window","error","err","_complete","context_2","complete","_unsubscribe","context_3","unsubscribe","prototype","notifyNext","outerValue","closingNotifier","e","window_1","subscription","context_4","push","innerSubscription","inner"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/windowToggle.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n * Every other second, emit the click events from the next 500ms\n * ```ts\n * import { fromEvent, interval, EMPTY } from 'rxjs';\n * import { windowToggle, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\n *   mergeAll()\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings as any));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n      let closingNotifier;\n      try {\n        const { closingSelector } = this;\n        closingNotifier = closingSelector(innerValue);\n      } catch (e) {\n        return this.error(e);\n      }\n\n      const window = new Subject<T>();\n      const subscription = new Subscription();\n      const context = { window, subscription };\n      this.contexts.push(context);\n      const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n      if (innerSubscription.closed) {\n        this.closeWindow(this.contexts.length - 1);\n      } else {\n        (<any>innerSubscription).context = context;\n        subscription.add(innerSubscription);\n      }\n\n      this.destination.next(window);\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
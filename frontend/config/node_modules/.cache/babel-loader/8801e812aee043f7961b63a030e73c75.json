{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\nexport function takeUntil(notifier) {\n  return function (source) {\n    return source.lift(new TakeUntilOperator(notifier));\n  };\n}\n\nvar TakeUntilOperator = /*@__PURE__*/function () {\n  function TakeUntilOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  TakeUntilOperator.prototype.call = function (subscriber, source) {\n    var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    var notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n\n    return takeUntilSubscriber;\n  };\n\n  return TakeUntilOperator;\n}();\n\nvar TakeUntilSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeUntilSubscriber, _super);\n\n  function TakeUntilSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.seenValue = false;\n    return _this;\n  }\n\n  TakeUntilSubscriber.prototype.notifyNext = function () {\n    this.seenValue = true;\n    this.complete();\n  };\n\n  TakeUntilSubscriber.prototype.notifyComplete = function () {};\n\n  return TakeUntilSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAKA,OAAO,KAAEA,OAAT,MAAyB,OAAzB;AA0CA,SAAMC,cAAN,EAAyBC,qBAAzB,EAAsDC,qBAAtD,QAAsD,mBAAtD;OACE,SAAOC,SAAP,CAAQC,QAAR,EAAkC;EACnC;IAAA;EAAA;AAED;;IACEC,iCAA6C;WAAzBA,4BAAyB;IAC5C;EAED;;mBACQ,WAAmBC,OAAO,sBAAoBC,MAApB,EAA+B;IAC/D,IAAMC,sBAAoB,IAAGC,mBAAH,CAAuBC,UAAvB,CAA1B;IACA,IAAIC,oBAAoB,iBAAK,gBAAoB,IAAWV,qBAAX,CAAWO,mBAAX,CAApB,CAA7B;;QACEG,oBAAoB,IAAI,oBAAoB,CAACC,WAAC;MAC9CJ,mBAAc,IAAd,CAAwBG,oBAAxB;MACD;IACD;;IACD;EACH;;EAbA,OAaCN,iBAbD;AAoBA,CAnB+C;;IAmBPI,6CAA2BI,MAA3B,EAA2B;EAGjEd,uCAAYc,MAAZ;;WAAAJ,oBACEK,aAAM;IAHR,kBAAY,KAAZ,CAAkB,IAAlB,EAAkBA,WAAlB,KAAkB,IAAlB;;;IAIC;EAED;;qBACgB,WAAQC;IACtB,KAAKH,SAAL,GAAgB,IAAhB;IACD;EAED;;EAEAH,mBAAC,UAAD,CAACO,cAAD,GAAC,aACH,CADE;;EAdsC;CAAA","names":["tslib_1","innerSubscribe","SimpleInnerSubscriber","SimpleOuterSubscriber","takeUntil","notifier","TakeUntilOperator","call","source","takeUntilSubscriber","TakeUntilSubscriber","subscriber","notifierSubscription","seenValue","_super","destination","notifyNext","notifyComplete"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/takeUntil.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n * Tick every second until the first click happens\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { takeUntil } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  seenValue = false;\n\n  constructor(destination: Subscriber<any>, ) {\n    super(destination);\n  }\n\n  notifyNext(): void {\n    this.seenValue = true;\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nvar VirtualTimeScheduler = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(VirtualTimeScheduler, _super);\n\n  function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n    if (SchedulerAction === void 0) {\n      SchedulerAction = VirtualAction;\n    }\n\n    if (maxFrames === void 0) {\n      maxFrames = Number.POSITIVE_INFINITY;\n    }\n\n    var _this = _super.call(this, SchedulerAction, function () {\n      return _this.frame;\n    }) || this;\n\n    _this.maxFrames = maxFrames;\n    _this.frame = 0;\n    _this.index = -1;\n    return _this;\n  }\n\n  VirtualTimeScheduler.prototype.flush = function () {\n    var _a = this,\n        actions = _a.actions,\n        maxFrames = _a.maxFrames;\n\n    var error, action;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  VirtualTimeScheduler.frameTimeFactor = 10;\n  return VirtualTimeScheduler;\n}(AsyncScheduler);\n\nexport { VirtualTimeScheduler };\n\nvar VirtualAction = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(VirtualAction, _super);\n\n  function VirtualAction(scheduler, work, index) {\n    if (index === void 0) {\n      index = scheduler.index += 1;\n    }\n\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.index = index;\n    _this.active = true;\n    _this.index = scheduler.index = index;\n    return _this;\n  }\n\n  VirtualAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (!this.id) {\n      return _super.prototype.schedule.call(this, state, delay);\n    }\n\n    this.active = false;\n    var action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  };\n\n  VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    this.delay = scheduler.frame + delay;\n    var actions = scheduler.actions;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  };\n\n  VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return undefined;\n  };\n\n  VirtualAction.prototype._execute = function (state, delay) {\n    if (this.active === true) {\n      return _super.prototype._execute.call(this, state, delay);\n    }\n  };\n\n  VirtualAction.sortActions = function (a, b) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  return VirtualAction;\n}(AsyncAction);\n\nexport { VirtualAction };","map":{"version":3,"mappings":";AAAA,OAAO,KAAEA,OAAT,MAAsB,OAAtB;AAEA,SAASC,WAAT,QAAyB,eAAzB;AAGA;;IAA0CC,8CAAcC,MAAd,EAAc;EAOtDH,wCAAYG,MAAZ;;WAAYD,iDAAsC;IAC/B;MADnBE,eAEE,gBAFF;IACmB;;IAJZ,aAAK,KAAa,MAAlB,EAAkB;MAClBC,SAAK,GAAaC,MAAC,kBAAnB;;;IAKN;MAAA;IAAA;;IAOMC;IAECA,cAA2B,CAA3B;IACNA,KAAI,MAAJ,GAAgB,EAAhB;IAEA,OAAOA,KAAP;;;sBAEY,CAAGC,UAAOC,QAAM;QAE1BC,KAAI;QAAKC,OAAS,GAACD;QAAcL,SAAQ,KAAM,CAACA;;eAC9CO;;WACD;MACFD;MAEG,KAAKE,KAAL,GAAOD,YAAP;;MACF,SAAO,SAAS,QAAT,CAAiBA,MAAS,MAA1B,EAA0BA,YAA1B,CAAP,EAAiC;QAC/B;MACD;;;QAEFE;MACF;QAnCgBF;MAoCnB;;MAtC0C,MAAcE,KAAd;IAA7B;EA4Cb;;EAAsCZ;EAIpC;CAhDwC;;SAgDxCA;;iBAAsB,gBAAS,UAAsBC,MAAtB,EAAsB;SAC/B,0BAAmDA;;WACnDY,cAAKC,WAA+BC;IAJhD,cAAM,KAAgB,CAAtB,EAAuB;MAM/BC,KAAK,GAAKF,SAAG,MAAH,IAAkB,CAA5B;;;IACD;;IAEMT;IAAoBA;IACzBA,KAAK,MAAL,GAAcW,KAAd;SACE,UAAO;SACR;IACD,OAAKX,KAAL;;;eAMS,WAAQY;IACjB,SAAO,KAAO,MAAd,EAAsB;MACvBC;IAES;;IAA0D;MAC9D,OAAMjB,MAAG,UAAH,CAAkBgB,QAAlB,CAA2BE,IAA3B,CAA2B,IAA3B,EAA2BC,KAA3B,EAA2BF,KAA3B,CAAN;IACG;;IACP,cAAa,KAAb;IACC,UAAoC,GAAK,kBAAc,cAAd,EAA2B,SAA3B,CAAzC;IACD,SAAOR,MAAP;IACD;EAES;;eAA0D,4BAAiB;IACnF,SAAO,UAAU,CAAjB,EAAiB;MAClBQ;IAES;;IACR,KAAIA,KAAJ,GAASJ,SAAW,MAAX,GAAiBI,KAA1B;QACET,OAAO;WACR;IACFA;IAEa;;;eAEL,CAACH,UAAUe,iBAAS;aACvB,UAAS;WACV;;;;;;eAEM;aACLC,WAAU;aACXrB;IACF;;;eACC,eAAS;QACVsB;UAAMA;QACL,OAAU,CAAV;MACD,OACF;QACH;MA1DiD,CAyD9C;;;;;;;;;;;CArD8B","names":["tslib_1","AsyncAction","VirtualTimeScheduler","_super","SchedulerAction","maxFrames","Number","_this","prototype","flush","_a","actions","action","frame","error","VirtualAction","scheduler","work","index","schedule","delay","call","state","recycleAsyncId","active","a"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction as any,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @nodoc\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
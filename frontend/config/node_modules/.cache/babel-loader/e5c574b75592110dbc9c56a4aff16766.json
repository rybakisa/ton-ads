{"ast":null,"code":"/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n  while (observer) {\n    var _a = observer,\n        closed_1 = _a.closed,\n        destination = _a.destination,\n        isStopped = _a.isStopped;\n\n    if (closed_1 || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"mappings":"AAAA;AASA,SAAMA,UAAN,QAAgB,eAAhB;OACE,SAAOC,cAAP,CAAiBC,QAAjB,EAAiB;SACTA;IACN,IAAIC,aAAJ;IAAA,IAAcC,QAAW,YAAzB;IAAA,IAAyBC,4BAAzB;IAAA,IAAyBC,wBAAzB;;QACEF,QAAO,IAAKE,WAAC;MACd;WACC,eAAW,eAAY,sBAAvB,EAAuB;MACxBJ;KADC,MAEA;MACDA;IACF;EACD;;EACD","names":["Subscriber","canReportError","observer","_a","closed_1","destination","isStopped"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/util/canReportError.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}
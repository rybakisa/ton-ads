{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { Subscription } from './Subscription';\n\nvar AsyncSubject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsyncSubject, _super);\n\n  function AsyncSubject() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.value = null;\n    _this.hasNext = false;\n    _this.hasCompleted = false;\n    return _this;\n  }\n\n  AsyncSubject.prototype._subscribe = function (subscriber) {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n\n    return _super.prototype._subscribe.call(this, subscriber);\n  };\n\n  AsyncSubject.prototype.next = function (value) {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  };\n\n  AsyncSubject.prototype.error = function (error) {\n    if (!this.hasCompleted) {\n      _super.prototype.error.call(this, error);\n    }\n  };\n\n  AsyncSubject.prototype.complete = function () {\n    this.hasCompleted = true;\n\n    if (this.hasNext) {\n      _super.prototype.next.call(this, this.value);\n    }\n\n    _super.prototype.complete.call(this);\n  };\n\n  return AsyncSubject;\n}(Subject);\n\nexport { AsyncSubject };","map":{"version":3,"mappings":";AAAA,OAAO,KAAEA,OAAT,MAAwB,OAAxB;AAEA,SAASC,OAAT,QAAuB,WAAvB;AAQA;;IAAqCC,sCAAUC,MAAV,EAAU;EAA/CH;;WAAAE;IACU,YAAKC,MAAU,KAAC,IAAX,IAAWA,6BAAX,IAAW,IAAhB;;IACAC,cAAO,IAAP;IACAA;;IAmCT;EAhCC;;cACU,CAACC,UAAUC;QACjB,eAAW;MACXC,UAAO,MAAP,CAAO,KAAaC,WAApB;MACD;WACC,SAAUC,YAAV,IAA0B,KAAEC,OAA5B,EAA4B;MAC5BH,UAAU,CAACI,IAAX,CAAW,KAAUC,KAArB;MACAL,UAAO,SAAP;MACD;IACD;;IACD;EAED;;cACO,CAAIF,UAACM,OAAc;QACtB,MAAKF,cAAc;MACnB,KAAKG,KAAL,GAAYA,KAAZ;MACD;IACF;EAED;;cACO,CAAIP,UAACQ,QAAc;QACtB,oBAAM;MACPV;IACF;EAED;;cACO,WAAYW,WAAQ;IACzB,KAAIL,YAAJ,GAAkB,IAAlB;;QACE;MACDN;IACD;;IACDA;EACH;;EAtCqC,OAAOD,YAAP;CAAA","names":["tslib_1","Subject","AsyncSubject","_super","_this","prototype","_subscribe","subscriber","thrownError","hasCompleted","hasNext","next","value","error","complete"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/AsyncSubject.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
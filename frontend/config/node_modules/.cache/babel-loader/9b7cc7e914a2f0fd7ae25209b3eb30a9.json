{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\n\nvar AnimationFrameScheduler = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AnimationFrameScheduler, _super);\n\n  function AnimationFrameScheduler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AnimationFrameScheduler.prototype.flush = function (action) {\n    this.active = true;\n    this.scheduled = undefined;\n    var actions = this.actions;\n    var error;\n    var index = -1;\n    var count = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AnimationFrameScheduler;\n}(AsyncScheduler);\n\nexport { AnimationFrameScheduler };","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAyB,OAAzB;AAEA;;IAA6CC,iDAAcC,MAAd,EAAc;EAA3DF;;;IA2BC;EA1BQ;;yBAEc;IACnB,KAAKG,MAAL,GAAc,IAAd;IAEO;IACP,IAAIC,OAAW,eAAf;IACA,IAAIC,KAAJ;IACA,IAAIC,KAAK,GAAW,EAApB;IACA,SAAS,UAAU,OAAnB;IAEAC,MAAG,4BAAH;;;UAEIF,QAAME;QACP;MACF;IAED,SAAK,EAAMD,KAAN,GAAcE,KAAd,KAAeD,wBAAf;;IAEL,KAAIJ,MAAJ,GAAW,KAAX;;QACEE,OAAO;aACL,UAAOG,KAAP,KAAqBD,wBAArB,GAAqB;QACtBA;MACD;;MACD;IACF;EACH;;EA3B6C;CAAA","names":["tslib_1","AnimationFrameScheduler","_super","active","actions","error","index","action","count"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
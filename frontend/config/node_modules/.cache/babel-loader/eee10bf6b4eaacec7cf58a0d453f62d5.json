{"ast":null,"code":"const {\n  Cell\n} = require(\"../boc\");\n\nconst {\n  Address,\n  BN,\n  bytesToHex\n} = require(\"../utils\");\n\nconst {\n  Contract\n} = require(\"../contract\");\n\nclass AppTon {\n  /**\n   * @param transport {Transport} @ledgerhq/hw-transport\n   * @param ton   {TonWeb}\n   */\n  constructor(transport, ton) {\n    this.transport = transport;\n    this.ton = ton;\n    this.ADDRESS_FORMAT_HEX = 0;\n    this.ADDRESS_FORMAT_USER_FRIENDLY = 1;\n    this.ADDRESS_FORMAT_URL_SAFE = 2;\n    this.ADDRESS_FORMAT_BOUNCEABLE = 4;\n    this.ADDRESS_FORMAT_TEST_ONLY = 8; // todo: узнать зачем вызывается decorateAppAPIMethods\n    // const scrambleKey = \"w0w\";\n    // transport.decorateAppAPIMethods(\n    //     this,\n    //     [\n    //         \"getAppConfiguration\",\n    //         \"getAddress\",\n    //         \"sign\",\n    //         \"signTransfer\",\n    //     ],\n    //     scrambleKey\n    // );\n  }\n  /***\n   * Get App version\n   * @return {{version: string}}\n   */\n\n\n  async getAppConfiguration() {\n    const response = await this.transport.send(0xe0, 0x01, 0x00, 0x00);\n    return {\n      version: \"\" + response[0] + \".\" + response[1] + \".\" + response[2] // major version, minor version, patch version\n\n    };\n  }\n  /**\n   * This command returns a public key for the given account number\n   * @param accountNumber {number}\n   * @param isDisplay {boolean} display public key and confirm before returning\n   * @return {{publicKey: Uint8Array}}\n   */\n\n\n  async getPublicKey(accountNumber, isDisplay) {\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32BE(accountNumber);\n    const response = await this.transport.send(0xe0, 0x02, isDisplay ? 0x01 : 0x00, 0x00, buffer);\n    const len = response[0];\n    const publicKey = new Uint8Array(response.slice(1, 1 + len));\n    return {\n      publicKey\n    };\n  }\n  /**\n   * This command returns a wallet v3R1 address for the given account number\n   * @param accountNumber {number}\n   * @param isDisplay {boolean} display address and confirm before returning\n   * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n   * @return {{address: Address}}\n   */\n\n\n  async getAddress(accountNumber, isDisplay, addressFormat) {\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32BE(accountNumber);\n    const response = await this.transport.send(0xe0, 0x05, isDisplay ? 0x01 : 0x00, addressFormat, buffer);\n    const len = response[0];\n    const addressHex = new Uint8Array(response.slice(1, 1 + len));\n    const address = new Address('0:' + bytesToHex(addressHex));\n    return {\n      address\n    };\n  }\n  /**\n   * Sign a bytes\n   * @param accountNumber {number}\n   * @param buffer    {Buffer}\n   * @return {{signature: Buffer}}\n   */\n\n\n  async sign(accountNumber, buffer) {\n    const accountNumberBuffer = Buffer.alloc(4);\n    accountNumberBuffer.writeInt32BE(accountNumber);\n    const signBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(buffer)]);\n    const response = await this.transport.send(0xe0, 0x03, 0x00, 0x00, signBuffer);\n    const len = response[0];\n    const signature = response.slice(1, 1 + len);\n    return {\n      signature\n    };\n  }\n  /**\n   * Sign a transfer coins message (same with TonWeb.WalletContract.createTransferMessage)\n   * if seqno === 0 it will be deploy wallet + transfer coins message\n   * @param accountNumber {number}\n   * @param wallet {WalletContract}  Sender wallet\n   * @param toAddress {String | Address}  Destination address in any format\n   * @param amount    {BN | number}  Transfer value in nanograms\n   * @param seqno {number}\n   * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n   * @return\n   */\n\n\n  async transfer(accountNumber, wallet, toAddress, amount, seqno, addressFormat) {\n    const sendMode = 3;\n    const query = await wallet.createTransferMessage(null, toAddress, amount, seqno, null, sendMode, true);\n    const accountNumberBuffer = Buffer.alloc(4);\n    accountNumberBuffer.writeInt32BE(accountNumber);\n    const msgBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(await query.signingMessage.toBoc())]);\n    const response = await this.transport.send(0xe0, 0x04, addressFormat, 0x00, msgBuffer);\n    const len = response[0];\n    const signatureBuffer = response.slice(1, 1 + len);\n    const signature = new Uint8Array(signatureBuffer);\n    const body = new Cell();\n    body.bits.writeBytes(signature);\n    body.writeCell(query.signingMessage);\n    let stateInit = null,\n        code = null,\n        data = null;\n\n    if (seqno === 0) {\n      const deploy = await wallet.createStateInit();\n      stateInit = deploy.stateInit;\n      code = deploy.code;\n      data = deploy.data;\n    }\n\n    const selfAddress = await wallet.getAddress();\n    const header = Contract.createExternalMessageHeader(selfAddress);\n    const resultMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n    const resultPromise = new Promise(resolve => {\n      resolve({\n        address: selfAddress,\n        message: resultMessage,\n        // old wallet_send_generate_external_message\n        body: body,\n        signature: signature,\n        signingMessage: query.signingMessage,\n        stateInit,\n        code,\n        data\n      });\n    });\n    return Contract.createMethod(this.ton.provider, resultPromise);\n  }\n\n}\n\nmodule.exports = AppTon;","map":{"version":3,"names":["Cell","require","Address","BN","bytesToHex","Contract","AppTon","constructor","transport","ton","ADDRESS_FORMAT_HEX","ADDRESS_FORMAT_USER_FRIENDLY","ADDRESS_FORMAT_URL_SAFE","ADDRESS_FORMAT_BOUNCEABLE","ADDRESS_FORMAT_TEST_ONLY","getAppConfiguration","response","send","version","getPublicKey","accountNumber","isDisplay","buffer","Buffer","alloc","writeInt32BE","len","publicKey","Uint8Array","slice","getAddress","addressFormat","addressHex","address","sign","accountNumberBuffer","signBuffer","concat","from","signature","transfer","wallet","toAddress","amount","seqno","sendMode","query","createTransferMessage","msgBuffer","signingMessage","toBoc","signatureBuffer","body","bits","writeBytes","writeCell","stateInit","code","data","deploy","createStateInit","selfAddress","header","createExternalMessageHeader","resultMessage","createCommonMsgInfo","resultPromise","Promise","resolve","message","createMethod","provider","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/ledger/AppTon.js"],"sourcesContent":["const {Cell} = require(\"../boc\");\nconst {Address, BN, bytesToHex} = require(\"../utils\");\nconst {Contract} = require(\"../contract\");\n\nclass AppTon {\n\n    /**\n     * @param transport {Transport} @ledgerhq/hw-transport\n     * @param ton   {TonWeb}\n     */\n    constructor(transport, ton) {\n        this.transport = transport;\n        this.ton = ton;\n\n        this.ADDRESS_FORMAT_HEX = 0;\n        this.ADDRESS_FORMAT_USER_FRIENDLY = 1;\n        this.ADDRESS_FORMAT_URL_SAFE = 2;\n        this.ADDRESS_FORMAT_BOUNCEABLE = 4;\n        this.ADDRESS_FORMAT_TEST_ONLY = 8;\n\n        // todo: узнать зачем вызывается decorateAppAPIMethods\n        // const scrambleKey = \"w0w\";\n        // transport.decorateAppAPIMethods(\n        //     this,\n        //     [\n        //         \"getAppConfiguration\",\n        //         \"getAddress\",\n        //         \"sign\",\n        //         \"signTransfer\",\n        //     ],\n        //     scrambleKey\n        // );\n    }\n\n    /***\n     * Get App version\n     * @return {{version: string}}\n     */\n    async getAppConfiguration() {\n        const response = await this.transport.send(0xe0, 0x01, 0x00, 0x00);\n        return {\n            version: \"\" + response[0] + \".\" + response[1] + \".\" + response[2] // major version, minor version, patch version\n        };\n    }\n\n    /**\n     * This command returns a public key for the given account number\n     * @param accountNumber {number}\n     * @param isDisplay {boolean} display public key and confirm before returning\n     * @return {{publicKey: Uint8Array}}\n     */\n    async getPublicKey(accountNumber, isDisplay) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32BE(accountNumber);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x02,\n                isDisplay ? 0x01 : 0x00,\n                0x00,\n                buffer\n            );\n        const len = response[0];\n        const publicKey = new Uint8Array(response.slice(1, 1 + len));\n        return {publicKey};\n    }\n\n    /**\n     * This command returns a wallet v3R1 address for the given account number\n     * @param accountNumber {number}\n     * @param isDisplay {boolean} display address and confirm before returning\n     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n     * @return {{address: Address}}\n     */\n    async getAddress(accountNumber, isDisplay, addressFormat) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32BE(accountNumber);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x05,\n                isDisplay ? 0x01 : 0x00,\n                addressFormat,\n                buffer\n            );\n        const len = response[0];\n        const addressHex = new Uint8Array(response.slice(1, 1 + len));\n        const address = new Address('0:' + bytesToHex(addressHex));\n        return {address};\n    }\n\n    /**\n     * Sign a bytes\n     * @param accountNumber {number}\n     * @param buffer    {Buffer}\n     * @return {{signature: Buffer}}\n     */\n    async sign(accountNumber, buffer) {\n        const accountNumberBuffer = Buffer.alloc(4);\n        accountNumberBuffer.writeInt32BE(accountNumber);\n        const signBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(buffer)]);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x03,\n                0x00,\n                0x00,\n                signBuffer\n            );\n\n        const len = response[0];\n        const signature = response.slice(1, 1 + len);\n        return {signature};\n    }\n\n    /**\n     * Sign a transfer coins message (same with TonWeb.WalletContract.createTransferMessage)\n     * if seqno === 0 it will be deploy wallet + transfer coins message\n     * @param accountNumber {number}\n     * @param wallet {WalletContract}  Sender wallet\n     * @param toAddress {String | Address}  Destination address in any format\n     * @param amount    {BN | number}  Transfer value in nanograms\n     * @param seqno {number}\n     * @param addressFormat {number} display address format (use sum of ADDRESS_FORMAT_ constants)\n     * @return\n     */\n    async transfer(accountNumber, wallet, toAddress, amount, seqno, addressFormat) {\n        const sendMode = 3;\n\n        const query = await wallet.createTransferMessage(null, toAddress, amount, seqno, null, sendMode, true);\n\n        const accountNumberBuffer = Buffer.alloc(4);\n        accountNumberBuffer.writeInt32BE(accountNumber);\n        const msgBuffer = Buffer.concat([accountNumberBuffer, Buffer.from(await query.signingMessage.toBoc())]);\n\n        const response = await this.transport\n            .send(\n                0xe0,\n                0x04,\n                addressFormat,\n                0x00,\n                msgBuffer\n            );\n\n        const len = response[0];\n        const signatureBuffer = response.slice(1, 1 + len);\n        const signature = new Uint8Array(signatureBuffer);\n\n        const body = new Cell();\n        body.bits.writeBytes(signature);\n        body.writeCell(query.signingMessage);\n\n        let stateInit = null, code = null, data = null;\n\n        if (seqno === 0) {\n            const deploy = await wallet.createStateInit();\n            stateInit = deploy.stateInit;\n            code = deploy.code;\n            data = deploy.data;\n        }\n\n        const selfAddress = await wallet.getAddress();\n        const header = Contract.createExternalMessageHeader(selfAddress);\n        const resultMessage = Contract.createCommonMsgInfo(header, stateInit, body);\n\n        const resultPromise = new Promise(resolve => {\n            resolve({\n                address: selfAddress,\n                message: resultMessage, // old wallet_send_generate_external_message\n\n                body: body,\n                signature: signature,\n                signingMessage: query.signingMessage,\n\n                stateInit,\n                code,\n                data,\n            });\n        });\n\n        return Contract.createMethod(\n            this.ton.provider,\n            resultPromise\n        );\n    }\n}\n\nmodule.exports = AppTon;"],"mappings":"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"},"metadata":{},"sourceType":"script"}
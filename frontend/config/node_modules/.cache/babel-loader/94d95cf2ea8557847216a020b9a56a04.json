{"ast":null,"code":"const {\n  Contract\n} = require(\"../index\");\n\nconst {\n  Cell\n} = require(\"../../boc\");\n\nconst {\n  nacl,\n  hexToBytes,\n  BN\n} = require(\"../../utils\");\n\nconst {\n  parseAddress\n} = require(\"../token/nft/NftUtils\");\n\nconst {\n  writePublicKey,\n  writeSignature,\n  createSignatureCell,\n  tag_init,\n  tag_cooperative_close,\n  tag_cooperative_commit,\n  tag_start_uncooperative_close,\n  tag_challenge_state,\n  tag_settle_conditionals,\n  tag_state,\n  op_top_up_balance,\n  op_init_channel,\n  op_cooperative_close,\n  op_cooperative_commit,\n  op_start_uncooperative_close,\n  op_challenge_quarantined_state,\n  op_settle_conditionals,\n  op_finish_uncooperative_close,\n  op_channel_closed,\n  createTopUpBalance,\n  createInitChannelBody,\n  createCooperativeCloseChannelBody,\n  createCooperativeCommitBody,\n  createConditionalPayment,\n  createSemiChannelBody,\n  createSemiChannelState,\n  createSignedSemiChannelState,\n  createStartUncooperativeCloseBody,\n  createChallengeQuarantinedStateBody,\n  createSettleConditionalsBody,\n  createFinishUncooperativeClose,\n  createOneSignature,\n  createTwoSignature\n} = require(\"./PaymentUtils\");\n\nconst PAYMENT_CHANNEL_CODE_HEX = 'B5EE9C72410230010007FB000114FF00F4A413F4BCF2C80B0102012002030201480405000AF26C21F0190202CB06070201202E2F020120080902012016170201200A0B0201200C0D0009D3610F80CC001D6B5007434C7FE8034C7CC1BC0FE19E0201580E0F0201201011002D3E11DBC4BE11DBC43232C7FE11DBC47E80B2C7F2407320008B083E1B7B51343480007E187E80007E18BE80007E18F4FFC07E1934FFC07E1974DFC07E19BC01887080A7F4C7C07E1A34C7C07E1A7D01007E1AB7807080E535007E1AF7BE1B2002012012130201201415008D3E13723E11BE117E113E10540132803E10BE80BE10FE8084F2FFC4B2FFF2DFFC02887080A7FE12BE127E121400F2C7C4B2C7FD0037807080E53E12C073253E1333C5B8B27B5520004D1C3C02FE106CFCB8193E803E800C3E1096283E18BE10C0683E18FE10BE10E8006EFCB819BC032000CF1D3C02FE106CFCB819348020C235C6083E4040E4BE1124BE117890CC3E443CB81974C7C060841A5B9A5D2EBCB81A3E118074DFD66EBCB81CBE803E800C3E1094882FBE10D4882FAC3CB819807E18BE18FE12F43E800C3E10BE10E80068006E7CB8199FFE187C0320004120843777222E9C20043232C15401B3C594013E808532DA84B2C7F2DFF2407EC02002012018190201D42B2C0201201A1B0201201E1F0201201C1D00E5473F00BD401D001D401D021F90102D31F01821043436D74BAF2E068F84601D37F59BAF2E072F844544355F910F8454330F910B0F2E065D33FD33F30F84822B9F84922B9B0F2E06C21F86820F869F84A6E915B8E19F84AD0D33FFA003171D721D33F305033BC02BCB1936DF86ADEE2F800F00C8006F3E12F43E800C7E903E900C3E09DBC41CBE10D62F24CC20C1B7BE10FE11963C03FE10BE11A04020BC03DC3E185C3E189C3E18DB7E1ABC032000B51D3C02F5007400750074087E4040B4C7C0608410DB1BDCEEBCB81A3E118074DFD66EBCB81CBE111510D57E443E1150CC3E442C3CB8197E80007E18BE80007E18F4CFF4CFCC3E1208AE7E1248AE6C3CB81B007E1A3E1A7E003C042001C1573F00BF84A6EF2E06AD2008308D71820F9012392F84492F845E24130F910F2E065D31F018210556E436CBAF2E068F84601D37F59BAF2E072D401D08308D71820F901F8444130F910F2E06501D430D08308D71820F901F8454130F910F2E06501820020120222301FED31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE2303205D31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE23032F8485280BEF8495250BEB0524BBE1AB0527ABE19210064B05215BE14B05248BE17B0F2E06970F82305C8CB3F5004FA0215F40015CB3F5004FA0212F400CB1F12CA00CA00C9F86AF00C01C31CFC02FE129BACFCB81AF48020C235C6083E4048E4BE1124BE1178904C3E443CB81974C7C0608410DA19D46EBCB81A3E118074DFD66EBCB81CB5007420C235C6083E407E11104C3E443CB81940750C3420C235C6083E407E11504C3E443CB81940602403F71CFC02FE129BACFCB81AF48020C235C6083E4048E4BE1124BE1178904C3E443CB81974C7C0608410DB10DBAEBCB81A3E118074DFD66EBCB81CBD010C3E12B434CFFE803D0134CFFE803D0134C7FE11DBC4148828083E08EE7CB81BBE11DBC4A83E08EF3CB81C34800C151D5A64D6D4C8F7A2B98E82A49B08B8C3816028292A01FCD31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE2303205D31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE230325339BE5381BEB0F8495250BEB0F8485290BEB02502FE5237BE16B05262BEB0F2E06927C20097F84918BEF2E0699137E222C20097F84813BEF2E0699132E2F84AD0D33FFA00F404D33FFA00F404D31FF8476F105220A0F823BCF2E06FD200D20030B3F2E073209C3537373A5274BC5263BC12B18E11323939395250BC5299BC18B14650134440E25319BAB3F2E06D9130E30D7F05C82627002496F8476F1114A098F8476F1117A00603E203003ECB3F5004FA0215F40012CB3F5004FA0213F400CB1F12CA00CA00C9F86AF00C00620A8020F4966FA5208E213050038020F4666FA1208E1001FA00ED1E15DA119450C3A00B9133E2923430E202926C21E2B31B000C3535075063140038C8CB3F5004FA0212F400CB3F5003FA0213F400CB1FCA00C9F86AF00C00D51D3C02FE129BACFCB81AFE12B434CFFE803D010C74CFFE803D010C74C7CC3E11DBC4283E11DBC4A83E08EE7CB81C7E003E10886808E87E18BE10D400E816287E18FE10F04026BE10BE10E83E189C3E18F7BE10B04026BE10FE10A83E18DC3E18F780693E1A293E1A7C042001F53B7EF4C7C8608419F1F4A06EA4CC7C037808608403818830AEA54C7C03B6CC780C882084155DD61FAEA54C3C0476CC780820841E6849BBEEA54C3C04B6CC7808208407C546B3EEA54C3C0576CC780820840223AA8CAEA54C3C05B6CC7808208419BDBC1A6EA54C3C05F6CC780C60840950CAA46EA53C0636CC78202D0008840FF2F00075BC7FE3A7805FC25E87D007D207D20184100D0CAF6A1EC7C217C21B7817C227C22B7817C237C23FC247C24B7817C2524C3B7818823881B22A021984008DBD0CABA7805FC20C8B870FC253748B8F07C256840206B90FD0018C020EB90FD0018B8EB90E98F987C23B7882908507C11DE491839707C23B788507C23B789507C11DE48B9F03A4331C4966';\n\nclass PaymentChannel extends Contract {\n  /**\n   * @param provider  {HttpProvider}\n   * @param options   {{isA: boolean, channelId: BN, myKeyPair: nacl.SignKeyPair, hisPublicKey: Uint8Array, initBalanceA: BN, initBalanceB: BN, addressA: Address, addressB: Address, closingConfig?: {quarantineDuration: number, misbehaviorFine: BN, conditionalCloseDuration: number}, excessFee?: BN}}\n   */\n  constructor(provider, options) {\n    options.publicKeyA = options.isA ? options.myKeyPair.publicKey : options.hisPublicKey;\n    options.publicKeyB = !options.isA ? options.myKeyPair.publicKey : options.hisPublicKey;\n    options.wc = options.wc || 0;\n    options.code = options.code || Cell.oneFromBoc(PAYMENT_CHANNEL_CODE_HEX);\n    super(provider, options);\n  }\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains payment channel data\n   */\n\n\n  createDataCell() {\n    const cell = new Cell();\n    cell.bits.writeBit(0); // inited\n\n    cell.bits.writeCoins(0); // balance_A\n\n    cell.bits.writeCoins(0); // balance_B\n\n    writePublicKey(cell, this.options.publicKeyA); // key_A\n\n    writePublicKey(cell, this.options.publicKeyB); // key_B\n\n    cell.bits.writeUint(this.options.channelId, 128); // channel_id\n\n    const closingConfig = new Cell();\n    closingConfig.bits.writeUint(this.options.closingConfig?.quarantineDuration || 0, 32); // quarantin_duration\n\n    closingConfig.bits.writeCoins(this.options.closingConfig?.misbehaviorFine || new BN(0)); // misbehavior_fine\n\n    closingConfig.bits.writeUint(this.options.closingConfig?.conditionalCloseDuration || 0, 32); // conditional_close_duration\n\n    cell.refs[0] = closingConfig;\n    cell.bits.writeUint(0, 32); // commited_seqno_A\n\n    cell.bits.writeUint(0, 32); // commited_seqno_B\n\n    cell.bits.writeBit(false); // quarantin ref\n\n    const paymentConfig = new Cell();\n    paymentConfig.bits.writeCoins(this.options.excessFee || new BN(0)); // excess_fee\n\n    paymentConfig.bits.writeAddress(this.options.addressA); // addr_A\n\n    paymentConfig.bits.writeAddress(this.options.addressB); // addr_B\n\n    cell.refs[1] = paymentConfig;\n    return cell;\n  }\n  /**\n   * @private\n   * @param op    {number}\n   * @param cellForSigning    {Cell}\n   * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n   */\n\n\n  async createOneSignature(op, cellForSigning) {\n    const signature = nacl.sign.detached(await cellForSigning.hash(), this.options.myKeyPair.secretKey);\n    const cell = createOneSignature({\n      op,\n      isA: this.options.isA,\n      signature,\n      cell: cellForSigning\n    });\n    return {\n      cell,\n      signature\n    };\n  }\n  /**\n   * @private\n   * @param op    {number}\n   * @param hisSignature {Uint8Array}\n   * @param cellForSigning    {Cell}\n   * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n   */\n\n\n  async createTwoSignature(op, hisSignature, cellForSigning) {\n    const signature = nacl.sign.detached(await cellForSigning.hash(), this.options.myKeyPair.secretKey);\n    const signatureA = this.options.isA ? signature : hisSignature;\n    const signatureB = !this.options.isA ? signature : hisSignature;\n    const cell = createTwoSignature({\n      op,\n      signatureA,\n      signatureB,\n      cell: cellForSigning\n    });\n    return {\n      cell,\n      signature\n    };\n  }\n  /**\n   * @param params    {{coinsA: BN, coinsB: BN}}\n   * @returns {Promise<Cell>}\n   */\n\n\n  async createTopUpBalance(params) {\n    return createTopUpBalance(params);\n  }\n  /**\n   * @param params    {{balanceA: BN, balanceB: BN}}\n   * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n   */\n\n\n  async createInitChannel(params) {\n    return this.createOneSignature(op_init_channel, createInitChannelBody({ ...params,\n      channelId: this.options.channelId\n    }));\n  }\n  /**\n   * @param params    {{hisSignature?: Uint8Array, balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n   * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n   */\n\n\n  async createCooperativeCloseChannel(params) {\n    if (!params.hisSignature) {\n      params.hisSignature = new Uint8Array(512 / 8);\n    }\n\n    return this.createTwoSignature(op_cooperative_close, params.hisSignature, createCooperativeCloseChannelBody({ ...params,\n      channelId: this.options.channelId\n    }));\n  }\n  /**\n   * @param params    {{hisSignature?: Uint8Array, seqnoA: BN, seqnoB: BN}}\n   * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n   */\n\n\n  async createCooperativeCommit(params) {\n    if (!params.hisSignature) {\n      params.hisSignature = new Uint8Array(512 / 8);\n    }\n\n    return this.createTwoSignature(op_cooperative_commit, params.hisSignature, createCooperativeCommitBody({ ...params,\n      channelId: this.options.channelId\n    }));\n  }\n  /**\n   * @private\n   * @param params    {{mySeqno: BN, mySentCoins: BN, hisSeqno?: BN, hisSentCoins?: BN}}\n   * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n   */\n\n\n  async createSignedSemiChannelState(params) {\n    const state = createSemiChannelState({\n      channelId: this.options.channelId,\n      semiChannelBody: createSemiChannelBody({\n        seqno: params.mySeqno,\n        sentCoins: params.mySentCoins,\n        conditionals: null\n      }),\n      counterpartySemiChannelBody: params.hisSeqno === undefined ? null : createSemiChannelBody({\n        seqno: params.hisSeqno,\n        sentCoins: params.hisSentCoins,\n        conditionals: null\n      })\n    });\n    const signature = nacl.sign.detached(await state.hash(), this.options.myKeyPair.secretKey);\n    const cell = createSignedSemiChannelState({\n      signature,\n      state\n    });\n    return {\n      cell,\n      signature\n    };\n  }\n  /**\n   * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n   * @returns {Promise<Uint8Array>} signature\n   */\n\n\n  async signState(params) {\n    const mySeqno = this.options.isA ? params.seqnoA : params.seqnoB;\n    const hisSeqno = !this.options.isA ? params.seqnoA : params.seqnoB;\n    const sentCoinsA = this.options.initBalanceA.gt(params.balanceA) ? this.options.initBalanceA.sub(params.balanceA) : new BN(0);\n    const sentCoinsB = this.options.initBalanceB.gt(params.balanceB) ? this.options.initBalanceB.sub(params.balanceB) : new BN(0);\n    const mySentCoins = this.options.isA ? sentCoinsA : sentCoinsB;\n    const hisSentCoins = !this.options.isA ? sentCoinsA : sentCoinsB;\n    const {\n      cell,\n      signature\n    } = await this.createSignedSemiChannelState({\n      mySeqno,\n      mySentCoins,\n      hisSeqno,\n      hisSentCoins\n    });\n    return signature;\n  }\n  /**\n   * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n   * @param hisSignature  {Uint8Array}\n   * @returns {Promise<boolean>}\n   */\n\n\n  async verifyState(params, hisSignature) {\n    const mySeqno = !this.options.isA ? params.seqnoA : params.seqnoB;\n    const hisSeqno = this.options.isA ? params.seqnoA : params.seqnoB;\n    const sentCoinsA = this.options.initBalanceA.gt(params.balanceA) ? this.options.initBalanceA.sub(params.balanceA) : new BN(0);\n    const sentCoinsB = this.options.initBalanceB.gt(params.balanceB) ? this.options.initBalanceB.sub(params.balanceB) : new BN(0);\n    const mySentCoins = !this.options.isA ? sentCoinsA : sentCoinsB;\n    const hisSentCoins = this.options.isA ? sentCoinsA : sentCoinsB;\n    const state = createSemiChannelState({\n      channelId: this.options.channelId,\n      semiChannelBody: createSemiChannelBody({\n        seqno: mySeqno,\n        sentCoins: mySentCoins,\n        conditionals: null\n      }),\n      counterpartySemiChannelBody: hisSeqno === undefined ? null : createSemiChannelBody({\n        seqno: hisSeqno,\n        sentCoins: hisSentCoins,\n        conditionals: null\n      })\n    });\n    const hash = await state.hash();\n    return nacl.sign.detached.verify(hash, hisSignature, this.options.isA ? this.options.publicKeyB : this.options.publicKeyA);\n  }\n  /**\n   * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n   * @return {Uint8Array} signature\n   */\n\n\n  async signClose(params) {\n    const {\n      cell,\n      signature\n    } = await this.createCooperativeCloseChannel(params);\n    return signature;\n  }\n  /**\n   * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n   * @param hisSignature {Uint8Array}\n   * @return {boolean}\n   */\n\n\n  async verifyClose(params, hisSignature) {\n    const cell = await createCooperativeCloseChannelBody({ ...params,\n      channelId: this.options.channelId\n    });\n    const hash = await cell.hash();\n    return nacl.sign.detached.verify(hash, hisSignature, this.options.isA ? this.options.publicKeyB : this.options.publicKeyA);\n  }\n  /**\n   * @param params    {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}} `signedSemiChannelState` created by `createSignedSemiChannelState`\n   * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n   */\n\n\n  async createStartUncooperativeClose(params) {\n    return this.createOneSignature(op_start_uncooperative_close, createStartUncooperativeCloseBody({ ...params,\n      channelId: this.options.channelId\n    }));\n  }\n  /**\n   * @param params   {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}} `signedSemiChannelState` created by `createSignedSemiChannelState`\n   * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n   */\n\n\n  async createChallengeQuarantinedState(params) {\n    return this.createOneSignature(op_challenge_quarantined_state, createChallengeQuarantinedStateBody({ ...params,\n      channelId: this.options.channelId\n    }));\n  }\n  /**\n   * @param params    {{conditionalsToSettle: Cell | null}} dictionary with uint32 keys and values created by `createConditionalPayment`\n   * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n   */\n\n\n  async createSettleConditionals(params) {\n    return this.createOneSignature(op_settle_conditionals, createSettleConditionalsBody({ ...params,\n      channelId: this.options.channelId\n    }));\n  }\n  /**\n   * @returns {Promise<Cell>}\n   */\n\n\n  async createFinishUncooperativeClose() {\n    return createFinishUncooperativeClose();\n  }\n\n  static STATE_UNINITED = 0;\n  static STATE_OPEN = 1;\n  static STATE_CLOSURE_STARTED = 2;\n  static STATE_SETTLING_CONDITIONALS = 3;\n  static STATE_AWAITING_FINALIZATION = 4;\n  /**\n   * @returns {Promise<number>}\n   */\n\n  async getChannelState() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_channel_state', []);\n    return result.toNumber();\n  }\n  /**\n   * @returns {Promise<{state: number, balanceA: BN, balanceB: BN, publicKeyA: Uint8Array, publicKeyB: Uint8Array, channelId: BN, quarantineDuration: number, misbehaviorFine: BN, conditionalCloseDuration: number, seqnoA: BN, seqnoB: BN, quarantine: Cell, excessFee: BN, addressA: Address, addressB: Address}>}\n   */\n\n\n  async getData() {\n    /**\n     * @param bn    {BN}\n     * @return  {Uint8Array}\n     */\n    const bnToBytes = bn => {\n      let hex = bn.toString(16);\n      if (hex.length % 2 !== 0) hex = '0' + hex;\n      return hexToBytes(hex);\n    };\n\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_channel_data', []);\n    const state = result[0].toNumber();\n    const balanceA = result[1][0];\n    const balanceB = result[1][1];\n    const publicKeyA = bnToBytes(result[2][0]);\n    const publicKeyB = bnToBytes(result[2][1]);\n    const channelId = result[3];\n    const quarantineDuration = result[4][0].toNumber();\n    const misbehaviorFine = result[4][1];\n    const conditionalCloseDuration = result[4][2].toNumber();\n    const seqnoA = result[5][0];\n    const seqnoB = result[5][1];\n    const quarantine = result[6]; // Cell\n\n    const excessFee = result[7][0];\n    const addressA = parseAddress(result[7][1]);\n    const addressB = parseAddress(result[7][2]);\n    return {\n      state,\n      balanceA,\n      balanceB,\n      publicKeyA,\n      publicKeyB,\n      channelId,\n      quarantineDuration,\n      misbehaviorFine,\n      conditionalCloseDuration,\n      seqnoA,\n      seqnoB,\n      quarantine,\n      excessFee,\n      addressA,\n      addressB\n    };\n  }\n  /**\n   * @param params {{wallet: WalletContract, secretKey: Uint8Array}}\n   * @return {{deploy: Function, init: Function, topUp: Function, close: Function, commit: Function, startUncooperativeClose: Function, challengeQuarantinedState: Function, settleConditionals: Function, finishUncooperativeClose: Function}}\n   */\n\n\n  fromWallet(params) {\n    const {\n      wallet,\n      secretKey\n    } = params;\n\n    const transfer = (payloadPromise, needStateInit) => {\n      const createPromise = async amount => {\n        const stateInit = needStateInit ? (await this.createStateInit()).stateInit : null;\n        const myAddress = await this.getAddress();\n        const seqno = (await wallet.methods.seqno().call()) || 0;\n        const payload = await payloadPromise;\n        return wallet.methods.transfer({\n          secretKey: secretKey,\n          toAddress: myAddress.toString(true, true, true),\n          amount: amount,\n          seqno: seqno,\n          payload,\n          // body\n          stateInit,\n          sendMode: 3\n        });\n      };\n\n      return {\n        /**\n         * @param amount    {BN}    in Toncoins\n         */\n        send: amount => {\n          return createPromise(amount).then(x => x.send());\n        },\n\n        /**\n         * @param amount    {BN}    in Toncoins\n         */\n        estimateFee: amount => {\n          return createPromise(amount).then(x => x.estimateFee());\n        }\n      };\n    };\n\n    return {\n      deploy: () => {\n        return transfer(null, true);\n      },\n\n      /**\n       * @param params    {{balanceA: BN, balanceB: BN}}\n       */\n      init: params => {\n        return transfer(this.createInitChannel(params).then(x => x.cell));\n      },\n\n      /**\n       * @param params    {{coinsA: BN, coinsB: BN}}\n       */\n      topUp: params => {\n        return transfer(this.createTopUpBalance(params));\n      },\n\n      /**\n       * @param params    {{hisSignature: Uint8Array, balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n       */\n      close: params => {\n        return transfer(this.createCooperativeCloseChannel(params).then(x => x.cell));\n      },\n\n      /**\n       * @param params    {{hisSignature: Uint8Array, seqnoA: BN, seqnoB: BN}}\n       */\n      commit: params => {\n        return transfer(this.createCooperativeCommit(params).then(x => x.cell));\n      },\n\n      /**\n       * @param params    {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}}\n       */\n      startUncooperativeClose: params => {\n        return transfer(this.createStartUncooperativeClose(params).then(x => x.cell));\n      },\n\n      /**\n       * @param params    {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}}\n       */\n      challengeQuarantinedState: params => {\n        return transfer(this.createChallengeQuarantinedState(params).then(x => x.cell));\n      },\n\n      /**\n       * @param params    {{conditionalsToSettle: Cell | null}}\n       */\n      settleConditionals: params => {\n        return transfer(this.createSettleConditionals(params).then(x => x.cell));\n      },\n\n      /**\n       */\n      finishUncooperativeClose: () => {\n        return transfer(this.createFinishUncooperativeClose());\n      }\n    };\n  }\n\n}\n\nPaymentChannel.codeHex = PAYMENT_CHANNEL_CODE_HEX;\nmodule.exports = {\n  PaymentChannel\n};","map":{"version":3,"names":["Contract","require","Cell","nacl","hexToBytes","BN","parseAddress","writePublicKey","writeSignature","createSignatureCell","tag_init","tag_cooperative_close","tag_cooperative_commit","tag_start_uncooperative_close","tag_challenge_state","tag_settle_conditionals","tag_state","op_top_up_balance","op_init_channel","op_cooperative_close","op_cooperative_commit","op_start_uncooperative_close","op_challenge_quarantined_state","op_settle_conditionals","op_finish_uncooperative_close","op_channel_closed","createTopUpBalance","createInitChannelBody","createCooperativeCloseChannelBody","createCooperativeCommitBody","createConditionalPayment","createSemiChannelBody","createSemiChannelState","createSignedSemiChannelState","createStartUncooperativeCloseBody","createChallengeQuarantinedStateBody","createSettleConditionalsBody","createFinishUncooperativeClose","createOneSignature","createTwoSignature","PAYMENT_CHANNEL_CODE_HEX","PaymentChannel","constructor","provider","options","publicKeyA","isA","myKeyPair","publicKey","hisPublicKey","publicKeyB","wc","code","oneFromBoc","createDataCell","cell","bits","writeBit","writeCoins","writeUint","channelId","closingConfig","quarantineDuration","misbehaviorFine","conditionalCloseDuration","refs","paymentConfig","excessFee","writeAddress","addressA","addressB","op","cellForSigning","signature","sign","detached","hash","secretKey","hisSignature","signatureA","signatureB","params","createInitChannel","createCooperativeCloseChannel","Uint8Array","createCooperativeCommit","state","semiChannelBody","seqno","mySeqno","sentCoins","mySentCoins","conditionals","counterpartySemiChannelBody","hisSeqno","undefined","hisSentCoins","signState","seqnoA","seqnoB","sentCoinsA","initBalanceA","gt","balanceA","sub","sentCoinsB","initBalanceB","balanceB","verifyState","verify","signClose","verifyClose","createStartUncooperativeClose","createChallengeQuarantinedState","createSettleConditionals","STATE_UNINITED","STATE_OPEN","STATE_CLOSURE_STARTED","STATE_SETTLING_CONDITIONALS","STATE_AWAITING_FINALIZATION","getChannelState","myAddress","getAddress","result","call2","toString","toNumber","getData","bnToBytes","bn","hex","length","quarantine","fromWallet","wallet","transfer","payloadPromise","needStateInit","createPromise","amount","stateInit","createStateInit","methods","call","payload","toAddress","sendMode","send","then","x","estimateFee","deploy","init","topUp","close","commit","startUncooperativeClose","challengeQuarantinedState","settleConditionals","finishUncooperativeClose","codeHex","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/contract/payments/PaymentChannel.js"],"sourcesContent":["const {Contract} = require(\"../index\");\nconst {Cell} = require(\"../../boc\");\nconst {nacl, hexToBytes, BN} = require(\"../../utils\");\nconst {parseAddress} = require(\"../token/nft/NftUtils\");\nconst {\n    writePublicKey,\n    writeSignature,\n    createSignatureCell,\n    tag_init,\n    tag_cooperative_close,\n    tag_cooperative_commit,\n    tag_start_uncooperative_close,\n    tag_challenge_state,\n    tag_settle_conditionals,\n    tag_state,\n    op_top_up_balance,\n    op_init_channel,\n    op_cooperative_close,\n    op_cooperative_commit,\n    op_start_uncooperative_close,\n    op_challenge_quarantined_state,\n    op_settle_conditionals,\n    op_finish_uncooperative_close,\n    op_channel_closed,\n    createTopUpBalance,\n    createInitChannelBody,\n    createCooperativeCloseChannelBody,\n    createCooperativeCommitBody,\n    createConditionalPayment,\n    createSemiChannelBody,\n    createSemiChannelState,\n    createSignedSemiChannelState,\n    createStartUncooperativeCloseBody,\n    createChallengeQuarantinedStateBody,\n    createSettleConditionalsBody,\n    createFinishUncooperativeClose,\n    createOneSignature,\n    createTwoSignature\n} = require(\"./PaymentUtils\");\n\nconst PAYMENT_CHANNEL_CODE_HEX = 'B5EE9C72410230010007FB000114FF00F4A413F4BCF2C80B0102012002030201480405000AF26C21F0190202CB06070201202E2F020120080902012016170201200A0B0201200C0D0009D3610F80CC001D6B5007434C7FE8034C7CC1BC0FE19E0201580E0F0201201011002D3E11DBC4BE11DBC43232C7FE11DBC47E80B2C7F2407320008B083E1B7B51343480007E187E80007E18BE80007E18F4FFC07E1934FFC07E1974DFC07E19BC01887080A7F4C7C07E1A34C7C07E1A7D01007E1AB7807080E535007E1AF7BE1B2002012012130201201415008D3E13723E11BE117E113E10540132803E10BE80BE10FE8084F2FFC4B2FFF2DFFC02887080A7FE12BE127E121400F2C7C4B2C7FD0037807080E53E12C073253E1333C5B8B27B5520004D1C3C02FE106CFCB8193E803E800C3E1096283E18BE10C0683E18FE10BE10E8006EFCB819BC032000CF1D3C02FE106CFCB819348020C235C6083E4040E4BE1124BE117890CC3E443CB81974C7C060841A5B9A5D2EBCB81A3E118074DFD66EBCB81CBE803E800C3E1094882FBE10D4882FAC3CB819807E18BE18FE12F43E800C3E10BE10E80068006E7CB8199FFE187C0320004120843777222E9C20043232C15401B3C594013E808532DA84B2C7F2DFF2407EC02002012018190201D42B2C0201201A1B0201201E1F0201201C1D00E5473F00BD401D001D401D021F90102D31F01821043436D74BAF2E068F84601D37F59BAF2E072F844544355F910F8454330F910B0F2E065D33FD33F30F84822B9F84922B9B0F2E06C21F86820F869F84A6E915B8E19F84AD0D33FFA003171D721D33F305033BC02BCB1936DF86ADEE2F800F00C8006F3E12F43E800C7E903E900C3E09DBC41CBE10D62F24CC20C1B7BE10FE11963C03FE10BE11A04020BC03DC3E185C3E189C3E18DB7E1ABC032000B51D3C02F5007400750074087E4040B4C7C0608410DB1BDCEEBCB81A3E118074DFD66EBCB81CBE111510D57E443E1150CC3E442C3CB8197E80007E18BE80007E18F4CFF4CFCC3E1208AE7E1248AE6C3CB81B007E1A3E1A7E003C042001C1573F00BF84A6EF2E06AD2008308D71820F9012392F84492F845E24130F910F2E065D31F018210556E436CBAF2E068F84601D37F59BAF2E072D401D08308D71820F901F8444130F910F2E06501D430D08308D71820F901F8454130F910F2E06501820020120222301FED31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE2303205D31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE23032F8485280BEF8495250BEB0524BBE1AB0527ABE19210064B05215BE14B05248BE17B0F2E06970F82305C8CB3F5004FA0215F40015CB3F5004FA0212F400CB1F12CA00CA00C9F86AF00C01C31CFC02FE129BACFCB81AF48020C235C6083E4048E4BE1124BE1178904C3E443CB81974C7C0608410DA19D46EBCB81A3E118074DFD66EBCB81CB5007420C235C6083E407E11104C3E443CB81940750C3420C235C6083E407E11504C3E443CB81940602403F71CFC02FE129BACFCB81AF48020C235C6083E4048E4BE1124BE1178904C3E443CB81974C7C0608410DB10DBAEBCB81A3E118074DFD66EBCB81CBD010C3E12B434CFFE803D0134CFFE803D0134C7FE11DBC4148828083E08EE7CB81BBE11DBC4A83E08EF3CB81C34800C151D5A64D6D4C8F7A2B98E82A49B08B8C3816028292A01FCD31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE2303205D31F01821043685374BAF2E068F84601D37F59BAF2E072D33FFA00F404552003D200019AD401D0D33FFA00F40430937F206DE230325339BE5381BEB0F8495250BEB0F8485290BEB02502FE5237BE16B05262BEB0F2E06927C20097F84918BEF2E0699137E222C20097F84813BEF2E0699132E2F84AD0D33FFA00F404D33FFA00F404D31FF8476F105220A0F823BCF2E06FD200D20030B3F2E073209C3537373A5274BC5263BC12B18E11323939395250BC5299BC18B14650134440E25319BAB3F2E06D9130E30D7F05C82627002496F8476F1114A098F8476F1117A00603E203003ECB3F5004FA0215F40012CB3F5004FA0213F400CB1F12CA00CA00C9F86AF00C00620A8020F4966FA5208E213050038020F4666FA1208E1001FA00ED1E15DA119450C3A00B9133E2923430E202926C21E2B31B000C3535075063140038C8CB3F5004FA0212F400CB3F5003FA0213F400CB1FCA00C9F86AF00C00D51D3C02FE129BACFCB81AFE12B434CFFE803D010C74CFFE803D010C74C7CC3E11DBC4283E11DBC4A83E08EE7CB81C7E003E10886808E87E18BE10D400E816287E18FE10F04026BE10BE10E83E189C3E18F7BE10B04026BE10FE10A83E18DC3E18F780693E1A293E1A7C042001F53B7EF4C7C8608419F1F4A06EA4CC7C037808608403818830AEA54C7C03B6CC780C882084155DD61FAEA54C3C0476CC780820841E6849BBEEA54C3C04B6CC7808208407C546B3EEA54C3C0576CC780820840223AA8CAEA54C3C05B6CC7808208419BDBC1A6EA54C3C05F6CC780C60840950CAA46EA53C0636CC78202D0008840FF2F00075BC7FE3A7805FC25E87D007D207D20184100D0CAF6A1EC7C217C21B7817C227C22B7817C237C23FC247C24B7817C2524C3B7818823881B22A021984008DBD0CABA7805FC20C8B870FC253748B8F07C256840206B90FD0018C020EB90FD0018B8EB90E98F987C23B7882908507C11DE491839707C23B788507C23B789507C11DE48B9F03A4331C4966';\n\nclass PaymentChannel extends Contract {\n\n    /**\n     * @param provider  {HttpProvider}\n     * @param options   {{isA: boolean, channelId: BN, myKeyPair: nacl.SignKeyPair, hisPublicKey: Uint8Array, initBalanceA: BN, initBalanceB: BN, addressA: Address, addressB: Address, closingConfig?: {quarantineDuration: number, misbehaviorFine: BN, conditionalCloseDuration: number}, excessFee?: BN}}\n     */\n    constructor(provider, options) {\n        options.publicKeyA = options.isA ? options.myKeyPair.publicKey : options.hisPublicKey;\n        options.publicKeyB = !options.isA ? options.myKeyPair.publicKey : options.hisPublicKey;\n\n        options.wc = options.wc || 0;\n        options.code = options.code || Cell.oneFromBoc(PAYMENT_CHANNEL_CODE_HEX);\n        super(provider, options);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains payment channel data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeBit(0); // inited\n        cell.bits.writeCoins(0); // balance_A\n        cell.bits.writeCoins(0); // balance_B\n        writePublicKey(cell, this.options.publicKeyA); // key_A\n        writePublicKey(cell, this.options.publicKeyB); // key_B\n        cell.bits.writeUint(this.options.channelId, 128); // channel_id\n\n        const closingConfig = new Cell();\n        closingConfig.bits.writeUint(this.options.closingConfig?.quarantineDuration || 0, 32); // quarantin_duration\n        closingConfig.bits.writeCoins(this.options.closingConfig?.misbehaviorFine || new BN(0)); // misbehavior_fine\n        closingConfig.bits.writeUint(this.options.closingConfig?.conditionalCloseDuration || 0, 32); // conditional_close_duration\n        cell.refs[0] = closingConfig;\n\n        cell.bits.writeUint(0, 32); // commited_seqno_A\n        cell.bits.writeUint(0, 32); // commited_seqno_B\n        cell.bits.writeBit(false); // quarantin ref\n\n        const paymentConfig = new Cell();\n        paymentConfig.bits.writeCoins(this.options.excessFee || new BN(0)); // excess_fee\n        paymentConfig.bits.writeAddress(this.options.addressA); // addr_A\n        paymentConfig.bits.writeAddress(this.options.addressB); // addr_B\n        cell.refs[1] = paymentConfig;\n\n        return cell;\n    }\n\n    /**\n     * @private\n     * @param op    {number}\n     * @param cellForSigning    {Cell}\n     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n     */\n    async createOneSignature(op, cellForSigning) {\n        const signature = nacl.sign.detached(await cellForSigning.hash(), this.options.myKeyPair.secretKey);\n\n        const cell = createOneSignature({\n            op,\n            isA: this.options.isA,\n            signature,\n            cell: cellForSigning\n        });\n\n        return {cell, signature};\n    }\n\n    /**\n     * @private\n     * @param op    {number}\n     * @param hisSignature {Uint8Array}\n     * @param cellForSigning    {Cell}\n     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n     */\n    async createTwoSignature(op, hisSignature, cellForSigning) {\n        const signature = nacl.sign.detached(await cellForSigning.hash(), this.options.myKeyPair.secretKey);\n\n        const signatureA = this.options.isA ? signature : hisSignature;\n        const signatureB = !this.options.isA ? signature : hisSignature;\n\n        const cell = createTwoSignature({\n            op,\n            signatureA,\n            signatureB,\n            cell: cellForSigning\n        });\n\n        return {cell, signature};\n    }\n\n    /**\n     * @param params    {{coinsA: BN, coinsB: BN}}\n     * @returns {Promise<Cell>}\n     */\n    async createTopUpBalance(params) {\n        return createTopUpBalance(params);\n    }\n\n    /**\n     * @param params    {{balanceA: BN, balanceB: BN}}\n     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n     */\n    async createInitChannel(params) {\n        return this.createOneSignature(\n            op_init_channel,\n            createInitChannelBody({...params, channelId: this.options.channelId})\n        );\n    }\n\n    /**\n     * @param params    {{hisSignature?: Uint8Array, balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n     */\n    async createCooperativeCloseChannel(params) {\n        if (!params.hisSignature) {\n            params.hisSignature = new Uint8Array(512 / 8);\n        }\n        return this.createTwoSignature(\n            op_cooperative_close,\n            params.hisSignature,\n            createCooperativeCloseChannelBody({...params, channelId: this.options.channelId})\n        )\n    }\n\n    /**\n     * @param params    {{hisSignature?: Uint8Array, seqnoA: BN, seqnoB: BN}}\n     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n     */\n    async createCooperativeCommit(params) {\n        if (!params.hisSignature) {\n            params.hisSignature = new Uint8Array(512 / 8);\n        }\n        return this.createTwoSignature(\n            op_cooperative_commit,\n            params.hisSignature,\n            createCooperativeCommitBody({...params, channelId: this.options.channelId})\n        )\n    }\n\n    /**\n     * @private\n     * @param params    {{mySeqno: BN, mySentCoins: BN, hisSeqno?: BN, hisSentCoins?: BN}}\n     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n     */\n    async createSignedSemiChannelState(params) {\n        const state = createSemiChannelState({\n            channelId: this.options.channelId,\n            semiChannelBody: createSemiChannelBody({\n                seqno: params.mySeqno,\n                sentCoins: params.mySentCoins,\n                conditionals: null\n            }),\n            counterpartySemiChannelBody: params.hisSeqno === undefined ? null : createSemiChannelBody({\n                seqno: params.hisSeqno,\n                sentCoins: params.hisSentCoins,\n                conditionals: null\n            }),\n        });\n        const signature = nacl.sign.detached(await state.hash(), this.options.myKeyPair.secretKey);\n        const cell = createSignedSemiChannelState({signature, state});\n        return {cell, signature};\n    }\n\n    /**\n     * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n     * @returns {Promise<Uint8Array>} signature\n     */\n    async signState(params) {\n        const mySeqno = this.options.isA ? params.seqnoA : params.seqnoB;\n        const hisSeqno = !this.options.isA ? params.seqnoA : params.seqnoB;\n\n        const sentCoinsA = this.options.initBalanceA.gt(params.balanceA) ? this.options.initBalanceA.sub(params.balanceA) : new BN(0);\n        const sentCoinsB = this.options.initBalanceB.gt(params.balanceB) ? this.options.initBalanceB.sub(params.balanceB) : new BN(0);\n\n        const mySentCoins = this.options.isA ? sentCoinsA : sentCoinsB;\n        const hisSentCoins = !this.options.isA ? sentCoinsA : sentCoinsB;\n\n        const {cell, signature} = await this.createSignedSemiChannelState({\n            mySeqno,\n            mySentCoins,\n            hisSeqno,\n            hisSentCoins\n        });\n\n        return signature;\n    }\n\n    /**\n     * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n     * @param hisSignature  {Uint8Array}\n     * @returns {Promise<boolean>}\n     */\n    async verifyState(params, hisSignature) {\n        const mySeqno = !this.options.isA ? params.seqnoA : params.seqnoB;\n        const hisSeqno = this.options.isA ? params.seqnoA : params.seqnoB;\n\n        const sentCoinsA = this.options.initBalanceA.gt(params.balanceA) ? this.options.initBalanceA.sub(params.balanceA) : new BN(0);\n        const sentCoinsB = this.options.initBalanceB.gt(params.balanceB) ? this.options.initBalanceB.sub(params.balanceB) : new BN(0);\n\n        const mySentCoins = !this.options.isA ? sentCoinsA : sentCoinsB;\n        const hisSentCoins = this.options.isA ? sentCoinsA : sentCoinsB;\n\n        const state = createSemiChannelState({\n            channelId: this.options.channelId,\n            semiChannelBody: createSemiChannelBody({\n                seqno: mySeqno,\n                sentCoins: mySentCoins,\n                conditionals: null\n            }),\n            counterpartySemiChannelBody: hisSeqno === undefined ? null : createSemiChannelBody({\n                seqno: hisSeqno,\n                sentCoins: hisSentCoins,\n                conditionals: null\n            }),\n        });\n        const hash = await state.hash();\n        return nacl.sign.detached.verify(hash, hisSignature, this.options.isA ? this.options.publicKeyB : this.options.publicKeyA);\n    }\n\n    /**\n     * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n     * @return {Uint8Array} signature\n     */\n    async signClose(params) {\n        const {cell, signature} = await this.createCooperativeCloseChannel(params);\n        return signature;\n    }\n\n    /**\n     * @param params    {{balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n     * @param hisSignature {Uint8Array}\n     * @return {boolean}\n     */\n    async verifyClose(params, hisSignature) {\n        const cell = await createCooperativeCloseChannelBody({...params, channelId: this.options.channelId});\n        const hash = await cell.hash();\n        return nacl.sign.detached.verify(hash, hisSignature, this.options.isA ? this.options.publicKeyB : this.options.publicKeyA);\n    }\n\n    /**\n     * @param params    {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}} `signedSemiChannelState` created by `createSignedSemiChannelState`\n     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n     */\n    async createStartUncooperativeClose(params) {\n        return this.createOneSignature(\n            op_start_uncooperative_close,\n            createStartUncooperativeCloseBody({...params, channelId: this.options.channelId})\n        );\n    }\n\n    /**\n     * @param params   {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}} `signedSemiChannelState` created by `createSignedSemiChannelState`\n     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n     */\n    async createChallengeQuarantinedState(params) {\n        return this.createOneSignature(\n            op_challenge_quarantined_state,\n            createChallengeQuarantinedStateBody({...params, channelId: this.options.channelId})\n        );\n    }\n\n    /**\n     * @param params    {{conditionalsToSettle: Cell | null}} dictionary with uint32 keys and values created by `createConditionalPayment`\n     * @returns {Promise<{cell: Cell, signature: Uint8Array}>}\n     */\n    async createSettleConditionals(params) {\n        return this.createOneSignature(\n            op_settle_conditionals,\n            createSettleConditionalsBody({...params, channelId: this.options.channelId})\n        );\n    }\n\n    /**\n     * @returns {Promise<Cell>}\n     */\n    async createFinishUncooperativeClose() {\n        return createFinishUncooperativeClose();\n    }\n\n    static STATE_UNINITED = 0;\n    static STATE_OPEN = 1;\n    static STATE_CLOSURE_STARTED = 2;\n    static STATE_SETTLING_CONDITIONALS = 3;\n    static STATE_AWAITING_FINALIZATION = 4;\n\n    /**\n     * @returns {Promise<number>}\n     */\n    async getChannelState() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_channel_state', []);\n        return result.toNumber();\n    }\n\n    /**\n     * @returns {Promise<{state: number, balanceA: BN, balanceB: BN, publicKeyA: Uint8Array, publicKeyB: Uint8Array, channelId: BN, quarantineDuration: number, misbehaviorFine: BN, conditionalCloseDuration: number, seqnoA: BN, seqnoB: BN, quarantine: Cell, excessFee: BN, addressA: Address, addressB: Address}>}\n     */\n    async getData() {\n        /**\n         * @param bn    {BN}\n         * @return  {Uint8Array}\n         */\n        const bnToBytes = (bn) => {\n            let hex = bn.toString(16);\n            if (hex.length % 2 !== 0) hex = '0' + hex;\n            return hexToBytes(hex);\n        }\n\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_channel_data', []);\n\n        const state = result[0].toNumber();\n        const balanceA = result[1][0];\n        const balanceB = result[1][1];\n        const publicKeyA = bnToBytes(result[2][0]);\n        const publicKeyB = bnToBytes(result[2][1]);\n        const channelId = result[3];\n        const quarantineDuration = result[4][0].toNumber();\n        const misbehaviorFine = result[4][1];\n        const conditionalCloseDuration = result[4][2].toNumber();\n        const seqnoA = result[5][0];\n        const seqnoB = result[5][1];\n        const quarantine = result[6]; // Cell\n        const excessFee = result[7][0];\n        const addressA = parseAddress(result[7][1]);\n        const addressB = parseAddress(result[7][2]);\n        return {\n            state,\n            balanceA,\n            balanceB,\n            publicKeyA,\n            publicKeyB,\n            channelId,\n            quarantineDuration,\n            misbehaviorFine,\n            conditionalCloseDuration,\n            seqnoA,\n            seqnoB,\n            quarantine,\n            excessFee,\n            addressA,\n            addressB\n        }\n    }\n\n    /**\n     * @param params {{wallet: WalletContract, secretKey: Uint8Array}}\n     * @return {{deploy: Function, init: Function, topUp: Function, close: Function, commit: Function, startUncooperativeClose: Function, challengeQuarantinedState: Function, settleConditionals: Function, finishUncooperativeClose: Function}}\n     */\n    fromWallet(params) {\n        const {wallet, secretKey} = params;\n\n        const transfer = (payloadPromise, needStateInit) => {\n\n            const createPromise = async (amount) => {\n                const stateInit = needStateInit ? (await this.createStateInit()).stateInit : null\n                const myAddress = await this.getAddress();\n                const seqno = (await wallet.methods.seqno().call()) || 0;\n                const payload = await payloadPromise;\n\n                return wallet.methods.transfer({\n                    secretKey: secretKey,\n                    toAddress: myAddress.toString(true, true, true),\n                    amount: amount,\n                    seqno: seqno,\n                    payload, // body\n                    stateInit,\n                    sendMode: 3\n                });\n            }\n\n            return {\n                /**\n                 * @param amount    {BN}    in Toncoins\n                 */\n                send: (amount) => {\n                    return createPromise(amount).then(x => x.send());\n                },\n                /**\n                 * @param amount    {BN}    in Toncoins\n                 */\n                estimateFee: (amount) => {\n                    return createPromise(amount).then(x => x.estimateFee());\n                }\n            }\n        }\n\n        return {\n            deploy: () => {\n                return transfer(null, true);\n            },\n            /**\n             * @param params    {{balanceA: BN, balanceB: BN}}\n             */\n            init: (params) => {\n                return transfer(this.createInitChannel(params).then(x => x.cell));\n            },\n            /**\n             * @param params    {{coinsA: BN, coinsB: BN}}\n             */\n            topUp: (params) => {\n                return transfer(this.createTopUpBalance(params));\n            },\n            /**\n             * @param params    {{hisSignature: Uint8Array, balanceA: BN, balanceB: BN, seqnoA: BN, seqnoB: BN}}\n             */\n            close: (params) => {\n                return transfer(this.createCooperativeCloseChannel(params).then(x => x.cell));\n            },\n            /**\n             * @param params    {{hisSignature: Uint8Array, seqnoA: BN, seqnoB: BN}}\n             */\n            commit: (params) => {\n                return transfer(this.createCooperativeCommit(params).then(x => x.cell));\n            },\n            /**\n             * @param params    {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}}\n             */\n            startUncooperativeClose: (params) => {\n                return transfer(this.createStartUncooperativeClose(params).then(x => x.cell));\n            },\n            /**\n             * @param params    {{signedSemiChannelStateA: Cell, signedSemiChannelStateB: Cell}}\n             */\n            challengeQuarantinedState: (params) => {\n                return transfer(this.createChallengeQuarantinedState(params).then(x => x.cell));\n            },\n            /**\n             * @param params    {{conditionalsToSettle: Cell | null}}\n             */\n            settleConditionals: (params) => {\n                return transfer(this.createSettleConditionals(params).then(x => x.cell));\n            },\n            /**\n             */\n            finishUncooperativeClose: () => {\n                return transfer(this.createFinishUncooperativeClose());\n            }\n        }\n    }\n\n}\n\nPaymentChannel.codeHex = PAYMENT_CHANNEL_CODE_HEX;\n\nmodule.exports = {PaymentChannel};"],"mappings":"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"},"metadata":{},"sourceType":"script"}
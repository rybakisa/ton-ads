{"ast":null,"code":"const {\n  Contract\n} = require(\"../../index.js\");\n\nconst {\n  Cell\n} = require(\"../../../boc\");\n\nconst {\n  Address,\n  bytesToBase64\n} = require(\"../../../utils\");\n\nconst {\n  parseAddress\n} = require('./NftUtils.js');\n\nconst {\n  createOffchainUriCell,\n  serializeUri,\n  parseOffchainUriCell,\n  getRoyaltyParams\n} = require(\"./NftUtils\");\n\nclass NftCollection extends Contract {\n  /**\n   * @param provider\n   * @param options   {{ownerAddress: Address, collectionContentUri: string, nftItemContentBaseUri: string, nftItemCodeHex: string, royalty: number, royaltyAddress: Address, address?: Address | string, code?: Cell}}\n   */\n  constructor(provider, options) {\n    options.wc = 0; // https://github.com/ton-blockchain/token-contract/blob/1ad314a98d20b41241d5329e1786fc894ad811de/nft/nft-collection-editable.fc\n\n    options.code = options.code || Cell.oneFromBocn    if (options.royalty > 1) throw new Error('royalty > 1');\n    options.royaltyBase = 1000;\n    options.royaltyFactor = Math.floor(options.royalty * options.royaltyBase);\n    super(provider, options);\n    this.methods.getCollectionData = this.getCollectionData.bind(this);\n    this.methods.getNftItemAddressByIndex = this.getNftItemAddressByIndex.bind(this);\n    this.methods.getNftItemContent = this.getNftItemContent.bind(this);\n    this.methods.getRoyaltyParams = this.getRoyaltyParams.bind(this);\n  }\n  /**\n   * @private\n   * @param params {{collectionContentUri: string, nftItemContentBaseUri: string}}\n   * @return {Cell}\n   */\n\n\n  createContentCell(params) {\n    const collectionContentCell = createOffchainUriCell(params.collectionContentUri);\n    const commonContentCell = new Cell();\n    commonContentCell.bits.writeBytes(serializeUri(params.nftItemContentBaseUri));\n    const contentCell = new Cell();\n    contentCell.refs[0] = collectionContentCell;\n    contentCell.refs[1] = commonContentCell;\n    return contentCell;\n  }\n  /**\n   * @private\n   * @param params    {{royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}}\n   * @return {Cell}\n   */\n\n\n  createRoyaltyCell(params) {\n    const royaltyCell = new Cell();\n    royaltyCell.bits.writeUint(params.royaltyFactor, 16);\n    royaltyCell.bits.writeUint(params.royaltyBase, 16);\n    royaltyCell.bits.writeAddress(params.royaltyAddress);\n    return royaltyCell;\n  }\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains nft collection data\n   */\n\n\n  createDataCell() {\n    const cell = new Cell();\n    cell.bits.writeAddress(this.options.ownerAddress);\n    cell.bits.writeUint(0, 64); // next_item_index\n\n    cell.refs[0] = this.createContentCell(this.options);\n    cell.refs[1] = Cell.oneFromBoc(this.options.nftItemCodeHex);\n    cell.refs[2] = this.createRoyaltyCell(this.options);\n    return cell;\n  }\n  /**\n   * params   {{itemIndex: number, amount: BN, itemOwnerAddress: Address, itemContentUri: string, queryId?: number}}\n   * @return {Cell}\n   */\n\n\n  createMintBody(params) {\n    const body = new Cell();\n    body.bits.writeUint(1, 32); // OP deploy new nft\n\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n\n    body.bits.writeUint(params.itemIndex, 64);\n    body.bits.writeCoins(params.amount);\n    const nftItemContent = new Cell();\n    nftItemContent.bits.writeAddress(params.itemOwnerAddress);\n    const uriContent = new Cell();\n    uriContent.bits.writeBytes(serializeUri(params.itemContentUri));\n    nftItemContent.refs[0] = uriContent;\n    body.refs[0] = nftItemContent;\n    return body;\n  }\n  /**\n   * params   {{queryId?: number}}\n   * @return {Cell}\n   */\n\n\n  createGetRoyaltyParamsBody(params) {\n    const body = new Cell();\n    body.bits.writeUint(0x693d3950, 32); // OP\n\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n\n    return body;\n  }\n  /**\n   * params   {{queryId?: number, newOwnerAddress: Address}}\n   * @return {Cell}\n   */\n\n\n  createChangeOwnerBody(params) {\n    if (params.newOwnerAddress === undefined) throw new Error('Specify newOwnerAddress');\n    const body = new Cell();\n    body.bits.writeUint(3, 32); // OP\n\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n\n    body.bits.writeAddress(params.newOwnerAddress);\n    return body;\n  }\n  /**\n   * @param params    {{collectionContentUri: string, nftItemContentBaseUri: string, royalty: number, royaltyAddress: Address, queryId?: number}}\n   * @return {Cell}\n   */\n\n\n  createEditContentBody(params) {\n    if (params.royalty > 1) throw new Error('royalty > 1');\n    params.royaltyBase = 1000;\n    params.royaltyFactor = Math.floor(params.royalty * params.royaltyBase);\n    const body = new Cell();\n    body.bits.writeUint(4, 32); // OP\n\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n\n    body.refs[0] = this.createContentCell(params);\n    body.refs[1] = this.createRoyaltyCell(params);\n    return body;\n  }\n  /**\n   * @return {Promise<{nextItemIndex: number, ownerAddress: Address, collectionContentUri: string}>}\n   */\n\n\n  async getCollectionData() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_collection_data');\n    const nextItemIndex = result[0].toNumber();\n    const collectionContentUri = parseOffchainUriCell(result[1]);\n    const ownerAddress = parseAddress(result[2]);\n    return {\n      nextItemIndex,\n      ownerAddress,\n      collectionContentUri\n    };\n  }\n  /**\n   * @param nftItem   {NFTItem}\n   * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address, ownerAddress: Address|null, contentUri: string}>}\n   */\n\n\n  async getNftItemContent(nftItem) {\n    const myAddress = await this.getAddress();\n    const nftData = await nftItem.getData();\n\n    if (nftData.isInitialized) {\n      const result = await this.provider.call2(myAddress.toString(), 'get_nft_content', [['num', nftData.index], ['tvm.Cell', bytesToBase64(await nftData.contentCell.toBoc(false))]]);\n      nftData.contentUri = parseOffchainUriCell(result);\n      delete nftData.contentCell;\n    }\n\n    return nftData;\n  }\n  /**\n   * @param index {number}\n   * @return {Promise<Address>}\n   */\n\n\n  async getNftItemAddressByIndex(index) {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_nft_address_by_index', [['num', index]]);\n    return parseAddress(result);\n  }\n  /**\n   * @return {Promise<{royalty: number, royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}>}\n   */\n\n\n  async getRoyaltyParams() {\n    const myAddress = await this.getAddress();\n    return getRoyaltyParams(this.provider, myAddress.toString());\n  }\n\n}\n\nmodule.exports = {\n  NftCollection\n};","map":{"version":3,"names":["Contract","require","Cell","Address","bytesToBase64","parseAddress","createOffchainUriCell","serializeUri","parseOffchainUriCell","getRoyaltyParams","NftCollection","constructor","provider","options","wc","code","oneFromBoc","royalty","Error","royaltyBase","royaltyFactor","Math","floor","methods","getCollectionData","bind","getNftItemAddressByIndex","getNftItemContent","createContentCell","params","collectionContentCell","collectionContentUri","commonContentCell","bits","writeBytes","nftItemContentBaseUri","contentCell","refs","createRoyaltyCell","royaltyCell","writeUint","writeAddress","royaltyAddress","createDataCell","cell","ownerAddress","nftItemCodeHex","createMintBody","body","queryId","itemIndex","writeCoins","amount","nftItemContent","itemOwnerAddress","uriContent","itemContentUri","createGetRoyaltyParamsBody","createChangeOwnerBody","newOwnerAddress","undefined","createEditContentBody","myAddress","getAddress","result","call2","toString","nextItemIndex","toNumber","nftItem","nftData","getData","isInitialized","index","toBoc","contentUri","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/contract/token/nft/NftCollection.js"],"sourcesContent":["const {Contract} = require(\"../../index.js\");\nconst {Cell} = require(\"../../../boc\");\nconst {Address, bytesToBase64} = require(\"../../../utils\");\nconst {parseAddress} = require('./NftUtils.js');\nconst {createOffchainUriCell, serializeUri, parseOffchainUriCell, getRoyaltyParams} = require(\"./NftUtils\");\n\nclass NftCollection extends Contract {\n    /**\n     * @param provider\n     * @param options   {{ownerAddress: Address, collectionContentUri: string, nftItemContentBaseUri: string, nftItemCodeHex: string, royalty: number, royaltyAddress: Address, address?: Address | string, code?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        // https://github.com/ton-blockchain/token-contract/blob/1ad314a98d20b41241d5329e1786fc894ad811de/nft/nft-collection-editable.fc\n        options.code = options.code || Cell.oneFromBocn        if (options.royalty > 1) throw new Error('royalty > 1');\n        options.royaltyBase = 1000;\n        options.royaltyFactor = Math.floor(options.royalty * options.royaltyBase);\n        super(provider, options);\n\n        this.methods.getCollectionData = this.getCollectionData.bind(this);\n        this.methods.getNftItemAddressByIndex = this.getNftItemAddressByIndex.bind(this);\n        this.methods.getNftItemContent = this.getNftItemContent.bind(this);\n        this.methods.getRoyaltyParams = this.getRoyaltyParams.bind(this);\n    }\n\n    /**\n     * @private\n     * @param params {{collectionContentUri: string, nftItemContentBaseUri: string}}\n     * @return {Cell}\n     */\n    createContentCell(params) {\n        const collectionContentCell = createOffchainUriCell(params.collectionContentUri);\n\n        const commonContentCell = new Cell();\n        commonContentCell.bits.writeBytes(serializeUri(params.nftItemContentBaseUri));\n\n        const contentCell = new Cell();\n        contentCell.refs[0] = collectionContentCell;\n        contentCell.refs[1] = commonContentCell;\n\n        return contentCell;\n    }\n\n    /**\n     * @private\n     * @param params    {{royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}}\n     * @return {Cell}\n     */\n    createRoyaltyCell(params) {\n        const royaltyCell = new Cell();\n        royaltyCell.bits.writeUint(params.royaltyFactor, 16);\n        royaltyCell.bits.writeUint(params.royaltyBase, 16);\n        royaltyCell.bits.writeAddress(params.royaltyAddress);\n        return royaltyCell;\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains nft collection data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeAddress(this.options.ownerAddress);\n        cell.bits.writeUint(0, 64); // next_item_index\n        cell.refs[0] = this.createContentCell(this.options);\n        cell.refs[1] = Cell.oneFromBoc(this.options.nftItemCodeHex);\n        cell.refs[2] = this.createRoyaltyCell(this.options);\n        return cell;\n    }\n\n    /**\n     * params   {{itemIndex: number, amount: BN, itemOwnerAddress: Address, itemContentUri: string, queryId?: number}}\n     * @return {Cell}\n     */\n    createMintBody(params) {\n        const body = new Cell();\n        body.bits.writeUint(1, 32); // OP deploy new nft\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        body.bits.writeUint(params.itemIndex, 64);\n        body.bits.writeCoins(params.amount);\n\n        const nftItemContent = new Cell();\n        nftItemContent.bits.writeAddress(params.itemOwnerAddress);\n\n        const uriContent = new Cell();\n        uriContent.bits.writeBytes(serializeUri(params.itemContentUri));\n        nftItemContent.refs[0] = uriContent;\n\n        body.refs[0] = nftItemContent;\n        return body;\n    }\n\n    /**\n     * params   {{queryId?: number}}\n     * @return {Cell}\n     */\n    createGetRoyaltyParamsBody(params) {\n        const body = new Cell();\n        body.bits.writeUint(0x693d3950, 32); // OP\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        return body;\n    }\n\n    /**\n     * params   {{queryId?: number, newOwnerAddress: Address}}\n     * @return {Cell}\n     */\n    createChangeOwnerBody(params) {\n        if (params.newOwnerAddress === undefined) throw new Error('Specify newOwnerAddress');\n\n        const body = new Cell();\n        body.bits.writeUint(3, 32); // OP\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        body.bits.writeAddress(params.newOwnerAddress);\n        return body;\n    }\n\n    /**\n     * @param params    {{collectionContentUri: string, nftItemContentBaseUri: string, royalty: number, royaltyAddress: Address, queryId?: number}}\n     * @return {Cell}\n     */\n    createEditContentBody(params) {\n        if (params.royalty > 1) throw new Error('royalty > 1');\n        params.royaltyBase = 1000;\n        params.royaltyFactor = Math.floor(params.royalty * params.royaltyBase);\n\n        const body = new Cell();\n        body.bits.writeUint(4, 32); // OP\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        body.refs[0] = this.createContentCell(params);\n        body.refs[1] = this.createRoyaltyCell(params);\n        return body;\n    }\n\n    /**\n     * @return {Promise<{nextItemIndex: number, ownerAddress: Address, collectionContentUri: string}>}\n     */\n    async getCollectionData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_collection_data');\n\n        const nextItemIndex = result[0].toNumber();\n        const collectionContentUri = parseOffchainUriCell(result[1]);\n        const ownerAddress = parseAddress(result[2]);\n\n        return {nextItemIndex, ownerAddress, collectionContentUri};\n    }\n\n    /**\n     * @param nftItem   {NFTItem}\n     * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address, ownerAddress: Address|null, contentUri: string}>}\n     */\n    async getNftItemContent(nftItem) {\n        const myAddress = await this.getAddress();\n        const nftData = await nftItem.getData();\n        if (nftData.isInitialized) {\n            const result = await this.provider.call2(myAddress.toString(), 'get_nft_content', [['num', nftData.index], ['tvm.Cell', bytesToBase64(await nftData.contentCell.toBoc(false))]]);\n            nftData.contentUri = parseOffchainUriCell(result);\n            delete nftData.contentCell;\n        }\n        return nftData;\n    }\n\n    /**\n     * @param index {number}\n     * @return {Promise<Address>}\n     */\n    async getNftItemAddressByIndex(index) {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_nft_address_by_index', [['num', index]]);\n\n        return parseAddress(result);\n    }\n\n    /**\n     * @return {Promise<{royalty: number, royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}>}\n     */\n    async getRoyaltyParams() {\n        const myAddress = await this.getAddress();\n        return getRoyaltyParams(this.provider, myAddress.toString());\n    }\n}\n\nmodule.exports = {NftCollection};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
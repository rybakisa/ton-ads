{"ast":null,"code":"const {\n  BN,\n  bytesToHex\n} = require(\"../utils\");\n\nclass BitString {\n  /**\n   * @param length {number}    length of BitString in bits\n   */\n  constructor(length) {\n    this.array = Uint8Array.from({\n      length: Math.ceil(length / 8)\n    }, () => 0);\n    this.cursor = 0;\n    this.length = length;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getFreeBits() {\n    return this.length - this.cursor;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getUsedBits() {\n    return this.cursor;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getUsedBytes() {\n    return Math.ceil(this.cursor / 8);\n  }\n  /**\n   * @param n {number}\n   * @return {boolean}    bit value at position `n`\n   */\n\n\n  get(n) {\n    return (this.array[n / 8 | 0] & 1 << 7 - n % 8) > 0;\n  }\n  /**\n   * @private\n   * @param n {number}\n   */\n\n\n  checkRange(n) {\n    if (n > this.length) {\n      throw Error(\"BitString overflow\");\n    }\n  }\n  /**\n   * Set bit value to 1 at position `n`\n   * @param n {number}\n   */\n\n\n  on(n) {\n    this.checkRange(n);\n    this.array[n / 8 | 0] |= 1 << 7 - n % 8;\n  }\n  /**\n   * Set bit value to 0 at position `n`\n   * @param n {number}\n   */\n\n\n  off(n) {\n    this.checkRange(n);\n    this.array[n / 8 | 0] &= ~(1 << 7 - n % 8);\n  }\n  /**\n   * Toggle bit value at position `n`\n   * @param n {number}\n   */\n\n\n  toggle(n) {\n    this.checkRange(n);\n    this.array[n / 8 | 0] ^= 1 << 7 - n % 8;\n  }\n  /**\n   * forEach every bit\n   * @param callback  {function(boolean): void}\n   */\n\n\n  forEach(callback) {\n    const max = this.cursor;\n\n    for (let x = 0; x < max; x++) {\n      callback(this.get(x));\n    }\n  }\n  /**\n   * Write bit and increase cursor\n   * @param b  {boolean | number}\n   */\n\n\n  writeBit(b) {\n    if (b && b > 0) {\n      this.on(this.cursor);\n    } else {\n      this.off(this.cursor);\n    }\n\n    this.cursor = this.cursor + 1;\n  }\n  /**\n   * @param ba  {Array<boolean | number>}\n   */\n\n\n  writeBitArray(ba) {\n    for (let i = 0; i < ba.length; i++) {\n      this.writeBit(ba[i]);\n    }\n  }\n  /**\n   * Write unsigned int\n   * @param number  {number | BN}\n   * @param bitLength  {number}  size of uint in bits\n   */\n\n\n  writeUint(number, bitLength) {\n    number = new BN(number);\n\n    if (bitLength == 0 || number.toString(2).length > bitLength) {\n      if (number == 0) return;\n      throw Error(\"bitLength is too small for number, got number=\" + number + \",bitLength=\" + bitLength);\n    }\n\n    const s = number.toString(2, bitLength);\n\n    for (let i = 0; i < bitLength; i++) {\n      this.writeBit(s[i] == 1);\n    }\n  }\n  /**\n   * Write signed int\n   * @param number  {number | BN}\n   * @param bitLength  {number}  size of int in bits\n   */\n\n\n  writeInt(number, bitLength) {\n    number = new BN(number);\n\n    if (bitLength == 1) {\n      if (number == -1) {\n        this.writeBit(true);\n        return;\n      }\n\n      if (number == 0) {\n        this.writeBit(false);\n        return;\n      }\n\n      throw Error(\"Bitlength is too small for number\");\n    } else {\n      if (number.isNeg()) {\n        this.writeBit(true);\n        const b = new BN(2);\n        const nb = b.pow(new BN(bitLength - 1));\n        this.writeUint(nb.add(number), bitLength - 1);\n      } else {\n        this.writeBit(false);\n        this.writeUint(number, bitLength - 1);\n      }\n    }\n  }\n  /**\n   * Write unsigned 8-bit int\n   * @param ui8 {number}\n   */\n\n\n  writeUint8(ui8) {\n    this.writeUint(ui8, 8);\n  }\n  /**\n   * Write array of unsigned 8-bit ints\n   * @param ui8 {Uint8Array}\n   */\n\n\n  writeBytes(ui8) {\n    for (let i = 0; i < ui8.length; i++) {\n      this.writeUint8(ui8[i]);\n    }\n  }\n  /**\n   * Write UTF-8 string\n   *\n   * @param value {string}\n   */\n\n\n  writeString(value) {\n    this.writeBytes(new TextEncoder().encode(value));\n  }\n  /**\n   * @param amount  {number | BN} in nanograms\n   */\n\n\n  writeGrams(amount) {\n    if (amount == 0) {\n      this.writeUint(0, 4);\n    } else {\n      amount = new BN(amount);\n      const l = Math.ceil(amount.toString(16).length / 2);\n      this.writeUint(l, 4);\n      this.writeUint(amount, l * 8);\n    }\n  }\n  /**\n   * @param amount  {number | BN} in nanotons\n   */\n\n\n  writeCoins(amount) {\n    this.writeGrams(amount);\n  } //addr_none$00 = MsgAddressExt;\n  //addr_std$10 anycast:(Maybe Anycast)\n  // workchain_id:int8 address:uint256 = MsgAddressInt;\n\n  /**\n   * @param address {Address | null}\n   */\n\n\n  writeAddress(address) {\n    if (address == null) {\n      this.writeUint(0, 2);\n    } else {\n      this.writeUint(2, 2);\n      this.writeUint(0, 1); // TODO split addresses (anycast)\n\n      this.writeInt(address.wc, 8);\n      this.writeBytes(address.hashPart);\n    }\n  }\n  /**\n   * write another BitString to this BitString\n   * @param anotherBitString  {BitString}\n   */\n\n\n  writeBitString(anotherBitString) {\n    anotherBitString.forEach(x => {\n      this.writeBit(x);\n    });\n  }\n\n  clone() {\n    const result = new BitString(0);\n    result.array = this.array.slice(0);\n    result.length = this.length;\n    result.cursor = this.cursor;\n    return result;\n  }\n  /**\n   * @return {string} hex\n   */\n\n\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @return {Uint8Array}\n   */\n\n\n  getTopUppedArray() {\n    const ret = this.clone();\n    let tu = Math.ceil(ret.cursor / 8) * 8 - ret.cursor;\n\n    if (tu > 0) {\n      tu = tu - 1;\n      ret.writeBit(true);\n\n      while (tu > 0) {\n        tu = tu - 1;\n        ret.writeBit(false);\n      }\n    }\n\n    ret.array = ret.array.slice(0, Math.ceil(ret.cursor / 8));\n    return ret.array;\n  }\n  /**\n   * like Fift\n   * @return {string}\n   */\n\n\n  toHex() {\n    if (this.cursor % 4 === 0) {\n      const s = bytesToHex(this.array.slice(0, Math.ceil(this.cursor / 8))).toUpperCase();\n\n      if (this.cursor % 8 === 0) {\n        return s;\n      } else {\n        return s.substr(0, s.length - 1);\n      }\n    } else {\n      const temp = this.clone();\n      temp.writeBit(1);\n\n      while (temp.cursor % 4 !== 0) {\n        temp.writeBit(0);\n      }\n\n      const hex = temp.toHex().toUpperCase();\n      return hex + '_';\n    }\n  }\n  /**\n   * set this cell data to match provided topUppedArray\n   * @param array  {Uint8Array}\n   * @param fullfilledBytes  {boolean}\n   */\n\n\n  setTopUppedArray(array) {\n    let fullfilledBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.length = array.length * 8;\n    this.array = array;\n    this.cursor = this.length;\n\n    if (fullfilledBytes || !this.length) {\n      return;\n    } else {\n      let foundEndBit = false;\n\n      for (let c = 0; c < 7; c++) {\n        this.cursor -= 1;\n\n        if (this.get(this.cursor)) {\n          foundEndBit = true;\n          this.off(this.cursor);\n          break;\n        }\n      }\n\n      if (!foundEndBit) {\n        console.log(array, fullfilledBytes);\n        throw new Error(\"Incorrect TopUppedArray\");\n      }\n    }\n  }\n\n}\n\nmodule.exports = {\n  BitString\n};","map":{"version":3,"names":["BN","bytesToHex","require","BitString","constructor","length","array","Uint8Array","from","Math","ceil","cursor","getFreeBits","getUsedBits","getUsedBytes","get","n","checkRange","Error","on","off","toggle","forEach","callback","max","x","writeBit","b","writeBitArray","ba","i","writeUint","number","bitLength","toString","s","writeInt","isNeg","nb","pow","add","writeUint8","ui8","writeBytes","writeString","value","TextEncoder","encode","writeGrams","amount","l","writeCoins","writeAddress","address","wc","hashPart","writeBitString","anotherBitString","clone","result","slice","toHex","getTopUppedArray","ret","tu","toUpperCase","substr","temp","hex","setTopUppedArray","fullfilledBytes","foundEndBit","c","console","log","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/boc/BitString.js"],"sourcesContent":["const {BN, bytesToHex} = require(\"../utils\");\n\nclass BitString {\n    /**\n     * @param length {number}    length of BitString in bits\n     */\n    constructor(length) {\n        this.array = Uint8Array.from({length: Math.ceil(length / 8)}, () => 0);\n        this.cursor = 0;\n        this.length = length;\n    }\n\n    /**\n     * @return {number}\n     */\n    getFreeBits() {\n        return this.length - this.cursor;\n    }\n\n    /**\n     * @return {number}\n     */\n    getUsedBits() {\n        return this.cursor;\n    }\n\n    /**\n     * @return {number}\n     */\n    getUsedBytes() {\n        return Math.ceil(this.cursor / 8);\n    }\n\n    /**\n     * @param n {number}\n     * @return {boolean}    bit value at position `n`\n     */\n    get(n) {\n        return (this.array[(n / 8) | 0] & (1 << (7 - (n % 8)))) > 0;\n    }\n\n    /**\n     * @private\n     * @param n {number}\n     */\n    checkRange(n) {\n        if (n > this.length) {\n            throw Error(\"BitString overflow\");\n        }\n    }\n\n    /**\n     * Set bit value to 1 at position `n`\n     * @param n {number}\n     */\n    on(n) {\n        this.checkRange(n);\n        this.array[(n / 8) | 0] |= 1 << (7 - (n % 8));\n    }\n\n    /**\n     * Set bit value to 0 at position `n`\n     * @param n {number}\n     */\n    off(n) {\n        this.checkRange(n);\n        this.array[(n / 8) | 0] &= ~(1 << (7 - (n % 8)));\n    }\n\n    /**\n     * Toggle bit value at position `n`\n     * @param n {number}\n     */\n    toggle(n) {\n        this.checkRange(n);\n        this.array[(n / 8) | 0] ^= 1 << (7 - (n % 8));\n    }\n\n    /**\n     * forEach every bit\n     * @param callback  {function(boolean): void}\n     */\n    forEach(callback) {\n        const max = this.cursor;\n        for (let x = 0; x < max; x++) {\n            callback(this.get(x));\n        }\n    }\n\n    /**\n     * Write bit and increase cursor\n     * @param b  {boolean | number}\n     */\n    writeBit(b) {\n        if (b && b > 0) {\n            this.on(this.cursor);\n        } else {\n            this.off(this.cursor);\n        }\n        this.cursor = this.cursor + 1;\n    }\n\n    /**\n     * @param ba  {Array<boolean | number>}\n     */\n    writeBitArray(ba) {\n        for (let i = 0; i < ba.length; i++) {\n            this.writeBit(ba[i]);\n        }\n    }\n\n    /**\n     * Write unsigned int\n     * @param number  {number | BN}\n     * @param bitLength  {number}  size of uint in bits\n     */\n    writeUint(number, bitLength) {\n        number = new BN(number);\n        if (\n            bitLength == 0 ||\n            (number.toString(2).length > bitLength)\n        ) {\n            if (number == 0) return;\n            throw Error(\"bitLength is too small for number, got number=\" + number + \",bitLength=\" + bitLength);\n        }\n        const s = number.toString(2, bitLength);\n        for (let i = 0; i < bitLength; i++) {\n            this.writeBit(s[i] == 1);\n        }\n    }\n\n    /**\n     * Write signed int\n     * @param number  {number | BN}\n     * @param bitLength  {number}  size of int in bits\n     */\n    writeInt(number, bitLength) {\n        number = new BN(number);\n        if (bitLength == 1) {\n            if (number == -1) {\n                this.writeBit(true);\n                return;\n            }\n            if (number == 0) {\n                this.writeBit(false);\n                return;\n            }\n            throw Error(\"Bitlength is too small for number\");\n        } else {\n            if (number.isNeg()) {\n                this.writeBit(true);\n                const b = new BN(2);\n                const nb = b.pow(new BN(bitLength - 1));\n                this.writeUint(nb.add(number), bitLength - 1);\n            } else {\n                this.writeBit(false);\n                this.writeUint(number, bitLength - 1);\n            }\n        }\n    }\n\n    /**\n     * Write unsigned 8-bit int\n     * @param ui8 {number}\n     */\n    writeUint8(ui8) {\n        this.writeUint(ui8, 8);\n    }\n\n    /**\n     * Write array of unsigned 8-bit ints\n     * @param ui8 {Uint8Array}\n     */\n    writeBytes(ui8) {\n        for (let i = 0; i < ui8.length; i++) {\n            this.writeUint8(ui8[i]);\n        }\n    }\n\n    /**\n     * Write UTF-8 string\n     *\n     * @param value {string}\n     */\n    writeString(value) {\n        this.writeBytes(\n            new TextEncoder().encode(value)\n        );\n    }\n\n    /**\n     * @param amount  {number | BN} in nanograms\n     */\n    writeGrams(amount) {\n        if (amount == 0) {\n            this.writeUint(0, 4);\n        } else {\n            amount = new BN(amount);\n            const l = Math.ceil((amount.toString(16).length) / 2);\n            this.writeUint(l, 4);\n            this.writeUint(amount, l * 8);\n        }\n    }\n\n\n    /**\n     * @param amount  {number | BN} in nanotons\n     */\n    writeCoins(amount) {\n        this.writeGrams(amount);\n    }\n\n    //addr_none$00 = MsgAddressExt;\n    //addr_std$10 anycast:(Maybe Anycast)\n    // workchain_id:int8 address:uint256 = MsgAddressInt;\n    /**\n     * @param address {Address | null}\n     */\n    writeAddress(address) {\n        if (address == null) {\n            this.writeUint(0, 2);\n        } else {\n            this.writeUint(2, 2);\n            this.writeUint(0, 1); // TODO split addresses (anycast)\n            this.writeInt(address.wc, 8);\n            this.writeBytes(address.hashPart);\n        }\n    }\n\n    /**\n     * write another BitString to this BitString\n     * @param anotherBitString  {BitString}\n     */\n    writeBitString(anotherBitString) {\n        anotherBitString.forEach(x => {\n            this.writeBit(x);\n        });\n    }\n\n    clone() {\n        const result = new BitString(0);\n        result.array = this.array.slice(0);\n        result.length = this.length\n        result.cursor = this.cursor;\n        return result;\n    }\n\n    /**\n     * @return {string} hex\n     */\n    toString() {\n        return this.toHex();\n    }\n\n    /**\n     * @return {Uint8Array}\n     */\n    getTopUppedArray() {\n        const ret = this.clone();\n\n        let tu = Math.ceil(ret.cursor / 8) * 8 - ret.cursor;\n        if (tu > 0) {\n            tu = tu - 1;\n            ret.writeBit(true);\n            while (tu > 0) {\n                tu = tu - 1;\n                ret.writeBit(false);\n            }\n        }\n        ret.array = ret.array.slice(0, Math.ceil(ret.cursor / 8));\n        return ret.array;\n    }\n\n    /**\n     * like Fift\n     * @return {string}\n     */\n    toHex() {\n        if (this.cursor % 4 === 0) {\n            const s = bytesToHex(this.array.slice(0, Math.ceil(this.cursor / 8))).toUpperCase();\n            if (this.cursor % 8 === 0) {\n                return s;\n            } else {\n                return s.substr(0, s.length - 1);\n            }\n        } else {\n            const temp = this.clone();\n            temp.writeBit(1);\n            while (temp.cursor % 4 !== 0) {\n                temp.writeBit(0);\n            }\n            const hex = temp.toHex().toUpperCase();\n            return hex + '_';\n        }\n    }\n\n    /**\n     * set this cell data to match provided topUppedArray\n     * @param array  {Uint8Array}\n     * @param fullfilledBytes  {boolean}\n     */\n    setTopUppedArray(array, fullfilledBytes = true) {\n        this.length = array.length * 8;\n        this.array = array;\n        this.cursor = this.length;\n        if (fullfilledBytes || !this.length) {\n            return;\n        } else {\n            let foundEndBit = false;\n            for (let c = 0; c < 7; c++) {\n                this.cursor -= 1;\n                if (this.get(this.cursor)) {\n                    foundEndBit = true;\n                    this.off(this.cursor);\n                    break;\n                }\n            }\n            if (!foundEndBit) {\n                console.log(array, fullfilledBytes);\n                throw new Error(\"Incorrect TopUppedArray\");\n            }\n        }\n    }\n}\n\nmodule.exports = {BitString};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
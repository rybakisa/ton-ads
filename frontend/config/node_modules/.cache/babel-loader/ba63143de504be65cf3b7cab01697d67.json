{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function scheduleObservable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    sub.add(scheduler.schedule(function () {\n      var observable = input[Symbol_observable]();\n      sub.add(observable.subscribe({\n        next: function (value) {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.next(value);\n          }));\n        },\n        error: function (err) {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.error(err);\n          }));\n        },\n        complete: function () {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.complete();\n          }));\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,UAAT,QAAuB,eAAvB;AACA,SAASC,YAAT,QAAuB,iBAAvB;AAGA,SAAMC,UAAU,qBAAhB,QAAmE,sBAAnE;OACE,SAAWC,kBAAX,CAAyBC,KAAzB,EAAyBC,SAAzB,EAAmC;SACjC,IAASL,UAAT,CAAgB,UAAcM,UAAd,EAAe;IAC/B,IAAIC,GAAG,GAAC,kBAAR;QACEC,IAAMH,UAAUI,QAAV,CAAoC;MAC1C,IAAIP,UAAI,QAAW,mBAAX,EAAR;UACEM,IAAIN,qBAAU;QACdQ,MAAK,iBAAI;UAAIH,GAAI,IAAJ,CAAQF,SAAU,SAAV,CAAmB;YAAM,iBAAW,KAAX,CAAiBM,KAAjB;UAAuB,CAAhD,CAAR;QAA2D,CAD1D;QAEdC,iBAAQC,GAAR,EAAQ;UAAKN,GAAG,CAACC,GAAJ,CAAQH,SAAS,CAACI,QAAV,CAAmB;YAAM,iBAAU,CAACG,KAAX,CAAWC,GAAX;UAAqB,CAA9C,CAAR;QAA2D,CAF1D;QAGZC;UAAAP;YAAA;UAAA;QAAA;MAHY,CAAV;IAKR,CAPQ;IAQP;EACJ,CAXG","names":["Observable","Subscription","observable","scheduleObservable","input","scheduler","subscriber","sub","add","schedule","next","value","error","err","complete"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => {\n      const observable: Subscribable<T> = input[Symbol_observable]();\n      sub.add(observable.subscribe({\n        next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n        error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n        complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n      }));\n    }));\n    return sub;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const {\n  Contract\n} = require(\"../../index\");\n\nconst {\n  Cell\n} = require(\"../../../boc\");\n\nconst {\n  Address,\n  BN\n} = require(\"../../../utils\");\n\nconst {\n  parseAddress,\n  getRoyaltyParams\n} = require('./NftUtils.js');\n\nconst {\n  parseOffchainUriCell\n} = require(\"./NftUtils\"); // https://github.com/ton-blockchain/token-contract/blob/1ad314a98d20b41241d5329e1786fc894ad811de/nft/nft-item.fc\n\n\nconstn\nclass NftItem extends Contract {\n  /**\n   * @param provider\n   * @param options   {{index: number, collectionAddress: Address, address?: Address | string, code?: Cell}}\n   */\n  constructor(provider, options) {\n    options.wc = 0;\n    options.code = options.code || Cell.oneFromBoc(NFT_ITEM_CODE_HEX);\n    super(provider, options);\n    this.methods.getData = this.getData.bind(this);\n  }\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains nft data\n   */\n\n\n  createDataCell() {\n    const cell = new Cell();\n    cell.bits.writeUint(this.options.index, 64);\n    cell.bits.writeAddress(this.options.collectionAddress);\n    return cell;\n  }\n  /**\n   * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address|null, ownerAddress: Address|null, contentCell: Cell, contentUri: string|null}>}\n   */\n\n\n  async getData() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_nft_data');\n    const isInitialized = result[0].toNumber() === -1;\n    const index = result[1].toNumber();\n    const collectionAddress = parseAddress(result[2]);\n    const ownerAddress = isInitialized ? parseAddress(result[3]) : null;\n    const contentCell = result[4];\n    const contentUri = isInitialized && collectionAddress === null ? parseOffchainUriCell(contentCell) : null; // single NFT without collection\n\n    return {\n      isInitialized,\n      index,\n      collectionAddress,\n      ownerAddress,\n      contentCell,\n      contentUri\n    };\n  }\n  /**\n   * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array, responseAddress: Address}}\n   */\n\n\n  async createTransferBody(params) {\n    const cell = new Cell();\n    cell.bits.writeUint(0x5fcc3d14, 32); // transfer op\n\n    cell.bits.writeUint(params.queryId || 0, 64);\n    cell.bits.writeAddress(params.newOwnerAddress);\n    cell.bits.writeAddress(params.responseAddress);\n    cell.bits.writeBit(false); // null custom_payload\n\n    cell.bits.writeCoins(params.forwardAmount || new BN(0));\n    cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n\n    if (params.forwardPayload) {\n      cell.bits.writeBytes(params.forwardPayload);\n    }\n\n    return cell;\n  }\n  /**\n   * params   {{queryId?: number}}\n   * @return {Cell}\n   */\n\n\n  createGetStaticDataBody(params) {\n    const body = new Cell();\n    body.bits.writeUint(0x2fcb26a2, 32); // OP\n\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n\n    return body;\n  }\n  /**\n   * for single nft without collection\n   * @return {Promise<{royalty: number, royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}>}\n   */\n\n\n  async getRoyaltyParams() {\n    const myAddress = await this.getAddress();\n    return getRoyaltyParams(this.provider, myAddress.toString());\n  }\n\n}\n\nNftItem.codeHex = NFT_ITEM_CODE_HEX;\nmodule.exports = {\n  NftItem\n};","map":{"version":3,"names":["Contract","require","Cell","Address","BN","parseAddress","getRoyaltyParams","parseOffchainUriCell","NFT_ITEM_CODE_HEX","NftItem","constructor","provider","options","wc","code","oneFromBoc","methods","getData","bind","createDataCell","cell","bits","writeUint","index","writeAddress","collectionAddress","myAddress","getAddress","result","call2","toString","isInitialized","toNumber","ownerAddress","contentCell","contentUri","createTransferBody","params","queryId","newOwnerAddress","responseAddress","writeBit","writeCoins","forwardAmount","forwardPayload","writeBytes","createGetStaticDataBody","body","codeHex","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/contract/token/nft/NftItem.js"],"sourcesContent":["const {Contract} = require(\"../../index\");\nconst {Cell} = require(\"../../../boc\");\nconst {Address, BN} = require(\"../../../utils\");\nconst {parseAddress, getRoyaltyParams} = require('./NftUtils.js');\nconst {parseOffchainUriCell} = require(\"./NftUtils\");\n\n// https://github.com/ton-blockchain/token-contract/blob/1ad314a98d20b41241d5329e1786fc894ad811de/nft/nft-item.fc\nconstn\nclass NftItem extends Contract {\n    /**\n     * @param provider\n     * @param options   {{index: number, collectionAddress: Address, address?: Address | string, code?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        options.code = options.code || Cell.oneFromBoc(NFT_ITEM_CODE_HEX);\n        super(provider, options);\n\n        this.methods.getData = this.getData.bind(this);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains nft data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeUint(this.options.index, 64);\n        cell.bits.writeAddress(this.options.collectionAddress);\n        return cell;\n    }\n\n    /**\n     * @return {Promise<{isInitialized: boolean, index: number, collectionAddress: Address|null, ownerAddress: Address|null, contentCell: Cell, contentUri: string|null}>}\n     */\n    async getData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_nft_data');\n\n        const isInitialized = result[0].toNumber() === -1;\n        const index = result[1].toNumber();\n        const collectionAddress =  parseAddress(result[2]);\n        const ownerAddress = isInitialized ? parseAddress(result[3]) : null;\n        const contentCell = result[4];\n\n        const contentUri = (isInitialized && collectionAddress === null) ? parseOffchainUriCell(contentCell) : null; // single NFT without collection\n\n        return {isInitialized, index, collectionAddress, ownerAddress, contentCell, contentUri};\n    }\n\n    /**\n     * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array, responseAddress: Address}}\n     */\n    async createTransferBody(params) {\n        const cell = new Cell();\n        cell.bits.writeUint(0x5fcc3d14, 32); // transfer op\n        cell.bits.writeUint(params.queryId || 0, 64);\n        cell.bits.writeAddress(params.newOwnerAddress);\n        cell.bits.writeAddress(params.responseAddress);\n        cell.bits.writeBit(false); // null custom_payload\n        cell.bits.writeCoins(params.forwardAmount || new BN(0));\n        cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n\n        if (params.forwardPayload) {\n            cell.bits.writeBytes(params.forwardPayload);\n        }\n        return cell;\n    }\n\n    /**\n     * params   {{queryId?: number}}\n     * @return {Cell}\n     */\n    createGetStaticDataBody(params) {\n        const body = new Cell();\n        body.bits.writeUint(0x2fcb26a2, 32); // OP\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        return body;\n    }\n\n    /**\n     * for single nft without collection\n     * @return {Promise<{royalty: number, royaltyFactor: number, royaltyBase: number, royaltyAddress: Address}>}\n     */\n    async getRoyaltyParams() {\n        const myAddress = await this.getAddress();\n        return getRoyaltyParams(this.provider, myAddress.toString());\n    }\n\n}\n\nNftItem.codeHex = NFT_ITEM_CODE_HEX;\n\nmodule.exports = {NftItem};"],"mappings":"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"},"metadata":{},"sourceType":"script"}
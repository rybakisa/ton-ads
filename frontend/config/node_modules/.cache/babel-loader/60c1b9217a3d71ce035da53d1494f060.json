{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var iterator;\n    sub.add(function () {\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n\n        var value;\n        var done;\n\n        try {\n          var result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,UAAT,QAAuB,eAAvB;AACA,SAASC,YAAT,QAAqB,iBAArB;AAEA,SAAMC,QAAU,mBAAhB,QAAwD,oBAAxD;OACE,SAAYC,gBAAZ,CAAYC,KAAZ,EAAYC,SAAZ,EAAY;MACV,QAAM;IACP;EACD;;SACE,IAASL,UAAT,CAAgB,UAAcM,UAAd,EAAe;IAC/B,IAAIC,UAAsBN,YAAtB,EAAJ;IACA,IAAIC,QAAJ;QAEEM,IAAI,YAAY;UACdN,QAAQ,IAAC,OAASA,eAAT,KAAS;QACnBA;MACA;IACH;QACEM,aAAW,SAAX,CAAiB,YAAkB;MACnCN,QAAQ,SAASO,eAAT,GAAR;UACED,IAAIH,UAAUK,QAAV,CAAmB;YACrBJ,UAAO;UACR;QACD;;QACA,IAAIK,KAAJ;QACA,IAAIC,IAAJ;;YACE;UACA,UAAQ,WAAa,KAAb,EAAR;UACAD,KAAI,GAAGE,MAAO,MAAd;UACDD;QAAC,SACAE;UACAR,UAAO,MAAP,CAAOQ,GAAP;UACD;QACD;;YACEF;UACDN;eACC;UACAA,UAAK,KAAL,CAAgBK,KAAhB;UACD;QACC;MACF,CApBI;IAqBR,CAvBE;IAwBD;EACJ,CAlCG","names":["Observable","Subscription","iterator","scheduleIterable","input","scheduler","subscriber","sub","add","Symbol_iterator","schedule","value","done","result","err"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let iterator: Iterator<T>;\n    sub.add(() => {\n      // Finalize generators\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(() => {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        let value: T;\n        let done: boolean;\n        try {\n          const result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import EventEmitter from \"events\";\nimport { TransportRaceCondition, TransportError, StatusCodes, getAltStatusMessage, TransportStatusError } from \"@ledgerhq/errors\";\nexport { TransportError, TransportStatusError, StatusCodes, getAltStatusMessage };\n/**\n */\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\n\nexport default class Transport {\n  constructor() {\n    var _this = this;\n\n    this.exchangeTimeout = 30000;\n    this.unresponsiveTimeout = 15000;\n    this.deviceModel = null;\n    this._events = new EventEmitter();\n\n    this.send = async function (cla, ins, p1, p2) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Buffer.alloc(0);\n      let statusList = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [StatusCodes.OK];\n\n      if (data.length >= 256) {\n        throw new TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n      }\n\n      const response = await _this.exchange(Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]));\n      const sw = response.readUInt16BE(response.length - 2);\n\n      if (!statusList.some(s => s === sw)) {\n        throw new TransportStatusError(sw);\n      }\n\n      return response;\n    };\n\n    this.exchangeBusyPromise = void 0;\n\n    this.exchangeAtomicImpl = async f => {\n      if (this.exchangeBusyPromise) {\n        throw new TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n      }\n\n      let resolveBusy;\n      const busyPromise = new Promise(r => {\n        resolveBusy = r;\n      });\n      this.exchangeBusyPromise = busyPromise;\n      let unresponsiveReached = false;\n      const timeout = setTimeout(() => {\n        unresponsiveReached = true;\n        this.emit(\"unresponsive\");\n      }, this.unresponsiveTimeout);\n\n      try {\n        const res = await f();\n\n        if (unresponsiveReached) {\n          this.emit(\"responsive\");\n        }\n\n        return res;\n      } finally {\n        clearTimeout(timeout);\n        if (resolveBusy) resolveBusy();\n        this.exchangeBusyPromise = null;\n      }\n    };\n\n    this._appAPIlock = null;\n  }\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n\n\n  exchange(_apdu) {\n    throw new Error(\"exchange not implemented\");\n  }\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n\n\n  setScrambleKey(_key) {}\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n\n\n  close() {\n    return Promise.resolve();\n  }\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n\n\n  on(eventName, cb) {\n    this._events.on(eventName, cb);\n  }\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n\n\n  off(eventName, cb) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    this._events.emit(event, ...args);\n  }\n  /**\n   * Enable or not logs of the binary exchange\n   */\n\n\n  setDebugMode() {\n    console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n  }\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n\n\n  setExchangeTimeout(exchangeTimeout) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n\n\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\n  TransportFoo.create().then(transport => ...)\n   */\n\n\n  static create() {\n    let openTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n    let listenTimeout = arguments.length > 1 ? arguments[1] : undefined;\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: e => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: e => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n\n          if (!found) {\n            reject(new TransportError(this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n          }\n        }\n      });\n      const listenTimeoutId = listenTimeout ? setTimeout(() => {\n        sub.unsubscribe();\n        reject(new TransportError(this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n      }, listenTimeout) : null;\n    });\n  }\n\n  decorateAppAPIMethods(self, methods, scrambleKey) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n    }\n  }\n\n  decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {\n    var _this2 = this;\n\n    return async function () {\n      const {\n        _appAPIlock\n      } = _this2;\n\n      if (_appAPIlock) {\n        return Promise.reject(new TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"));\n      }\n\n      try {\n        _this2._appAPIlock = methodName;\n\n        _this2.setScrambleKey(scrambleKey);\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return await f.apply(ctx, args);\n      } finally {\n        _this2._appAPIlock = null;\n      }\n    };\n  }\n\n}\nTransport.isSupported = void 0;\nTransport.list = void 0;\nTransport.listen = void 0;\nTransport.open = void 0;\nTransport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\nTransport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";","map":{"version":3,"mappings":"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","names":["EventEmitter","TransportRaceCondition","TransportError","StatusCodes","getAltStatusMessage","TransportStatusError","Transport","constructor","exchangeTimeout","unresponsiveTimeout","deviceModel","_events","send","cla","ins","p1","p2","data","Buffer","alloc","statusList","OK","length","response","exchange","concat","from","sw","readUInt16BE","some","s","exchangeBusyPromise","exchangeAtomicImpl","f","resolveBusy","busyPromise","Promise","r","unresponsiveReached","timeout","setTimeout","emit","res","clearTimeout","_appAPIlock","_apdu","Error","setScrambleKey","_key","close","resolve","on","eventName","cb","off","removeListener","event","args","setDebugMode","console","warn","setExchangeTimeout","setExchangeUnresponsiveTimeout","create","openTimeout","listenTimeout","reject","found","sub","listen","next","e","unsubscribe","listenTimeoutId","open","descriptor","then","error","complete","ErrorMessage_NoDeviceFound","ErrorMessage_ListenTimeout","decorateAppAPIMethods","self","methods","scrambleKey","methodName","decorateAppAPIMethod","ctx","apply","isSupported","list"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/@ledgerhq/hw-transport/src/Transport.js"],"sourcesContent":["//@flow\n\nimport EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportRaceCondition,\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError,\n} from \"@ledgerhq/errors\";\n\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage,\n};\n\n/**\n */\nexport type Subscription = { unsubscribe: () => void };\n\n/**\n */\nexport type Device = Object;\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport type DescriptorEvent<Descriptor> = {\n  type: \"add\" | \"remove\",\n  descriptor: Descriptor,\n  deviceModel?: ?DeviceModel,\n  device?: Device,\n};\n/**\n */\nexport type Observer<Ev> = $ReadOnly<{\n  next: (event: Ev) => mixed,\n  error: (e: any) => mixed,\n  complete: () => mixed,\n}>;\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport<Descriptor> {\n  exchangeTimeout: number = 30000;\n  unresponsiveTimeout: number = 15000;\n  deviceModel: ?DeviceModel = null;\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n  static +isSupported: () => Promise<boolean>;\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static +list: () => Promise<Array<Descriptor>>;\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\nconst sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n})\n   */\n  static +listen: (\n    observer: Observer<DescriptorEvent<Descriptor>>\n  ) => Subscription;\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\nTransportFoo.open(descriptor).then(transport => ...)\n   */\n  static +open: (\n    descriptor: Descriptor,\n    timeout?: number\n  ) => Promise<Transport<Descriptor>>;\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu: Buffer): Promise<Buffer> {\n    throw new Error(\"exchange not implemented\");\n  }\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  setScrambleKey(_key: string) {}\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName: string, cb: Function) {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: Function) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: *) {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout: number) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data,\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n    if (!statusList.some((s) => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\nTransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout?: number = 3000,\n    listenTimeout?: number\n  ): Promise<Transport<Descriptor>> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: (e) => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: (e) => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        },\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: ?Promise<void>;\n\n  // $FlowFixMe\n  exchangeAtomicImpl = async (f) => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportRaceCondition(\n        \"An action was already pending on the Ledger device. Please deny or reconnect.\"\n      );\n    }\n    let resolveBusy;\n    const busyPromise = new Promise((r) => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    let unresponsiveReached = false;\n    const timeout = setTimeout(() => {\n      unresponsiveReached = true;\n      this.emit(\"unresponsive\");\n    }, this.unresponsiveTimeout);\n    try {\n      const res = await f();\n      if (unresponsiveReached) {\n        this.emit(\"responsive\");\n      }\n      return res;\n    } finally {\n      clearTimeout(timeout);\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Object,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock = null;\n  decorateAppAPIMethod<R, A: any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: *,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n"]},"metadata":{},"sourceType":"module"}
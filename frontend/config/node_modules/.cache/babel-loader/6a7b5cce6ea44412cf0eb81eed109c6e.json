{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeToArray } from '../util/subscribeToArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nexport function fromArray(input, scheduler) {\n  if (!scheduler) {\n    return new Observable(subscribeToArray(input));\n  } else {\n    return scheduleArray(input, scheduler);\n  }\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,gBAAT,QAA8B,0BAA9B;AAEA,SAAMC,aAAN,QAA6B,4BAA7B;OACE,SAAKC,SAAL,CAAgBC,KAAhB,EAAgBC,SAAhB,EAAgB;MACd,YAAW;IACZ;SACC;IACD;EACF","names":["Observable","subscribeToArray","scheduleArray","fromArray","input","scheduler"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/observable/fromArray.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { subscribeToArray } from '../util/subscribeToArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return scheduleArray(input, scheduler);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const {\n  Contract\n} = require(\"../../contract/index.js\");\n\nconst {\n  Cell\n} = require(\"../../boc\");\n\nconst {\n  Address,\n  BN\n} = require(\"../../utils\");\n\nconst {\n  parseAddress\n} = require('./../token/nft/NftUtils.js');\n\nconst {\n  dnsResolve,\n  categoryToBN\n} = require(\"./DnsUtils.js\");\n\nconstn\nclass DnsItem extends Contract {\n  /**\n   * @param provider\n   * @param options   {{index: BN, collectionAddress: Address, address?: Address | string, code?: Cell}}\n   */\n  constructor(provider, options) {\n    options.wc = 0;\n    options.code = options.code || Cell.oneFromBoc(DNS_ITEM_CODE_HEX);\n    super(provider, options);\n    this.methods.getData = this.getData.bind(this);\n    this.methods.getDomain = this.getDomain.bind(this);\n    this.methods.getAuctionInfo = this.getAuctionInfo.bind(this);\n    this.methods.getLastFillUpTime = this.getLastFillUpTime.bind(this);\n    this.methods.resolve = this.resolve.bind(this);\n  }\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains nft data\n   */\n\n\n  createDataCell() {\n    const cell = new Cell();\n    cell.bits.writeUint(this.options.index, 256);\n    cell.bits.writeAddress(this.options.collectionAddress);\n    return cell;\n  }\n  /**\n   * @return {Promise<{isInitialized: boolean, index: BN, collectionAddress: Address|null, ownerAddress: Address|null, contentCell: Cell}>}\n   */\n\n\n  async getData() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_nft_data');\n    const isInitialized = result[0].toNumber() === -1;\n    const index = result[1];\n    const collectionAddress = parseAddress(result[2]);\n    const ownerAddress = isInitialized ? parseAddress(result[3]) : null;\n    const contentCell = result[4];\n    return {\n      isInitialized,\n      index,\n      collectionAddress,\n      ownerAddress,\n      contentCell\n    };\n  }\n  /**\n   * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array, responseAddress: Address}}\n   */\n\n\n  async createTransferBody(params) {\n    const cell = new Cell();\n    cell.bits.writeUint(0x5fcc3d14, 32); // transfer op\n\n    cell.bits.writeUint(params.queryId || 0, 64);\n    cell.bits.writeAddress(params.newOwnerAddress);\n    cell.bits.writeAddress(params.responseAddress);\n    cell.bits.writeBit(false); // null custom_payload\n\n    cell.bits.writeCoins(params.forwardAmount || new BN(0));\n    cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n\n    if (params.forwardPayload) {\n      cell.bits.writeBytes(params.forwardPayload);\n    }\n\n    return cell;\n  }\n  /**\n   * params   {{queryId?: number}}\n   * @return {Cell}\n   */\n\n\n  createGetStaticDataBody(params) {\n    const body = new Cell();\n    body.bits.writeUint(0x2fcb26a2, 32); // OP\n\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n\n    return body;\n  }\n  /**\n   * @return {Promise<string>}\n   */\n\n\n  async getDomain() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_domain');\n    return new TextDecoder().decode(result.bits.array.buffer);\n  }\n  /**\n   * @return {Promise<{maxBidAddress: Address|null, maxBidAmount: BN, auctionEndTime: number}>}\n   */\n\n\n  async getAuctionInfo() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_auction_info');\n    const maxBidAddress = parseAddress(result[0]);\n    const maxBidAmount = result[1];\n    const auctionEndTime = result[2].toNumber();\n    return {\n      maxBidAddress,\n      maxBidAmount,\n      auctionEndTime\n    };\n  }\n  /**\n   * @return {Promise<number>}\n   */\n\n\n  async getLastFillUpTime() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_last_fill_up_time');\n    return result.toNumber();\n  }\n  /**\n   * @param domain    {string} e.g \"sub.alice.ton\"\n   * @param category?  {string} category of requested DNS record, null for all categories\n   * @param oneStep? {boolean} non-recursive\n   * @returns {Promise<Cell | Address | BN | null>}\n   */\n\n\n  async resolve(domain, category, oneStep) {\n    const myAddress = await this.getAddress();\n    return dnsResolve(this.provider, myAddress.toString(), domain, category, oneStep);\n  }\n\n}\n/**\n * params   {{category: string, value: Cell|null, queryId?: number}}\n * @return {Cell}\n */\n\n\nDnsItem.createChangeContentEntryBody = async params => {\n  const body = new Cell();\n  body.bits.writeUint(10, 32); // OP\n\n  body.bits.writeUint(params.queryId || 0, 64); // query_id\n\n  body.bits.writeUint(await categoryToBN(params.category), 256);\n\n  if (params.value) {\n    body.refs[0] = params.value;\n  }\n\n  return body;\n};\n\nDnsItem.codeHex = DNS_ITEM_CODE_HEX;\nmodule.exports = {\n  DnsItem: DnsItem\n};","map":{"version":3,"names":["Contract","require","Cell","Address","BN","parseAddress","dnsResolve","categoryToBN","DNS_ITEM_CODE_HEX","DnsItem","constructor","provider","options","wc","code","oneFromBoc","methods","getData","bind","getDomain","getAuctionInfo","getLastFillUpTime","resolve","createDataCell","cell","bits","writeUint","index","writeAddress","collectionAddress","myAddress","getAddress","result","call2","toString","isInitialized","toNumber","ownerAddress","contentCell","createTransferBody","params","queryId","newOwnerAddress","responseAddress","writeBit","writeCoins","forwardAmount","forwardPayload","writeBytes","createGetStaticDataBody","body","TextDecoder","decode","array","buffer","maxBidAddress","maxBidAmount","auctionEndTime","domain","category","oneStep","createChangeContentEntryBody","value","refs","codeHex","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/contract/dns/DnsItem.js"],"sourcesContent":["const {Contract} = require(\"../../contract/index.js\");\nconst {Cell} = require(\"../../boc\");\nconst {Address, BN} = require(\"../../utils\");\nconst {parseAddress} = require('./../token/nft/NftUtils.js');\nconst {dnsResolve, categoryToBN} = require(\"./DnsUtils.js\")\n\nconstn\nclass DnsItem extends Contract {\n    /**\n     * @param provider\n     * @param options   {{index: BN, collectionAddress: Address, address?: Address | string, code?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        options.code = options.code || Cell.oneFromBoc(DNS_ITEM_CODE_HEX);\n        super(provider, options);\n\n        this.methods.getData = this.getData.bind(this);\n        this.methods.getDomain = this.getDomain.bind(this);\n        this.methods.getAuctionInfo = this.getAuctionInfo.bind(this);\n        this.methods.getLastFillUpTime = this.getLastFillUpTime.bind(this);\n        this.methods.resolve = this.resolve.bind(this);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains nft data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeUint(this.options.index, 256);\n        cell.bits.writeAddress(this.options.collectionAddress);\n        return cell;\n    }\n\n    /**\n     * @return {Promise<{isInitialized: boolean, index: BN, collectionAddress: Address|null, ownerAddress: Address|null, contentCell: Cell}>}\n     */\n    async getData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_nft_data');\n\n        const isInitialized = result[0].toNumber() === -1;\n        const index = result[1];\n        const collectionAddress = parseAddress(result[2]);\n        const ownerAddress = isInitialized ? parseAddress(result[3]) : null;\n        const contentCell = result[4];\n\n        return {isInitialized, index, collectionAddress, ownerAddress, contentCell};\n    }\n\n    /**\n     * @param params    {{queryId?: number, newOwnerAddress: Address, forwardAmount?: BN, forwardPayload?: Uint8Array, responseAddress: Address}}\n     */\n    async createTransferBody(params) {\n        const cell = new Cell();\n        cell.bits.writeUint(0x5fcc3d14, 32); // transfer op\n        cell.bits.writeUint(params.queryId || 0, 64);\n        cell.bits.writeAddress(params.newOwnerAddress);\n        cell.bits.writeAddress(params.responseAddress);\n        cell.bits.writeBit(false); // null custom_payload\n        cell.bits.writeCoins(params.forwardAmount || new BN(0));\n        cell.bits.writeBit(false); // forward_payload in this slice, not separate cell\n\n        if (params.forwardPayload) {\n            cell.bits.writeBytes(params.forwardPayload);\n        }\n        return cell;\n    }\n\n    /**\n     * params   {{queryId?: number}}\n     * @return {Cell}\n     */\n    createGetStaticDataBody(params) {\n        const body = new Cell();\n        body.bits.writeUint(0x2fcb26a2, 32); // OP\n        body.bits.writeUint(params.queryId || 0, 64); // query_id\n        return body;\n    }\n\n    /**\n     * @return {Promise<string>}\n     */\n    async getDomain() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_domain');\n        return new TextDecoder().decode(result.bits.array.buffer);\n    }\n\n    /**\n     * @return {Promise<{maxBidAddress: Address|null, maxBidAmount: BN, auctionEndTime: number}>}\n     */\n    async getAuctionInfo() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_auction_info');\n        const maxBidAddress = parseAddress(result[0]);\n        const maxBidAmount = result[1];\n        const auctionEndTime = result[2].toNumber();\n        return {maxBidAddress, maxBidAmount, auctionEndTime};\n    }\n\n    /**\n     * @return {Promise<number>}\n     */\n    async getLastFillUpTime() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_last_fill_up_time');\n        return result.toNumber();\n    }\n\n    /**\n     * @param domain    {string} e.g \"sub.alice.ton\"\n     * @param category?  {string} category of requested DNS record, null for all categories\n     * @param oneStep? {boolean} non-recursive\n     * @returns {Promise<Cell | Address | BN | null>}\n     */\n    async resolve(domain, category, oneStep) {\n        const myAddress = await this.getAddress();\n        return dnsResolve(this.provider, myAddress.toString(), domain, category, oneStep);\n    }\n}\n\n/**\n * params   {{category: string, value: Cell|null, queryId?: number}}\n * @return {Cell}\n */\nDnsItem.createChangeContentEntryBody = async (params) => {\n    const body = new Cell();\n    body.bits.writeUint(10, 32); // OP\n    body.bits.writeUint(params.queryId || 0, 64); // query_id\n    body.bits.writeUint(await categoryToBN(params.category), 256);\n    if (params.value) {\n        body.refs[0] = params.value;\n    }\n    return body;\n}\n\nDnsItem.codeHex = DNS_ITEM_CODE_HEX;\n\nmodule.exports = {DnsItem: DnsItem};"],"mappings":"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"},"metadata":{},"sourceType":"script"}
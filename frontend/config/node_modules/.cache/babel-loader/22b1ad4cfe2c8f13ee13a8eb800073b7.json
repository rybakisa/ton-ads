{"ast":null,"code":"const {\n  Contract\n} = require(\"../../index\");\n\nconst {\n  Cell\n} = require(\"../../../boc\");\n\nconst {\n  parseAddress\n} = require(\"./NftUtils\");\n\nconst {\n  BN\n} = require(\"../../../utils\");\n\nconstn/**\n * Not release - will change\n */\n\nclass NftSale extends Contract {\n  /**\n   * @param provider\n   * @param options   {{marketplaceAddress: Address, nftAddress: Address, fullPrice: BN, marketplaceFee: BN, royaltyAddress: Address, royaltyAmount: BN, address?: Address | string, code?: Cell}}\n   */\n  constructor(provider, options) {\n    options.wc = 0;\n    options.code = options.code || Cell.oneFromBoc(NFT_SALE_HEX_CODE);\n    super(provider, options);\n    this.methods.getData = this.getData.bind(this);\n  }\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains nft sale data\n   */\n\n\n  createDataCell() {\n    const cell = new Cell();\n    cell.bits.writeAddress(this.options.marketplaceAddress);\n    cell.bits.writeAddress(this.options.nftAddress);\n    cell.bits.writeAddress(null); // nft_owner_address\n\n    cell.bits.writeCoins(this.options.fullPrice);\n    const feesCell = new Cell();\n    feesCell.bits.writeCoins(this.options.marketplaceFee);\n    feesCell.bits.writeAddress(this.options.royaltyAddress);\n    feesCell.bits.writeCoins(this.options.royaltyAmount);\n    cell.refs[0] = feesCell;\n    return cell;\n  }\n\n  async getData() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_sale_data');\n    const marketplaceAddress = parseAddress(result[0]);\n    const nftAddress = parseAddress(result[1]);\n    const nftOwnerAddress = parseAddress(result[2]);\n    const fullPrice = result[3];\n    const marketplaceFee = result[4];\n    const royaltyAddress = parseAddress(result[5]);\n    const royaltyAmount = result[6];\n    return {\n      marketplaceAddress,\n      nftAddress,\n      nftOwnerAddress,\n      fullPrice,\n      marketplaceFee,\n      royaltyAddress,\n      royaltyAmount\n    };\n  }\n  /**\n   * @param params    {{queryId?: number}}\n   */\n\n\n  async createCancelBody(params) {\n    const cell = new Cell();\n    cell.bits.writeUint(3, 32); // cancel op\n\n    cell.bits.writeUint(params.queryId || 0, 64);\n    return cell;\n  }\n\n}\n\nNftSale.codeHex = NFT_SALE_HEX_CODE;\nmodule.exports = {\n  NftSale\n};","map":{"version":3,"names":["Contract","require","Cell","parseAddress","BN","NFT_SALE_HEX_CODE","NftSale","constructor","provider","options","wc","code","oneFromBoc","methods","getData","bind","createDataCell","cell","bits","writeAddress","marketplaceAddress","nftAddress","writeCoins","fullPrice","feesCell","marketplaceFee","royaltyAddress","royaltyAmount","refs","myAddress","getAddress","result","call2","toString","nftOwnerAddress","createCancelBody","params","writeUint","queryId","codeHex","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/contract/token/nft/NftSale.js"],"sourcesContent":["const {Contract} = require(\"../../index\");\nconst {Cell} = require(\"../../../boc\");\nconst {parseAddress} = require(\"./NftUtils\");\nconst {BN} = require(\"../../../utils\");\n\nconstn\n/**\n * Not release - will change\n */\nclass NftSale extends Contract {\n\n    /**\n     * @param provider\n     * @param options   {{marketplaceAddress: Address, nftAddress: Address, fullPrice: BN, marketplaceFee: BN, royaltyAddress: Address, royaltyAmount: BN, address?: Address | string, code?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        options.code = options.code || Cell.oneFromBoc(NFT_SALE_HEX_CODE);\n        super(provider, options);\n\n        this.methods.getData = this.getData.bind(this);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains nft sale data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.bits.writeAddress(this.options.marketplaceAddress);\n        cell.bits.writeAddress(this.options.nftAddress);\n        cell.bits.writeAddress(null); // nft_owner_address\n        cell.bits.writeCoins(this.options.fullPrice);\n\n        const feesCell = new Cell();\n        feesCell.bits.writeCoins(this.options.marketplaceFee);\n        feesCell.bits.writeAddress(this.options.royaltyAddress);\n        feesCell.bits.writeCoins(this.options.royaltyAmount);\n        cell.refs[0] = feesCell;\n\n        return cell;\n    }\n\n    async getData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_sale_data');\n\n        const marketplaceAddress = parseAddress(result[0]);\n        const nftAddress = parseAddress(result[1]);\n        const nftOwnerAddress = parseAddress(result[2]);\n        const fullPrice = result[3];\n        const marketplaceFee = result[4];\n        const royaltyAddress = parseAddress(result[5]);\n        const royaltyAmount = result[6];\n\n        return {marketplaceAddress, nftAddress, nftOwnerAddress, fullPrice, marketplaceFee, royaltyAddress, royaltyAmount};\n    }\n\n    /**\n     * @param params    {{queryId?: number}}\n     */\n    async createCancelBody(params) {\n        const cell = new Cell();\n        cell.bits.writeUint(3, 32); // cancel op\n        cell.bits.writeUint(params.queryId || 0, 64);\n        return cell;\n    }\n\n}\n\nNftSale.codeHex = NFT_SALE_HEX_CODE;\n\nmodule.exports = {NftSale};"],"mappings":"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"},"metadata":{},"sourceType":"script"}
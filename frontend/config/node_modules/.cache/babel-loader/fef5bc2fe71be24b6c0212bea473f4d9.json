{"ast":null,"code":"const {\n  BN,\n  nacl,\n  sha256,\n  fromNano,\n  toNano,\n  bytesToHex,\n  hexToBytes,\n  stringToBytes,\n  crc32c,\n  crc16,\n  concatBytes,\n  bytesToBase64,\n  base64ToBytes,\n  base64toString,\n  stringToBase64,\n  compareBytes,\n  readNBytesUIntFromArray,\n  keyPairFromSeed,\n  newKeyPair,\n  newSeed\n} = require(\"./Utils\");\n\nconst Address = require(\"./Address\").default; // ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=data\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=foo%3A%2F%2Fbar%2C%2Fbaz%3Famount%3D1%26text%3D%D1%80%D1%83\n\n/**\n * @param url {string}\n * @return {{address: string, amount?: string, text?: string}}\n * @throws if invalid url\n */\n\n\nfunction parseTransferUrl(url) {\n  const PREFIX = 'ton://transfer/';\n\n  if (!url.startsWith(PREFIX)) {\n    throw new Error('must starts with ' + PREFIX);\n  }\n\n  const arr = url.substring(PREFIX.length).split('?');\n\n  if (arr.length > 2) {\n    throw new Error('multiple \"?\"');\n  }\n\n  const address = arr[0];\n\n  if (!Address.isValid(address)) {\n    throw new Error('invalid address format ' + address);\n  }\n\n  const result = {\n    address: address\n  };\n  const rest = arr[1];\n\n  if (rest && rest.length) {\n    const pairs = rest.split('&').map(s => s.split('='));\n\n    for (const pair of pairs) {\n      if (pair.length !== 2) throw new Error('invalid url pair');\n      const key = pair[0];\n      const value = pair[1];\n\n      if (key === 'amount') {\n        if (result.amount) {\n          throw new Error('amount already set');\n        }\n\n        const bn = new BN(value);\n\n        if (bn.isNeg()) {\n          throw new Error('negative amount');\n        }\n\n        result.amount = value;\n      } else if (key === 'text') {\n        if (result.text) {\n          throw new Error('text already set');\n        }\n\n        result.text = decodeURIComponent(value);\n      } else {\n        throw new Error('unknown url var ' + key);\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * @param address   {string}\n * @param amount?    {string} in nano\n * @param text?   {string}\n * @return {string}\n */\n\n\nfunction formatTransferUrl(address, amount, text) {\n  let url = 'ton://transfer/' + address;\n  const params = [];\n\n  if (amount) {\n    params.push('amount=' + amount);\n  }\n\n  if (text) {\n    params.push('text=' + encodeURIComponent(text));\n  }\n\n  if (params.length === 0) return url;\n  return url + '?' + params.join('&');\n}\n\nmodule.exports = {\n  Address,\n  BN,\n  nacl,\n  sha256,\n  fromNano,\n  toNano,\n  bytesToHex,\n  hexToBytes,\n  stringToBytes,\n  crc32c,\n  crc16,\n  concatBytes,\n  bytesToBase64,\n  base64ToBytes,\n  base64toString,\n  stringToBase64,\n  compareBytes,\n  readNBytesUIntFromArray,\n  parseTransferUrl,\n  formatTransferUrl,\n  keyPairFromSeed,\n  newKeyPair,\n  newSeed\n};","map":{"version":3,"names":["BN","nacl","sha256","fromNano","toNano","bytesToHex","hexToBytes","stringToBytes","crc32c","crc16","concatBytes","bytesToBase64","base64ToBytes","base64toString","stringToBase64","compareBytes","readNBytesUIntFromArray","keyPairFromSeed","newKeyPair","newSeed","require","Address","default","parseTransferUrl","url","PREFIX","startsWith","Error","arr","substring","length","split","address","isValid","result","rest","pairs","map","s","pair","key","value","amount","bn","isNeg","text","decodeURIComponent","formatTransferUrl","params","push","encodeURIComponent","join","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/utils/index.js"],"sourcesContent":["const {\n    BN,\n    nacl,\n    sha256,\n    fromNano,\n    toNano,\n    bytesToHex,\n    hexToBytes,\n    stringToBytes,\n    crc32c,\n    crc16,\n    concatBytes,\n    bytesToBase64,\n    base64ToBytes,\n    base64toString,\n    stringToBase64,\n    compareBytes,\n    readNBytesUIntFromArray,\n    keyPairFromSeed,\n    newKeyPair,\n    newSeed\n} = require(\"./Utils\");\n\nconst Address = require(\"./Address\").default;\n\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=data\n// ton://transfer/EQA0i8-CdGnF_DhUHHf92R1ONH6sIA9vLZ_WLcCIhfBBXwtG?amount=1000000000&text=foo%3A%2F%2Fbar%2C%2Fbaz%3Famount%3D1%26text%3D%D1%80%D1%83\n/**\n * @param url {string}\n * @return {{address: string, amount?: string, text?: string}}\n * @throws if invalid url\n */\nfunction parseTransferUrl(url) {\n    const PREFIX = 'ton://transfer/';\n\n    if (!url.startsWith(PREFIX)) {\n        throw new Error('must starts with ' + PREFIX);\n    }\n\n    const arr = url.substring(PREFIX.length).split('?');\n    if (arr.length > 2) {\n        throw new Error('multiple \"?\"');\n    }\n\n    const address = arr[0];\n    if (!Address.isValid(address)) {\n        throw new Error('invalid address format ' + address);\n    }\n    const result = {\n        address: address\n    };\n\n    const rest = arr[1];\n    if (rest && rest.length) {\n        const pairs = rest.split('&').map(s => s.split('='));\n\n        for (const pair of pairs) {\n            if (pair.length !== 2) throw new Error('invalid url pair');\n            const key = pair[0];\n            const value = pair[1];\n\n            if (key === 'amount') {\n                if (result.amount) {\n                    throw new Error('amount already set');\n                }\n                const bn = new BN(value);\n                if (bn.isNeg()) {\n                    throw new Error('negative amount');\n                }\n                result.amount = value;\n            } else if (key === 'text') {\n                if (result.text) {\n                    throw new Error('text already set');\n                }\n                result.text = decodeURIComponent(value);\n            } else {\n                throw new Error('unknown url var ' + key);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * @param address   {string}\n * @param amount?    {string} in nano\n * @param text?   {string}\n * @return {string}\n */\nfunction formatTransferUrl(address, amount, text) {\n    let url = 'ton://transfer/' + address;\n\n    const params = [];\n\n    if (amount) {\n        params.push('amount=' + amount);\n    }\n    if (text) {\n        params.push('text=' + encodeURIComponent(text));\n    }\n\n    if (params.length === 0) return url;\n\n    return url + '?' + params.join('&');\n}\n\nmodule.exports = {\n    Address,\n    BN,\n    nacl,\n    sha256,\n    fromNano,\n    toNano,\n    bytesToHex,\n    hexToBytes,\n    stringToBytes,\n    crc32c,\n    crc16,\n    concatBytes,\n    bytesToBase64,\n    base64ToBytes,\n    base64toString,\n    stringToBase64,\n    compareBytes,\n    readNBytesUIntFromArray,\n    parseTransferUrl,\n    formatTransferUrl,\n    keyPairFromSeed,\n    newKeyPair,\n    newSeed\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}
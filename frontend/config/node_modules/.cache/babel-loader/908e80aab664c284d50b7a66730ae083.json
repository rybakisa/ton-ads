{"ast":null,"code":"const {\n  Contract\n} = require(\"../../contract/index.js\");\n\nconst {\n  Cell\n} = require(\"../../boc\");\n\nconst {\n  Address\n} = require(\"../../utils\");\n\nconst {\n  parseAddress\n} = require('../token/nft/NftUtils.js');\n\nconst {\n  dnsResolve\n} = require(\"./DnsUtils.js\");\n\nconst {\n  parseOffchainUriCell\n} = require(\"../token/nft/NftUtils\");\n\nclass DnsCollection extends Contract {\n  /**\n   * @param provider\n   * @param options   {{collectionContent: Cell, dnsItemCodeHex: string, address?: Address | string, code?: Cell}}\n   */\n  constructor(provider, options) {\n    options.wc = 0;\n    options.code = options.code || Cell.oneFromBocn    super(provider, options);\n    if (!options.collectionContent && !options.address) throw new Error('required collectionContent cell');\n    this.methods.getCollectionData = this.getCollectionData.bind(this);\n    this.methods.getNftItemAddressByIndex = this.getNftItemAddressByIndex.bind(this);\n    this.methods.getNftItemContent = this.getNftItemContent.bind(this);\n    this.methods.resolve = this.resolve.bind(this);\n  }\n  /**\n   * @override\n   * @private\n   * @return {Cell} cell contains dns collection data\n   */\n\n\n  createDataCell() {\n    const cell = new Cell();\n    cell.refs[0] = this.options.collectionContent;\n    cell.refs[1] = Cell.oneFromBoc(this.options.dnsItemCodeHex);\n    return cell;\n  }\n  /**\n   * @return {Promise<{collectionContent: Cell}>}\n   */\n\n\n  async getCollectionData() {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_collection_data');\n    const collectionContent = result[1];\n    const collectionContentUri = parseOffchainUriCell(collectionContent);\n    return {\n      collectionContentUri,\n      collectionContent,\n      ownerAddress: null,\n      nextItemIndex: 0\n    };\n  }\n  /**\n   * @param nftItem   {DnsItem}\n   * @return {Promise<{isInitialized: boolean, index: BN, collectionAddress: Address|null, ownerAddress: Address|null, contentCell: Cell}>}\n   */\n\n\n  async getNftItemContent(nftItem) {\n    const nftData = await nftItem.getData();\n    return nftData;\n  }\n  /**\n   * @param index {BN}\n   * @return {Promise<Address>}\n   */\n\n\n  async getNftItemAddressByIndex(index) {\n    const myAddress = await this.getAddress();\n    const result = await this.provider.call2(myAddress.toString(), 'get_nft_address_by_index', [['num', index.toString()]]);\n    return parseAddress(result);\n  }\n  /**\n   * @param domain    {string} e.g \"sub.alice.ton\"\n   * @param category?  {string} category of requested DNS record, null for all categories\n   * @param oneStep? {boolean} non-recursive\n   * @returns {Promise<Cell | Address | BN | null>}\n   */\n\n\n  async resolve(domain, category, oneStep) {\n    const myAddress = await this.getAddress();\n    return dnsResolve(this.provider, myAddress.toString(), domain, category, oneStep);\n  }\n\n}\n\nmodule.exports = {\n  DnsCollection: DnsCollection\n};","map":{"version":3,"names":["Contract","require","Cell","Address","parseAddress","dnsResolve","parseOffchainUriCell","DnsCollection","constructor","provider","options","wc","code","oneFromBoc","collectionContent","address","Error","methods","getCollectionData","bind","getNftItemAddressByIndex","getNftItemContent","resolve","createDataCell","cell","refs","dnsItemCodeHex","myAddress","getAddress","result","call2","toString","collectionContentUri","ownerAddress","nextItemIndex","nftItem","nftData","getData","index","domain","category","oneStep","module","exports"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/tonweb/src/contract/dns/DnsCollection.js"],"sourcesContent":["const {Contract} = require(\"../../contract/index.js\");\nconst {Cell} = require(\"../../boc\");\nconst {Address} = require(\"../../utils\");\nconst {parseAddress} = require('../token/nft/NftUtils.js');\nconst {dnsResolve} = require(\"./DnsUtils.js\")\nconst {parseOffchainUriCell} = require(\"../token/nft/NftUtils\");\n\nclass DnsCollection extends Contract {\n    /**\n     * @param provider\n     * @param options   {{collectionContent: Cell, dnsItemCodeHex: string, address?: Address | string, code?: Cell}}\n     */\n    constructor(provider, options) {\n        options.wc = 0;\n        options.code = options.code || Cell.oneFromBocn        super(provider, options);\n\n        if (!options.collectionContent && !options.address) throw new Error('required collectionContent cell');\n\n        this.methods.getCollectionData = this.getCollectionData.bind(this);\n        this.methods.getNftItemAddressByIndex = this.getNftItemAddressByIndex.bind(this);\n        this.methods.getNftItemContent = this.getNftItemContent.bind(this);\n        this.methods.resolve = this.resolve.bind(this);\n    }\n\n    /**\n     * @override\n     * @private\n     * @return {Cell} cell contains dns collection data\n     */\n    createDataCell() {\n        const cell = new Cell();\n        cell.refs[0] = this.options.collectionContent;\n        cell.refs[1] = Cell.oneFromBoc(this.options.dnsItemCodeHex);\n        return cell;\n    }\n\n    /**\n     * @return {Promise<{collectionContent: Cell}>}\n     */\n    async getCollectionData() {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_collection_data');\n\n        const collectionContent = result[1];\n        const collectionContentUri = parseOffchainUriCell(collectionContent);\n\n        return {collectionContentUri, collectionContent, ownerAddress: null, nextItemIndex: 0};\n    }\n\n    /**\n     * @param nftItem   {DnsItem}\n     * @return {Promise<{isInitialized: boolean, index: BN, collectionAddress: Address|null, ownerAddress: Address|null, contentCell: Cell}>}\n     */\n    async getNftItemContent(nftItem) {\n        const nftData = await nftItem.getData();\n        return nftData;\n    }\n\n    /**\n     * @param index {BN}\n     * @return {Promise<Address>}\n     */\n    async getNftItemAddressByIndex(index) {\n        const myAddress = await this.getAddress();\n        const result = await this.provider.call2(myAddress.toString(), 'get_nft_address_by_index', [['num', index.toString()]]);\n\n        return parseAddress(result);\n    }\n\n    /**\n     * @param domain    {string} e.g \"sub.alice.ton\"\n     * @param category?  {string} category of requested DNS record, null for all categories\n     * @param oneStep? {boolean} non-recursive\n     * @returns {Promise<Cell | Address | BN | null>}\n     */\n    async resolve(domain, category, oneStep) {\n        const myAddress = await this.getAddress();\n        return dnsResolve(this.provider, myAddress.toString(), domain, category, oneStep);\n    }\n}\n\nmodule.exports = {DnsCollection: DnsCollection};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function window(windowBoundaries) {\n  return function windowOperatorFunction(source) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nvar WindowOperator = /*@__PURE__*/function () {\n  function WindowOperator(windowBoundaries) {\n    this.windowBoundaries = windowBoundaries;\n  }\n\n  WindowOperator.prototype.call = function (subscriber, source) {\n    var windowSubscriber = new WindowSubscriber(subscriber);\n    var sourceSubscription = source.subscribe(windowSubscriber);\n\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n    }\n\n    return sourceSubscription;\n  };\n\n  return WindowOperator;\n}();\n\nvar WindowSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WindowSubscriber, _super);\n\n  function WindowSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.window = new Subject();\n    destination.next(_this.window);\n    return _this;\n  }\n\n  WindowSubscriber.prototype.notifyNext = function () {\n    this.openWindow();\n  };\n\n  WindowSubscriber.prototype.notifyError = function (error) {\n    this._error(error);\n  };\n\n  WindowSubscriber.prototype.notifyComplete = function () {\n    this._complete();\n  };\n\n  WindowSubscriber.prototype._next = function (value) {\n    this.window.next(value);\n  };\n\n  WindowSubscriber.prototype._error = function (err) {\n    this.window.error(err);\n    this.destination.error(err);\n  };\n\n  WindowSubscriber.prototype._complete = function () {\n    this.window.complete();\n    this.destination.complete();\n  };\n\n  WindowSubscriber.prototype._unsubscribe = function () {\n    this.window = null;\n  };\n\n  WindowSubscriber.prototype.openWindow = function () {\n    var prevWindow = this.window;\n\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    var destination = this.destination;\n    var newWindow = this.window = new Subject();\n    destination.next(newWindow);\n  };\n\n  return WindowSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAwB,OAAxB;AAGA,SAASC,OAAT,QAAS,YAAT;AA6CA,SAAMC,qBAAN,EAA0BC,cAA1B,EAA2DC,qBAA3D,QAA2D,mBAA3D;OACE,SAAOC,MAAP,CAAgBC,gBAAhB,EAAgB;SACd,SAAOC,sBAAP,CAAuBC,MAAvB,EAAsC;IACtC;EACH;AAED;;IAEEC,8BAAoB,YAAiC;WAAjCA;IACnB;EAED;;gBACQ,WAAgBC,OAAO,sBAAiBF,MAAjB,EAA6B;IAC1D,IAAMG,mBAAkB,IAAGC,gBAAH,CAAoBC,UAApB,CAAxB;IACA,IAAIC,kBAAC,GAAmBN,MAAM,CAAEO,SAAR,CAAQJ,gBAAR,CAAxB;;QACE,mBAAiB,CAAGK,QAAC;MACtBL;IACD;;IACD;EACH;;EAbA,OAaCF,cAbD;AAoBA,CAlBsB;;IAkBYG,0CAA6BK,MAA7B,EAA6B;EAI7DjB,oCAAYiB,MAAZ;;WAAAL,iBACEM,aAAM;IAHA,YAAMD,MAAe,CAAIP,IAAnB,CAAmB,IAAnB,EAAgCQ,WAAhC,KAAgC,IAAtC;;IAINC,eAAY,IAAKlB,OAAL,EAAZ;;IACD;EAED;;kBACO,WAAamB;IACnB;EAED;;kBACc,WAAOC;IACpB;EAED;;kBACO,WAAYC;IAClB;EAES;;kBACI,WAAWC,QAAC;IACzB;EAES;;kBACI,WAAWC;IACvB,KAAKnB,MAAL,CAAKoB,KAAL,CAAiBC,GAAjB;IACD;EAES;;kBACI,WAAWC;IACvB,KAAKtB,MAAL,CAAKuB,QAAL;IACD;EAGD;;kBACa,WAASC;IACrB;EAEO;;kBACA,WAAkBC,aAAO;IAC/B,IAAIC,UAAU,GAAE,WAAhB;;QACEA,YAAW;MACZA;IACD;;IACA,IAAMb,WAAS,GAAG,KAAKA,WAAvB;IACA,aAAY,GAAK,KAACb,MAAD,GAAY,aAA7B;IACDa;EACH;;EAjDkC;CAAA","names":["tslib_1","Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","window","windowBoundaries","windowOperatorFunction","source","WindowOperator","call","windowSubscriber","WindowSubscriber","subscriber","sourceSubscription","subscribe","closed","_super","destination","_this","notifyNext","notifyError","notifyComplete","_next","_error","error","err","_complete","complete","_unsubscribe","openWindow","prevWindow"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/window.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Operator } from '../Operator';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n * In every window of 1 second each, emit at most 2 click events\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { window, mergeAll, map, take } from 'rxjs/operators';\n *\n *  const clicks = fromEvent(document, 'click');\n *  const sec = interval(1000);\n *  const result = clicks.pipe(\n *      window(sec),\n *      map(win => win.pipe(take(2))), // each window has at most 2 emissions\n *      mergeAll(),              // flatten the Observable-of-Observables\n *  );\n *  result.subscribe(x => console.log(x));\n * ```\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends SimpleOuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any): void {\n    this._error(error);\n  }\n\n  notifyComplete(): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error!(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete!();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.window = null!;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next!(newWindow);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
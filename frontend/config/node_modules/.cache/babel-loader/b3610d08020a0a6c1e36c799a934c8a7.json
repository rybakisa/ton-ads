{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport var defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\nexport function throttle(durationSelector, config) {\n  if (config === void 0) {\n    config = defaultThrottleConfig;\n  }\n\n  return function (source) {\n    return source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing));\n  };\n}\n\nvar ThrottleOperator = /*@__PURE__*/function () {\n  function ThrottleOperator(durationSelector, leading, trailing) {\n    this.durationSelector = durationSelector;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n\n  ThrottleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n  };\n\n  return ThrottleOperator;\n}();\n\nvar ThrottleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ThrottleSubscriber, _super);\n\n  function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.destination = destination;\n    _this.durationSelector = durationSelector;\n    _this._leading = _leading;\n    _this._trailing = _trailing;\n    _this._hasValue = false;\n    return _this;\n  }\n\n  ThrottleSubscriber.prototype._next = function (value) {\n    this._hasValue = true;\n    this._sendValue = value;\n\n    if (!this._throttled) {\n      if (this._leading) {\n        this.send();\n      } else {\n        this.throttle(value);\n      }\n    }\n  };\n\n  ThrottleSubscriber.prototype.send = function () {\n    var _a = this,\n        _hasValue = _a._hasValue,\n        _sendValue = _a._sendValue;\n\n    if (_hasValue) {\n      this.destination.next(_sendValue);\n      this.throttle(_sendValue);\n    }\n\n    this._hasValue = false;\n    this._sendValue = undefined;\n  };\n\n  ThrottleSubscriber.prototype.throttle = function (value) {\n    var duration = this.tryDurationSelector(value);\n\n    if (!!duration) {\n      this.add(this._throttled = innerSubscribe(duration, new SimpleInnerSubscriber(this)));\n    }\n  };\n\n  ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  };\n\n  ThrottleSubscriber.prototype.throttlingDone = function () {\n    var _a = this,\n        _throttled = _a._throttled,\n        _trailing = _a._trailing;\n\n    if (_throttled) {\n      _throttled.unsubscribe();\n    }\n\n    this._throttled = undefined;\n\n    if (_trailing) {\n      this.send();\n    }\n  };\n\n  ThrottleSubscriber.prototype.notifyNext = function () {\n    this.throttlingDone();\n  };\n\n  ThrottleSubscriber.prototype.notifyComplete = function () {\n    this.throttlingDone();\n  };\n\n  return ThrottleSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAMA,OAAO,KAAEA,OAAT,MAAS,OAAT;AAOA,SAAOC,qBAAP,EAAkCC,cAAlC,EAAqDC,qBAArD,QAAqD,mBAArD;OACE,IAAOC,qBAAM;EACbC,SAAQ,IADK;EAEbC;AAFa,CAAb;OAmD0B;EAC1B,UAAO,UAAC,CAAR,EAA6B;IAC9BC;EAED;;EACE;IAAoB,mBACA,qBACiBC,gBADjB,EACiB,gBADjB,EACiB,iBADjB,CADA;EAEiB,CAFrC;;;oBAC2B,GAAP,aAAgB;WAChBC,mCAAiBJ;IACpC;IAED;IACE,gBAAcC,QAAd;EAGD;;EACHG,2BAACC,IAAD,GAAC;IAAA;EAOD,CAPA;;EAOuC;CAhBD;;sBAyBlC,gBAAM,UAAYC,MAAZ,EAAY;SAJE,+BAA0BA;;WAC5BC,mBAAgBC,aAAhBL,kBAA6DM;IAC7D,8BAAiBD,WAAjB,KAAiB,IAAjB;;IACAE;IALZA,yBAAkBP,gBAAlB;;IAOPO;IAESA;IACR,OAAKA,KAAL;;;oBAGU,WAAYC;SACpBC,YAAS;sBACEC;;SACV;eAAMJ;QACL,KAAKK,IAAL;MACD,OACF;QACF;MAEO;IACA;;;oBAEC,WAAgBA,OAAC,YAAY;QAClCC,KAAK;QAAAH,SAAS,KAAY,CAACA;QAAAI;;QAC5BJ;MACG,KAACJ,WAAD,CAAaS,IAAb,CAAmBD,UAAnB;MACA,KAACE,QAAD,CAAcF,UAAd;IACL;;IAEO;IACN,KAAMA,UAAN,GAAiBG,SAAjB;;;oBAEW,WAAKD,WAAa,UAAeL,KAAf,EAAe;QAC3CO;;IACF;MAEO,yCAAmB,WAA3B,IAA4BtB,qBAA5B,CAAoC,IAApC,CAA2B,CAAnB;IACN;;;oBAEC;IAAC;MACA,OAAK,sBAAuBe,KAAvB,CAAL;KADA,QAGDQ;MACF;MAEO;IACA;;;oBAEM,CAACC,2BAAc;QAC1BP;QAAAQ;QAAAC;;IACD,IAAID,UAAJ,EAAe;MAEXA,UAAS,CAAEE,WAAX;;;SAEHF;;IACF;MAED;IACE;EACD;;EAEDhB;IACE,KAAKmB,cAAL;EACD,CAFD;;EAGFnB,6BAACoB,cAAD,GAAC;IAtEsC;GAsEvC;;;CA7DU","names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","defaultThrottleConfig","leading","trailing","config","durationSelector","ThrottleOperator","call","_super","ThrottleSubscriber","destination","_leading","_this","_next","_hasValue","value","send","_a","_sendValue","next","throttle","undefined","duration","err","prototype","_throttled","_trailing","unsubscribe","throttlingDone","notifyComplete"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/throttle.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](throttle.png)\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * ## Example\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { throttle } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttle(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<any>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private _throttled?: Subscription;\n  private _sendValue?: T;\n  private _hasValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this._hasValue = true;\n    this._sendValue = value;\n\n    if (!this._throttled) {\n      if (this._leading) {\n        this.send();\n      } else {\n        this.throttle(value);\n      }\n    }\n  }\n\n  private send() {\n    const { _hasValue, _sendValue } = this;\n    if (_hasValue) {\n      this.destination.next(_sendValue);\n      this.throttle(_sendValue!);\n    }\n    this._hasValue = false;\n    this._sendValue = undefined;\n  }\n\n  private throttle(value: T): void {\n    const duration = this.tryDurationSelector(value);\n    if (!!duration) {\n      this.add(this._throttled = innerSubscribe(duration, new SimpleInnerSubscriber(this)));\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> | null {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  private throttlingDone() {\n    const { _throttled, _trailing } = this;\n    if (_throttled) {\n      _throttled.unsubscribe();\n    }\n    this._throttled = undefined;\n\n    if (_trailing) {\n      this.send();\n    }\n  }\n\n  notifyNext(): void {\n    this.throttlingDone();\n  }\n\n  notifyComplete(): void {\n    this.throttlingDone();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n  var length = arguments.length;\n  var scheduler = async;\n\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  var bufferCreationInterval = null;\n\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  var maxBufferSize = Number.POSITIVE_INFINITY;\n\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source) {\n    return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nvar BufferTimeOperator = /*@__PURE__*/function () {\n  function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    this.bufferTimeSpan = bufferTimeSpan;\n    this.bufferCreationInterval = bufferCreationInterval;\n    this.maxBufferSize = maxBufferSize;\n    this.scheduler = scheduler;\n  }\n\n  BufferTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n  };\n\n  return BufferTimeOperator;\n}();\n\nvar Context = /*@__PURE__*/function () {\n  function Context() {\n    this.buffer = [];\n  }\n\n  return Context;\n}();\n\nvar BufferTimeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferTimeSubscriber, _super);\n\n  function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.bufferTimeSpan = bufferTimeSpan;\n    _this.bufferCreationInterval = bufferCreationInterval;\n    _this.maxBufferSize = maxBufferSize;\n    _this.scheduler = scheduler;\n    _this.contexts = [];\n\n    var context = _this.openContext();\n\n    _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n\n    if (_this.timespanOnly) {\n      var timeSpanOnlyState = {\n        subscriber: _this,\n        context: context,\n        bufferTimeSpan: bufferTimeSpan\n      };\n\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      var closeState = {\n        subscriber: _this,\n        context: context\n      };\n      var creationState = {\n        bufferTimeSpan: bufferTimeSpan,\n        bufferCreationInterval: bufferCreationInterval,\n        subscriber: _this,\n        scheduler: scheduler\n      };\n\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n\n      _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n\n    return _this;\n  }\n\n  BufferTimeSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n    var filledBufferContext;\n\n    for (var i = 0; i < len; i++) {\n      var context_1 = contexts[i];\n      var buffer = context_1.buffer;\n      buffer.push(value);\n\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context_1;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  };\n\n  BufferTimeSubscriber.prototype._error = function (err) {\n    this.contexts.length = 0;\n\n    _super.prototype._error.call(this, err);\n  };\n\n  BufferTimeSubscriber.prototype._complete = function () {\n    var _a = this,\n        contexts = _a.contexts,\n        destination = _a.destination;\n\n    while (contexts.length > 0) {\n      var context_2 = contexts.shift();\n      destination.next(context_2.buffer);\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferTimeSubscriber.prototype._unsubscribe = function () {\n    this.contexts = null;\n  };\n\n  BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n    this.closeContext(context);\n    var closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      var bufferTimeSpan = this.bufferTimeSpan;\n      var timeSpanOnlyState = {\n        subscriber: this,\n        context: context,\n        bufferTimeSpan: bufferTimeSpan\n      };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  };\n\n  BufferTimeSubscriber.prototype.openContext = function () {\n    var context = new Context();\n    this.contexts.push(context);\n    return context;\n  };\n\n  BufferTimeSubscriber.prototype.closeContext = function (context) {\n    this.destination.next(context.buffer);\n    var contexts = this.contexts;\n    var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  };\n\n  return BufferTimeSubscriber;\n}(Subscriber);\n\nfunction dispatchBufferTimeSpanOnly(state) {\n  var subscriber = state.subscriber;\n  var prevContext = state.context;\n\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\nfunction dispatchBufferCreation(state) {\n  var bufferCreationInterval = state.bufferCreationInterval,\n      bufferTimeSpan = state.bufferTimeSpan,\n      subscriber = state.subscriber,\n      scheduler = state.scheduler;\n  var context = subscriber.openContext();\n  var action = this;\n\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {\n      subscriber: subscriber,\n      context: context\n    }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose(arg) {\n  var subscriber = arg.subscriber,\n      context = arg.context;\n  subscriber.closeContext(context);\n}","map":{"version":3,"mappings":"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","names":["tslib_1","async","Subscriber","isScheduler","bufferTime","bufferTimeSpan","length","arguments","scheduler","bufferCreationInterval","maxBufferSize","bufferTimeOperatorFunction","source","BufferTimeOperator","call","Context","BufferTimeSubscriber","_super","destination","_this","subscriber","context","closeState","add","dispatchBufferClose","_next","contexts","len","i","context_1","buffer","value","filledBufferContext","_error","_a","_unsubscribe","prototype","onBufferFull","closeContext","closeAction","unsubscribe","remove","timeSpanOnlyState","openContext","push","next","spliceIndex","dispatchBufferTimeSpanOnly","state","prevContext","dispatchBufferCreation","action","schedule"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/bufferTime.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, SchedulerAction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * ![](bufferTime.png)\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * ## Examples\n *\n * Every second, emit an array of the recent click events\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(1000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds, emit the click events from the next 2 seconds\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(2000, 5000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: SchedulerLike = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ninterface DispatchCreateArg<T> {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number;\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: SchedulerLike;\n}\n\ninterface DispatchCloseArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: DispatchCreateArg<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule<DispatchCreateArg<T>>(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: SchedulerAction<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\nfunction dispatchBufferCreation<T>(this: SchedulerAction<DispatchCreateArg<T>>, state: DispatchCreateArg<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <SchedulerAction<DispatchCreateArg<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchCloseArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n"]},"metadata":{},"sourceType":"module"}
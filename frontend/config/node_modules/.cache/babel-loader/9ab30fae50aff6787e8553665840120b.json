{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n  return function mapOperation(source) {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nvar MapOperator = /*@__PURE__*/function () {\n  function MapOperator(project, thisArg) {\n    this.project = project;\n    this.thisArg = thisArg;\n  }\n\n  MapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  };\n\n  return MapOperator;\n}();\n\nexport { MapOperator };\n\nvar MapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MapSubscriber, _super);\n\n  function MapSubscriber(destination, project, thisArg) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.count = 0;\n    _this.thisArg = thisArg || _this;\n    return _this;\n  }\n\n  MapSubscriber.prototype._next = function (value) {\n    var result;\n\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  return MapSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AA2CA,SAAMC,UAAN,QAAiE,eAAjE;OACE,SAAOC,GAAP,CAAgBC,OAAhB,EAAgBC,OAAhB,EAA6B;SAC3B,SAAWC,YAAX,CAAuBC,MAAvB,EAAiC;QAC/B,OAAMH,OAAN,KAAmB,YAAC;MACrB;IACD;;IACA;EACH;AAED;;IACEI,2BAA2D,YAAsB;WAA7DA,qBAAuCH;IAAU;IACpE;EAED;;aACS,WAAOI,OAAU,UAAIC,UAAJ,EAAkBH,MAAlB,EAA8B;IACvD;EACH;;EAPA,OAOCC,WAPD;CAC6D;;AAa7D;;IAAkCG,uCAAaC,MAAb,EAAa;EAI7CX,iCAAYW,MAAZ;;WAAAD,cAGEE,aAAMT,SAAWC,SAAC;IAFA,wBAAuC,IAAvC,EAAuCQ,WAAvC,KAAuC,IAAvC;;IAJpBC,gBAAkBV,OAAlB;IAOEU,KAAI,CAACC,KAAL,GAAY,CAAZ;;IACD;EAIS;;eACJ,CAASC,UAACC;IACd,IAAIC,MAAJ;;QACE;MACDA;IAAC,SACAC,KAAK;MACL,iBAAOC,KAAP,CAAOD,GAAP;MACD;IACD;;IACD;EACH;;EAvBkC;CAAA","names":["tslib_1","Subscriber","map","project","thisArg","mapOperation","source","MapOperator","call","subscriber","MapSubscriber","_super","destination","_this","count","prototype","_next","result","err","error"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/map.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: R;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
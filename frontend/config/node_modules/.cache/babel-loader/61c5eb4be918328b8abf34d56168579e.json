{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function skipWhile(predicate) {\n  return function (source) {\n    return source.lift(new SkipWhileOperator(predicate));\n  };\n}\n\nvar SkipWhileOperator = /*@__PURE__*/function () {\n  function SkipWhileOperator(predicate) {\n    this.predicate = predicate;\n  }\n\n  SkipWhileOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  };\n\n  return SkipWhileOperator;\n}();\n\nvar SkipWhileSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SkipWhileSubscriber, _super);\n\n  function SkipWhileSubscriber(destination, predicate) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.skipping = true;\n    _this.index = 0;\n    return _this;\n  }\n\n  SkipWhileSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  };\n\n  SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n    try {\n      var result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  return SkipWhileSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAeA,SAAMC,UAAN,QAA6B,eAA7B;OACE,SAAOC,SAAP,CAAQC,SAAR,EAAkC;EACnC;IAAA;EAAA;AAED;;IACEC,iCAAoB,YAA+C;WAA/CA,6BAA+C;IAClE;EAED;;mBACe,CAACC,UAAUC,OAAI,sBAAoBC,MAApB,EAAgC;IAC7D;EACH;;EAPA,OAOCH,iBAPD;AAcA,CAbsB;;IAaeI,6CAAaC,MAAb,EAAa;EAIhDT,uCAAYS,MAAZ;;WAAAD,oBAEEE,aAAMP,WAAY;IADA,8BAA+CO,WAA/C,KAA+C,IAA/C;;IAJZC,kBAAoBR,SAApB;IACAQ,iBAAkB,IAAlB;;IAKP;EAES;;qBACS,WAAQC,QAAW,UAACC,KAAD,EAAC;IACrC,IAAIH,WAAK,GAAQ,KAAEA,WAAnB;;QACE,KAAKI;MACN;IAED;;QACE,gBAAgB;MACjBJ;IACF;EAEO;;qBACF;QACF;MACA,IAAIK,MAAC,GAAQ,KAAGZ,SAAH,CAAWU,KAAX,EAAmB,YAAnB,CAAb;MACD;IAAC,SACAG,KAAK;MACN;IACF;EACH;;EA5BqC;CAAA","names":["tslib_1","Subscriber","skipWhile","predicate","SkipWhileOperator","prototype","call","source","SkipWhileSubscriber","_super","destination","_this","_next","value","skipping","result","err"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/skipWhile.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * ![](skipWhile.png)\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n\nvar AnimationFrameAction = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AnimationFrameAction, _super);\n\n  function AnimationFrameAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    scheduler.actions.push(this);\n    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () {\n      return scheduler.flush(null);\n    }));\n  };\n\n  AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n\n    if (scheduler.actions.length === 0) {\n      cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n\n    return undefined;\n  };\n\n  return AnimationFrameAction;\n}(AsyncAction);\n\nexport { AnimationFrameAction };","map":{"version":3,"mappings":";AAAA,OAAO,KAAEA,OAAT,MAAsB,OAAtB;AASA;;IAA6CC,8CAAcC,MAAd,EAAc;EAEzDF,wCAAwDE,MAAxD;;WAAAD,qBAEEE,WAAMC,MAAW;IAFG,8BAAkCD,SAAlC,EAAkCC,IAAlC,KAAkC,IAAlC;;IACAC,kBAAmDF,SAAnD;;IAErB;EAES;;sBAA6D,4BAAiB;IAEtF,IAAIG,KAAK,KAAK,KAAI,CAAlB,EAAsB;MACpBA,QAAO,CAAP;IACD;;IAED,SAAS,KAAC,IAAV,IAAsBA,KAAK,GAAE,CAA7B,EAA6B;MAI7B,OAAOJ,MAAU,UAAV,CAAmBK,cAAnB,CAAkCC,IAAlC,CAAkC,IAAlC,EAA8CL,SAA9C,EAA8CM,EAA9C,EAA8CH,KAA9C,CAAP;IAED;;IACSH;IAA6D,wCAAiB,UAAjB,GAAiBO;MAAA;IAAA,EAAjB;;;sBAK5D,4BAAoB,UAACP,SAAD,EAAYM,EAAZ,EAAgBH,KAAhB,EAAuB;QACnDA;MAIGA;;;QAEFA,UAAU,IAAV,IAAmBA,KAAG,IAAtB,IAAgCA;MACjC;IAED;;IACD;MACHK,oBAAC,IAAD;MArC6CR,SAqC5C,UArC4C,GAqC5CS,SArC4C;;;;;;;CAAA","names":["tslib_1","AnimationFrameAction","_super","scheduler","work","_this","delay","requestAsyncId","call","id","requestAnimationFrame","cancelAnimationFrame","undefined"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(\n      () => scheduler.flush(null)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
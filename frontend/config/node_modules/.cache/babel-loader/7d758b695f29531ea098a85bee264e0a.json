{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nvar TakeLastOperator = /*@__PURE__*/function () {\n  function TakeLastOperator(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  TakeLastOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  };\n\n  return TakeLastOperator;\n}();\n\nvar TakeLastSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeLastSubscriber, _super);\n\n  function TakeLastSubscriber(destination, total) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.total = total;\n    _this.ring = new Array();\n    _this.count = 0;\n    return _this;\n  }\n\n  TakeLastSubscriber.prototype._next = function (value) {\n    var ring = this.ring;\n    var total = this.total;\n    var count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      var index = count % total;\n      ring[index] = value;\n    }\n  };\n\n  TakeLastSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n    var count = this.count;\n\n    if (count > 0) {\n      var total = this.count >= this.total ? this.total : this.count;\n      var ring = this.ring;\n\n      for (var i = 0; i < total; i++) {\n        var idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  };\n\n  return TakeLastSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AACA,SAASC,UAAT,QAAS,eAAT;AACA,SAASC,uBAAT,QAAsB,iCAAtB;AA8CA,SAAMC,KAAN,QAAgB,qBAAhB;OACE,SAAOC,QAAP,CAAgBC,KAAhB,EAAgB;SACd,SAASC,wBAAT,CAAiBC,MAAjB,EAAiB;QACfF,UAAO,GAAK;MACb;WACC;MACD;IACD;EACH;AAED;;IACEG,gCAAiC;WAAbA,iBAAaC;IAC/B,KAAIA,KAAJ,GAASA,KAAT;;QACE,aAAU;MACX;IACF;EAED;;kBACS,CAAMC,UAAUC,OAAK,sBAAmBJ,MAAnB,EAA+B;IAC5D;EACH;;EAVA,OAUCC,gBAVD;AAiBA,CAhBmC;;IAgBCI,4CAAaC,MAAb,EAAa;EAI/Cb,sCAAYa,MAAZ;;WAAAD,mBACEE,aAAML,OAAY;IAD4B,YAAKI,MAAL,CAAKF,KAAQ,IAAR,EAAQG,WAAR,KAAQ,IAAb;;IAHxCC,cAAiBN,KAAjB;IACAM,aAAK,IAAaC,KAAb,EAAL;;IAIP;EAES;;oBACK,CAAIN,UAAMO;IACvB,IAAMC,OAAK,KAAOA,IAAlB;IACA,IAAMT,KAAK,GAAG,KAAKA,KAAnB;IAEA,IAAIJ,KAAK,QAAMA,KAAN,EAAT;;QACEa,IAAI,CAACC,MAAL,GAAUV,OAAO;MAClBS;WACC;MACA,IAAIE,KAAC,GAAMf,KAAG,GAAMI,KAApB;MACDS;IACF;EAES;;oBACF,CAAWR,UAAQW,YAAY;IACrC,IAAIP,WAAQ,GAAK,KAAMA,WAAvB;IAEA,IAAIT,KAAK,GAAG,KAAGA,KAAf;;QACEA,KAAM,MAAK;MACX,IAAMI,KAAI,GAAI,KAAKJ,KAAL,IAAU,UAAV,GAAU,UAAV,GAAU,UAAxB;MAEA,QAAK,GAAK,KAAMa,IAAhB;;WACE,IAAMI,IAAG,GAAIA,IAAKb,OAAMa,KAAM;QAC9B,UAAWjB,KAAK,EAAhB,GAAsBI,KAAtB;QACDK;MACF;IAED;;IACDA;EACH;;EArCoC;CAAA","names":["tslib_1","Subscriber","ArgumentOutOfRangeError","empty","takeLast","count","takeLastOperatorFunction","source","TakeLastOperator","total","prototype","call","TakeLastSubscriber","_super","destination","_this","Array","_next","ring","length","index","_complete","i"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/takeLast.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * ![](takeLast.png)\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * ## Example\n * Take the last 3 values of an Observable with many values\n * ```ts\n * import { range } from 'rxjs';\n * import { takeLast } from 'rxjs/operators';\n *\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
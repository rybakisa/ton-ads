{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n  return function (source) {\n    return source.lift(new EveryOperator(predicate, thisArg, source));\n  };\n}\n\nvar EveryOperator = /*@__PURE__*/function () {\n  function EveryOperator(predicate, thisArg, source) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n    this.source = source;\n  }\n\n  EveryOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  };\n\n  return EveryOperator;\n}();\n\nvar EverySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(EverySubscriber, _super);\n\n  function EverySubscriber(destination, predicate, thisArg, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.thisArg = thisArg;\n    _this.source = source;\n    _this.index = 0;\n    _this.thisArg = thisArg || _this;\n    return _this;\n  }\n\n  EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  };\n\n  EverySubscriber.prototype._next = function (value) {\n    var result = false;\n\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  };\n\n  EverySubscriber.prototype._complete = function () {\n    this.notifyComplete(true);\n  };\n\n  return EverySubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAwBA,SAAMC,UAAN,QAAyB,eAAzB;OAEE,SAAOC,KAAP,CAAQC,SAAR,EAAkCC,OAAlC,EAAkC;EACnC;IAAA;EAAA;AAED;;IACEC,6BAAoB,YAEA;WAFAA,yBAAsED;IACtE;IACA;IACnB;EAED;;eACS,WAAOE,OAAU,UAAIC,QAAJ,EAAoBC,MAApB,EAA8B;IACvD;EACH;;EATA,OASCH,aATD;AAgBA,CAfsB;;IAeWI,yCAAaC,MAAb,EAAa;EAG5CV,mCAAYU,MAAZ;;WAAAD,gBAIEE,aAAMR,WAAYC,SAEnBI;IALmB,8BAAsEG,WAAtE,KAAsE,IAAtE;;IACAC;IACAA;IALZA,eAAiBJ,MAAjB;IAONI,KAAI,CAACC,KAAL,GAAY,CAAZ;;IACD;EAEO;;iBACD,WAAiBC,iBAAiB;IACvC,KAAKH,WAAL,CAAiBI,IAAjB,CAAiBC,eAAjB;IACD;EAES;;iBACE,WAASC;IACnB,IAAIC,cAAJ;;QACE;MACDA;IAAC,SACAC,KAAK;MACL,iBAAOC,KAAP,CAAOD,GAAP;MACD;IAED;;QACE,SAAK;MACN;IACF;EAES;;iBACH,WAAeE,YAAM;IAC3B;EACH;;EAjCiC;CAAA","names":["tslib_1","Subscriber","every","predicate","thisArg","EveryOperator","call","observer","source","EverySubscriber","_super","destination","_this","index","notifyComplete","next","everyValueMatch","_next","result","err","error","_complete"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/every.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * ## Example\n * A simple example emitting true if all elements are less than 5, false otherwise\n * ```ts\n * import { of } from 'rxjs';\n * import { every } from 'rxjs/operators';\n *\n *  of(1, 2, 3, 4, 5, 6).pipe(\n *     every(x => x < 5),\n * )\n * .subscribe(x => console.log(x)); // -> false\n * ```\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
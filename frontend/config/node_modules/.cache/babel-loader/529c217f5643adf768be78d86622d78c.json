{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function dematerialize() {\n  return function dematerializeOperatorFunction(source) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nvar DeMaterializeOperator = /*@__PURE__*/function () {\n  function DeMaterializeOperator() {}\n\n  DeMaterializeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  };\n\n  return DeMaterializeOperator;\n}();\n\nvar DeMaterializeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DeMaterializeSubscriber, _super);\n\n  function DeMaterializeSubscriber(destination) {\n    return _super.call(this, destination) || this;\n  }\n\n  DeMaterializeSubscriber.prototype._next = function (value) {\n    value.observe(this.destination);\n  };\n\n  return DeMaterializeSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAkDA,SAAMC,UAAN,QAAgB,eAAhB;OACE,SAAOC,aAAP,GAAgB;SACd,SAAOC,6BAAP,CAAuBC,MAAvB,EAAgD;IAChD;EACH;AAED;;IAAAC;EAIA,SAACA,qBAAD,GAAC,CAHC;;uBACgB,WAAcC,6BAAwBF,MAAxB,EAAqC;IAClE;EACH;;EAJA,OAICC,qBAJD;AAWA,CAXA;;IAWmEE,iDAAaC,MAAb,EAAa;EAC9ER,2CAAYQ,MAAZ;;mCACQC,aAAY;IACnB;EAES;;yBACW,WAAWC,QAAE;IACjCC;EACH;;EARmE;CAAA","names":["tslib_1","Subscriber","dematerialize","dematerializeOperatorFunction","source","DeMaterializeOperator","call","DeMaterializeSubscriber","_super","destination","_next","value"],"sources":["/home/rybakisa/Desktop/TEMP/HackaTON/TON Ads/ton-ads/node_modules/rxjs/src/internal/operators/dematerialize.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * ![](dematerialize.png)\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * ## Example\n * Convert an Observable of Notifications to an actual Observable\n * ```ts\n * import { of, Notification } from 'rxjs';\n * import { dematerialize } from 'rxjs/operators';\n *\n * const notifA = new Notification('N', 'A');\n * const notifB = new Notification('N', 'B');\n * const notifE = new Notification('E', undefined,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * const materialized = of(notifA, notifB, notifE);\n * const upperCase = materialized.pipe(dematerialize());\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n * ```\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}